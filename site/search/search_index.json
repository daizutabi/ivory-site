{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ivory Documentation Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Documentation</span></span></span>"},{"location":"#ivory-documentation","text":"Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"Ivory Documentation"},{"location":"quickstart/","text":"Quickstart Installation Install Ivory using pip . $ pip install ivory Using an Ivory Client Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-05-28 14:04:50 ( 1.04s ) python3 ( 1.33s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.34s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-05-28 14:04:51 ( 3.00ms ) python3 ( 1.34s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-05-28 14:04:51 ( 3.00ms ) python3 ( 1.34s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Create NumPy data In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function definition and an example output: Code 1 rectangle.data.create_data def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z import rectangle.data xy, z = rectangle.data.create_data(4) xy [9] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.37s ) array([[4.350172 , 3.3468554], [2.3524652, 2.528618 ], [4.3876657, 3.0725875], [2.5166874, 2.1334836]], dtype=float32) z [10] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.37s ) array([14.535663, 6.105173, 13.264383, 5.242505], dtype=float32) Set of Data classes Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. Code 2 rectangle.data.Data @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Here, kfold_split function creates a fold-array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [12] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.40s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) In Ivory, fold number = -1 means their samples are test data. Now, we can get a Data instance. data = rectangle.data.Data() data [13] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.40s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [14] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.40s ) [0, array([3.46939 , 2.591532], dtype=float32), array([9.007157], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from. Define a model We use a simple MLP model here. Code 3 rectangle.torch.Model class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) Parameter file for Run Ivory configures a run using a YAML file. Here is a full example. File 2 torch.yaml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [17] 2020-05-28 14:04:52 ( 279ms ) python3 ( 1.96s ) [I 200528 14:04:52 tracker:48] A new experiment created with name: 'torch' Run(id='aee58e7ae13946fda6f1153b3a55ee81', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [18] 2020-05-28 14:04:52 ( 7.00ms ) python3 ( 1.97s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 100 - 100 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: criterion: def: torch.nn.functional.mse_loss class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: aee58e7ae13946fda6f1153b3a55ee81 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method takes keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [19] 2020-05-28 14:04:52 ( 44.0ms ) python3 ( 2.01s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60 Train a model Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [20] 2020-05-28 14:04:52 ( 1.40s ) python3 ( 3.41s ) [epoch#0] loss=13.8 val_loss=6.898 lr=0.001 best [epoch#1] loss=6.048 val_loss=5.47 lr=0.001 best [epoch#2] loss=4.698 val_loss=4.074 lr=0.001 best [epoch#3] loss=3.386 val_loss=2.75 lr=0.001 best [epoch#4] loss=2.29 val_loss=1.8 lr=0.001 best [epoch#5] loss=1.448 val_loss=1.157 lr=0.001 best [epoch#6] loss=0.9581 val_loss=0.7455 lr=0.001 best [epoch#7] loss=0.7335 val_loss=0.6343 lr=0.001 best [epoch#8] loss=0.652 val_loss=0.5044 lr=0.001 best [epoch#9] loss=0.5568 val_loss=0.4829 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [21] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.42s ) Dict(['loss', 'val_loss', 'lr']) Also the model output and target are automatically collected in a run.results instance. run.results [22] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.42s ) Results(['train', 'val']) run.results.val.output[:5] [23] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.42s ) array([[17.734343 ], [ 8.502077 ], [ 4.600261 ], [ 9.677441 ], [-0.31529188]], dtype=float32) run.results.val.target[:5] [24] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.43s ) array([[19.092695 ], [ 7.831299 ], [ 4.763453 ], [ 8.954919 ], [ 1.1454268]], dtype=float32) Test a model Testing a model is as simple as training. Just call run.start('test') instead of (default) 'train' . run.start('test') run.results [25] 2020-05-28 14:04:54 ( 44.0ms ) python3 ( 3.47s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [26] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.48s ) array([[12.98917 ], [ 6.09395 ], [ 8.545083], [16.01122 ], [10.126686]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [27] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.48s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32) Task for multiple runs Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [28] 2020-05-28 14:04:54 ( 46.0ms ) python3 ( 3.53s ) Task(id='276f05593f1d44a4989b03ff290ac12e', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [29] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.53s ) <generator object Task.product at 0x0000022503776CC8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specified. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [30] 2020-05-28 14:04:54 ( 2.29s ) python3 ( 5.82s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3 Collect runs Our client has a Tracker instance. It stores the state of runs in background using the MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by the MLFlow Tracking. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [31] 2020-05-28 14:04:56 ( 4.00ms ) python3 ( 5.83s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [32] 2020-05-28 14:04:56 ( 77.0ms ) python3 ( 5.90s ) 7d756 run#6 74ba7 run#5 93ec6 run#4 18b2e run#3 276f0 task#0 e6efe run#2 e7021 run#1 aee58 run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [33] 2020-05-28 14:04:56 ( 154ms ) python3 ( 6.06s ) 18b2e run#3 e6efe run#2 e7021 run#1 aee58 run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [34] 2020-05-28 14:04:56 ( 46.0ms ) python3 ( 6.10s ) 7d756 run#6 74ba7 run#5 93ec6 run#4 18b2e run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [35] 2020-05-28 14:04:56 ( 52.0ms ) python3 ( 6.15s ) aee58 run#0 276f0 task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [36] 2020-05-28 14:04:56 ( 55.0ms ) python3 ( 6.21s ) e6efe run#2 18b2e run#3 Load runs and results The Ivory Client class can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [37] 2020-05-28 14:04:56 ( 65.0ms ) python3 ( 6.27s ) 7d756 run#6 74ba7 run#5 93ec6 run#4 18b2e run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [38] 2020-05-28 14:04:56 ( 53.0ms ) python3 ( 6.33s ) Run(id='7d756383298549a7a513d99aa5e5cb42', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [39] 2020-05-28 14:04:56 ( 3.00ms ) python3 ( 6.33s ) 3 By loading a run, we obtained the trained model. run.model.eval() [40] 2020-05-28 14:04:56 ( 3.00ms ) python3 ( 6.33s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=100, bias=True) (2): Linear(in_features=100, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [41] 2020-05-28 14:04:56 ( 16.0ms ) python3 ( 6.35s ) [output] tensor([[10.3473], [ 9.6994], [ 5.4839], [10.7646], [ 8.1888]]) [target] tensor([[9.0615], [7.9078], [3.5456], [9.3551], [5.6998]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [42] 2020-05-28 14:04:56 ( 26.0ms ) python3 ( 6.38s ) Results(['train', 'val', 'test']) for mode in ['train', 'val', 'test']: print(mode, results[mode].output.shape) [43] 2020-05-28 14:04:57 ( 7.00ms ) python3 ( 6.38s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. To load multiple run's results, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [44] 2020-05-28 14:04:57 ( 89.0ms ) python3 ( 6.47s ) Results(['val', 'test']) for mode in ['val', 'test']: print(mode, results[mode].output.shape) [45] 2020-05-28 14:04:57 ( 7.00ms ) python3 ( 6.48s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [46] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.48s ) (800, 200) Usually, duplicated samples are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode in ['val', 'test']: print(mode, reduced_results[mode].output.shape) [47] 2020-05-28 14:04:57 ( 15.0ms ) python3 ( 6.50s ) val (800, 1) test (200, 1) Compare the results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [48] 2020-05-28 14:04:57 ( 9.00ms ) python3 ( 6.51s ) [results] [[12.70078 ] [10.867525] [11.811051] [11.64734 ]] -> mean: 11.756674 [reduced_results] [[11.756674]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [49] 2020-05-28 14:04:57 ( 87.0ms ) python3 ( 6.59s ) Results(['val', 'test']) for mode in ['val', 'test']: print(mode, results[mode].output.shape) [50] 2020-05-28 14:04:57 ( 6.00ms ) python3 ( 6.60s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [51] 2020-05-28 14:04:57 ( 6.00ms ) python3 ( 6.61s ) 1.5774978 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [52] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.61s ) array([[11.756674 ], [ 7.0753508], [ 9.550335 ], [13.795639 ], [ 9.919226 ]], dtype=float32) Summary In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Quickstart</span></span></span>"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Install Ivory using pip . $ pip install ivory","title":"Installation"},{"location":"quickstart/#using-an-ivory-client","text":"Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-05-28 14:04:50 ( 1.04s ) python3 ( 1.33s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.34s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-05-28 14:04:51 ( 3.00ms ) python3 ( 1.34s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-05-28 14:04:51 ( 3.00ms ) python3 ( 1.34s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Using an Ivory Client"},{"location":"quickstart/#create-numpy-data","text":"In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function definition and an example output: Code 1 rectangle.data.create_data def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z import rectangle.data xy, z = rectangle.data.create_data(4) xy [9] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.37s ) array([[4.350172 , 3.3468554], [2.3524652, 2.528618 ], [4.3876657, 3.0725875], [2.5166874, 2.1334836]], dtype=float32) z [10] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.37s ) array([14.535663, 6.105173, 13.264383, 5.242505], dtype=float32)","title":"Create NumPy data"},{"location":"quickstart/#set-of-data-classes","text":"Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. Code 2 rectangle.data.Data @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Here, kfold_split function creates a fold-array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [12] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.40s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) In Ivory, fold number = -1 means their samples are test data. Now, we can get a Data instance. data = rectangle.data.Data() data [13] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.40s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [14] 2020-05-28 14:04:51 ( 4.00ms ) python3 ( 1.40s ) [0, array([3.46939 , 2.591532], dtype=float32), array([9.007157], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from.","title":"Set of Data classes"},{"location":"quickstart/#define-a-model","text":"We use a simple MLP model here. Code 3 rectangle.torch.Model class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x)","title":"Define a model"},{"location":"quickstart/#parameter-file-for-run","text":"Ivory configures a run using a YAML file. Here is a full example. File 2 torch.yaml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [17] 2020-05-28 14:04:52 ( 279ms ) python3 ( 1.96s ) [I 200528 14:04:52 tracker:48] A new experiment created with name: 'torch' Run(id='aee58e7ae13946fda6f1153b3a55ee81', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [18] 2020-05-28 14:04:52 ( 7.00ms ) python3 ( 1.97s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 100 - 100 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: criterion: def: torch.nn.functional.mse_loss class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: aee58e7ae13946fda6f1153b3a55ee81 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method takes keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [19] 2020-05-28 14:04:52 ( 44.0ms ) python3 ( 2.01s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60","title":"Parameter file for Run"},{"location":"quickstart/#train-a-model","text":"Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [20] 2020-05-28 14:04:52 ( 1.40s ) python3 ( 3.41s ) [epoch#0] loss=13.8 val_loss=6.898 lr=0.001 best [epoch#1] loss=6.048 val_loss=5.47 lr=0.001 best [epoch#2] loss=4.698 val_loss=4.074 lr=0.001 best [epoch#3] loss=3.386 val_loss=2.75 lr=0.001 best [epoch#4] loss=2.29 val_loss=1.8 lr=0.001 best [epoch#5] loss=1.448 val_loss=1.157 lr=0.001 best [epoch#6] loss=0.9581 val_loss=0.7455 lr=0.001 best [epoch#7] loss=0.7335 val_loss=0.6343 lr=0.001 best [epoch#8] loss=0.652 val_loss=0.5044 lr=0.001 best [epoch#9] loss=0.5568 val_loss=0.4829 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [21] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.42s ) Dict(['loss', 'val_loss', 'lr']) Also the model output and target are automatically collected in a run.results instance. run.results [22] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.42s ) Results(['train', 'val']) run.results.val.output[:5] [23] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.42s ) array([[17.734343 ], [ 8.502077 ], [ 4.600261 ], [ 9.677441 ], [-0.31529188]], dtype=float32) run.results.val.target[:5] [24] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.43s ) array([[19.092695 ], [ 7.831299 ], [ 4.763453 ], [ 8.954919 ], [ 1.1454268]], dtype=float32)","title":"Train a model"},{"location":"quickstart/#test-a-model","text":"Testing a model is as simple as training. Just call run.start('test') instead of (default) 'train' . run.start('test') run.results [25] 2020-05-28 14:04:54 ( 44.0ms ) python3 ( 3.47s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [26] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.48s ) array([[12.98917 ], [ 6.09395 ], [ 8.545083], [16.01122 ], [10.126686]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [27] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.48s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32)","title":"Test a model"},{"location":"quickstart/#task-for-multiple-runs","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [28] 2020-05-28 14:04:54 ( 46.0ms ) python3 ( 3.53s ) Task(id='276f05593f1d44a4989b03ff290ac12e', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [29] 2020-05-28 14:04:54 ( 4.00ms ) python3 ( 3.53s ) <generator object Task.product at 0x0000022503776CC8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specified. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [30] 2020-05-28 14:04:54 ( 2.29s ) python3 ( 5.82s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3","title":"Task for multiple runs"},{"location":"quickstart/#collect-runs","text":"Our client has a Tracker instance. It stores the state of runs in background using the MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by the MLFlow Tracking. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [31] 2020-05-28 14:04:56 ( 4.00ms ) python3 ( 5.83s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [32] 2020-05-28 14:04:56 ( 77.0ms ) python3 ( 5.90s ) 7d756 run#6 74ba7 run#5 93ec6 run#4 18b2e run#3 276f0 task#0 e6efe run#2 e7021 run#1 aee58 run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [33] 2020-05-28 14:04:56 ( 154ms ) python3 ( 6.06s ) 18b2e run#3 e6efe run#2 e7021 run#1 aee58 run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [34] 2020-05-28 14:04:56 ( 46.0ms ) python3 ( 6.10s ) 7d756 run#6 74ba7 run#5 93ec6 run#4 18b2e run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [35] 2020-05-28 14:04:56 ( 52.0ms ) python3 ( 6.15s ) aee58 run#0 276f0 task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [36] 2020-05-28 14:04:56 ( 55.0ms ) python3 ( 6.21s ) e6efe run#2 18b2e run#3","title":"Collect runs"},{"location":"quickstart/#load-runs-and-results","text":"The Ivory Client class can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [37] 2020-05-28 14:04:56 ( 65.0ms ) python3 ( 6.27s ) 7d756 run#6 74ba7 run#5 93ec6 run#4 18b2e run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [38] 2020-05-28 14:04:56 ( 53.0ms ) python3 ( 6.33s ) Run(id='7d756383298549a7a513d99aa5e5cb42', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [39] 2020-05-28 14:04:56 ( 3.00ms ) python3 ( 6.33s ) 3 By loading a run, we obtained the trained model. run.model.eval() [40] 2020-05-28 14:04:56 ( 3.00ms ) python3 ( 6.33s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=100, bias=True) (2): Linear(in_features=100, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [41] 2020-05-28 14:04:56 ( 16.0ms ) python3 ( 6.35s ) [output] tensor([[10.3473], [ 9.6994], [ 5.4839], [10.7646], [ 8.1888]]) [target] tensor([[9.0615], [7.9078], [3.5456], [9.3551], [5.6998]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [42] 2020-05-28 14:04:56 ( 26.0ms ) python3 ( 6.38s ) Results(['train', 'val', 'test']) for mode in ['train', 'val', 'test']: print(mode, results[mode].output.shape) [43] 2020-05-28 14:04:57 ( 7.00ms ) python3 ( 6.38s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. To load multiple run's results, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [44] 2020-05-28 14:04:57 ( 89.0ms ) python3 ( 6.47s ) Results(['val', 'test']) for mode in ['val', 'test']: print(mode, results[mode].output.shape) [45] 2020-05-28 14:04:57 ( 7.00ms ) python3 ( 6.48s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [46] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.48s ) (800, 200) Usually, duplicated samples are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode in ['val', 'test']: print(mode, reduced_results[mode].output.shape) [47] 2020-05-28 14:04:57 ( 15.0ms ) python3 ( 6.50s ) val (800, 1) test (200, 1) Compare the results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [48] 2020-05-28 14:04:57 ( 9.00ms ) python3 ( 6.51s ) [results] [[12.70078 ] [10.867525] [11.811051] [11.64734 ]] -> mean: 11.756674 [reduced_results] [[11.756674]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [49] 2020-05-28 14:04:57 ( 87.0ms ) python3 ( 6.59s ) Results(['val', 'test']) for mode in ['val', 'test']: print(mode, results[mode].output.shape) [50] 2020-05-28 14:04:57 ( 6.00ms ) python3 ( 6.60s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [51] 2020-05-28 14:04:57 ( 6.00ms ) python3 ( 6.61s ) 1.5774978 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [52] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.61s ) array([[11.756674 ], [ 7.0753508], [ 9.550335 ], [13.795639 ], [ 9.919226 ]], dtype=float32)","title":"Load runs and results"},{"location":"quickstart/#summary","text":"In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"Summary"},{"location":"api/data/","text":"Skipped.","title":"Data"},{"location":"tutorial/callbacks/","text":"Callbacks Base System Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-05-28 14:04:57 ( 5.00ms ) python3 ( 6.64s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have a `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.64s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.65s ) CallbackCaller(num_objects=1) The number of registerd objects is 1. list(caller) [5] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.65s ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [6] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.65s ) CallbackCaller(num_objects=13) The number of objects increased up to 13. list(caller) [7] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.66s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Inspect each callback funtion. caller.on_init_begin [8] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.66s ) Callback([]) This is an empty callback because the caller has no objects that define the on_init_begin() function. On the other hand, caller.on_fit_begin [9] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.66s ) Callback(['simple']) The simple object is registerd as a receiver for the on_fit_begin() function. We can call this. caller.on_fit_begin() [10] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.67s ) on_fit_begin is called from id=2358113110024 id(caller) [11] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.67s ) 2358113110024 This caller-receiver network among arbitrary object collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below. Example Preparation To work with the callbacks, we create data and model set that we have used. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [12] 2020-05-28 14:04:57 ( 129ms ) python3 ( 6.80s ) NameError: name 'create_instance' is not defined NameError Traceback (most recent call last) <ipython-input-83-5d546837fa48> in <module> 19 hidden_sizes: [3, 4, 5] 20 \"\"\" ---> 21 dataloaders = create(doc, 'dataloaders') 22 model = create(doc, 'model') <ipython-input-83-5d546837fa48> in create(doc, name, **kwargs) 4 def create(doc, name, **kwargs): 5 params = yaml.safe_load(doc) ----> 6 return create_instance(params, name, **kwargs) 7 8 doc = \"\"\" Results The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-05-28 14:04:57 ( 103ms ) python3 ( 6.90s ) Results([]) import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [14] 2020-05-28 14:04:57 ( 8.00ms ) python3 ( 6.91s ) NameError: name 'dataloaders' is not defined NameError Traceback (most recent call last) <ipython-input-85-7b24c9848ff9> in <module> 2 3 run = ivory.core.run.Run( ----> 4 dataloaders=dataloaders, 5 model=model, 6 results=results # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-05-28 14:04:57 ( 109ms ) python3 ( 7.02s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-05-28 14:04:57 ( 10.0ms ) python3 ( 7.03s ) TypeError: 'Missing' object is not callable TypeError Traceback (most recent call last) <ipython-input-87-e9614b345816> in <module> 1 # For simplicity, just one epoch with some batches. ----> 2 run.on_train_begin() 3 data_iter = iter(run.dataloaders.train) 4 for _ in range(3): 5 index, input, target = next(data_iter) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [17] 2020-05-28 14:04:57 ( 103ms ) python3 ( 7.13s ) <ivory.core.collections.Missing at 0x2250a7e46c8> results.train.index # Shuffled. The length is batch_size (4) x 3. [18] 2020-05-28 14:04:57 ( 8.00ms ) python3 ( 7.14s ) AttributeError: Results([]) has not attribute 'train' AttributeError Traceback (most recent call last) <ipython-input-89-bbb2dc847f8b> in <module> ----> 1 results.train.index # Shuffled. The length is batch_size (4) x 3. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.index # Not shuffled. The length is batch_size (4) x 2. [19] 2020-05-28 14:04:57 ( 109ms ) python3 ( 7.25s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-90-d9471d6d9605> in <module> ----> 1 results.val.index # Not shuffled. The length is batch_size (4) x 2. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.output # Actually, no learning. [20] 2020-05-28 14:04:57 ( 108ms ) python3 ( 7.36s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-91-38d4535a26b2> in <module> ----> 1 results.val.output # Actually, no learning. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.target [21] 2020-05-28 14:04:58 ( 108ms ) python3 ( 7.46s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-92-0c5bc72ef6f6> in <module> ----> 1 results.val.target ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") Other Callback There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callbacks</span></span></span>"},{"location":"tutorial/callbacks/#callbacks","text":"","title":"Callbacks"},{"location":"tutorial/callbacks/#base-system","text":"Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-05-28 14:04:57 ( 5.00ms ) python3 ( 6.64s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have a `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.64s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.65s ) CallbackCaller(num_objects=1) The number of registerd objects is 1. list(caller) [5] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.65s ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [6] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.65s ) CallbackCaller(num_objects=13) The number of objects increased up to 13. list(caller) [7] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.66s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Inspect each callback funtion. caller.on_init_begin [8] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.66s ) Callback([]) This is an empty callback because the caller has no objects that define the on_init_begin() function. On the other hand, caller.on_fit_begin [9] 2020-05-28 14:04:57 ( 4.00ms ) python3 ( 6.66s ) Callback(['simple']) The simple object is registerd as a receiver for the on_fit_begin() function. We can call this. caller.on_fit_begin() [10] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.67s ) on_fit_begin is called from id=2358113110024 id(caller) [11] 2020-05-28 14:04:57 ( 3.00ms ) python3 ( 6.67s ) 2358113110024 This caller-receiver network among arbitrary object collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below.","title":"Base System"},{"location":"tutorial/callbacks/#example-preparation","text":"To work with the callbacks, we create data and model set that we have used. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [12] 2020-05-28 14:04:57 ( 129ms ) python3 ( 6.80s ) NameError: name 'create_instance' is not defined NameError Traceback (most recent call last) <ipython-input-83-5d546837fa48> in <module> 19 hidden_sizes: [3, 4, 5] 20 \"\"\" ---> 21 dataloaders = create(doc, 'dataloaders') 22 model = create(doc, 'model') <ipython-input-83-5d546837fa48> in create(doc, name, **kwargs) 4 def create(doc, name, **kwargs): 5 params = yaml.safe_load(doc) ----> 6 return create_instance(params, name, **kwargs) 7 8 doc = \"\"\"","title":"Example Preparation"},{"location":"tutorial/callbacks/#results","text":"The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-05-28 14:04:57 ( 103ms ) python3 ( 6.90s ) Results([]) import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [14] 2020-05-28 14:04:57 ( 8.00ms ) python3 ( 6.91s ) NameError: name 'dataloaders' is not defined NameError Traceback (most recent call last) <ipython-input-85-7b24c9848ff9> in <module> 2 3 run = ivory.core.run.Run( ----> 4 dataloaders=dataloaders, 5 model=model, 6 results=results # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-05-28 14:04:57 ( 109ms ) python3 ( 7.02s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-05-28 14:04:57 ( 10.0ms ) python3 ( 7.03s ) TypeError: 'Missing' object is not callable TypeError Traceback (most recent call last) <ipython-input-87-e9614b345816> in <module> 1 # For simplicity, just one epoch with some batches. ----> 2 run.on_train_begin() 3 data_iter = iter(run.dataloaders.train) 4 for _ in range(3): 5 index, input, target = next(data_iter) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [17] 2020-05-28 14:04:57 ( 103ms ) python3 ( 7.13s ) <ivory.core.collections.Missing at 0x2250a7e46c8> results.train.index # Shuffled. The length is batch_size (4) x 3. [18] 2020-05-28 14:04:57 ( 8.00ms ) python3 ( 7.14s ) AttributeError: Results([]) has not attribute 'train' AttributeError Traceback (most recent call last) <ipython-input-89-bbb2dc847f8b> in <module> ----> 1 results.train.index # Shuffled. The length is batch_size (4) x 3. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.index # Not shuffled. The length is batch_size (4) x 2. [19] 2020-05-28 14:04:57 ( 109ms ) python3 ( 7.25s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-90-d9471d6d9605> in <module> ----> 1 results.val.index # Not shuffled. The length is batch_size (4) x 2. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.output # Actually, no learning. [20] 2020-05-28 14:04:57 ( 108ms ) python3 ( 7.36s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-91-38d4535a26b2> in <module> ----> 1 results.val.output # Actually, no learning. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.target [21] 2020-05-28 14:04:58 ( 108ms ) python3 ( 7.46s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-92-0c5bc72ef6f6> in <module> ----> 1 results.val.target ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\")","title":"Results"},{"location":"tutorial/callbacks/#other-callback","text":"There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"Other Callback"},{"location":"tutorial/core/","text":"Ivory Core Entities Client Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [3] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 7.62s ) Client(num_objects=2) list(client) [4] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 7.62s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . Show the files in the working directory examples . import os os.listdir('examples') [5] 2020-05-28 14:04:58 ( 3.00ms ) python3 ( 7.63s ) ['client.yml', 'mlruns', 'rectangle', 'study.yml', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by the MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 5 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Experiment The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of the MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [6] 2020-05-28 14:04:58 ( 12.0ms ) python3 ( 7.64s ) [I 200528 14:04:58 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by the MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 6 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [7] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 7.64s ) {'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'batch_size': 10, 'fold': 0, 'class': 'ivory.torch.data.DataLoaders'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}, 'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. Run After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below. Default parameters Calling without arguments creates a run with default parameters. run = experiment.create_run() run [8] 2020-05-28 14:04:58 ( 34.0ms ) python3 ( 7.68s ) Run(id='863a25c674964399968957194f13874c', name='run#0', num_objects=12) Here, the ID for this run was given by the MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \". Simple literal (int, float, str) Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.dataloaders.fold [9] 2020-05-28 14:04:58 ( 39.0ms ) python3 ( 7.72s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.dataloaders.fold [10] 2020-05-28 14:04:58 ( 12.0ms ) python3 ( 7.73s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-105-689904ca4a89> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.dataloaders.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict): List A list parameter can be overwritten by passing a new list. Off course you can change the lengh of the list. The original hidden_sizes was [100, 100] . run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [11] 2020-05-28 14:04:58 ( 126ms ) python3 ( 7.85s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [12] 2020-05-28 14:04:58 ( 47.0ms ) python3 ( 7.90s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this method is unnecessary? This method is prepared for hyperparameter tuning . In some case, you may want to change a part of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [13] 2020-05-28 14:04:58 ( 45.0ms ) python3 ( 7.95s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) ) Duplicated parameter name Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [14] 2020-05-28 14:04:58 ( 47.0ms ) python3 ( 7.99s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all. Scoping by dots To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [15] 2020-05-28 14:04:58 ( 50.0ms ) python3 ( 8.04s ) (8, 20) Object type Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [16] 2020-05-28 14:04:58 ( 52.0ms ) python3 ( 8.09s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [17] 2020-05-28 14:04:58 ( 53.0ms ) python3 ( 8.15s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort. Creating a run from a client In the above examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 4 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 5 run = client.create_run('torch', fold=3)","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Core Entities</span></span></span>"},{"location":"tutorial/core/#ivory-core-entities","text":"","title":"Ivory Core Entities"},{"location":"tutorial/core/#client","text":"Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [3] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 7.62s ) Client(num_objects=2) list(client) [4] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 7.62s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . Show the files in the working directory examples . import os os.listdir('examples') [5] 2020-05-28 14:04:58 ( 3.00ms ) python3 ( 7.63s ) ['client.yml', 'mlruns', 'rectangle', 'study.yml', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by the MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 5 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Client"},{"location":"tutorial/core/#experiment","text":"The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of the MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [6] 2020-05-28 14:04:58 ( 12.0ms ) python3 ( 7.64s ) [I 200528 14:04:58 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by the MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 6 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [7] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 7.64s ) {'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'batch_size': 10, 'fold': 0, 'class': 'ivory.torch.data.DataLoaders'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}, 'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance.","title":"Experiment"},{"location":"tutorial/core/#run","text":"After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below.","title":"Run"},{"location":"tutorial/core/#default-parameters","text":"Calling without arguments creates a run with default parameters. run = experiment.create_run() run [8] 2020-05-28 14:04:58 ( 34.0ms ) python3 ( 7.68s ) Run(id='863a25c674964399968957194f13874c', name='run#0', num_objects=12) Here, the ID for this run was given by the MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \".","title":"Default parameters"},{"location":"tutorial/core/#simple-literal-int-float-str","text":"Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.dataloaders.fold [9] 2020-05-28 14:04:58 ( 39.0ms ) python3 ( 7.72s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.dataloaders.fold [10] 2020-05-28 14:04:58 ( 12.0ms ) python3 ( 7.73s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-105-689904ca4a89> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.dataloaders.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict):","title":"Simple literal (int, float, str)"},{"location":"tutorial/core/#list","text":"A list parameter can be overwritten by passing a new list. Off course you can change the lengh of the list. The original hidden_sizes was [100, 100] . run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [11] 2020-05-28 14:04:58 ( 126ms ) python3 ( 7.85s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [12] 2020-05-28 14:04:58 ( 47.0ms ) python3 ( 7.90s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this method is unnecessary? This method is prepared for hyperparameter tuning . In some case, you may want to change a part of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [13] 2020-05-28 14:04:58 ( 45.0ms ) python3 ( 7.95s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) )","title":"List"},{"location":"tutorial/core/#duplicated-parameter-name","text":"Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [14] 2020-05-28 14:04:58 ( 47.0ms ) python3 ( 7.99s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all.","title":"Duplicated parameter name"},{"location":"tutorial/core/#scoping-by-dots","text":"To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [15] 2020-05-28 14:04:58 ( 50.0ms ) python3 ( 8.04s ) (8, 20)","title":"Scoping by dots"},{"location":"tutorial/core/#object-type","text":"Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [16] 2020-05-28 14:04:58 ( 52.0ms ) python3 ( 8.09s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [17] 2020-05-28 14:04:58 ( 53.0ms ) python3 ( 8.15s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort.","title":"Object type"},{"location":"tutorial/core/#creating-a-run-from-a-client","text":"In the above examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 4 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 5 run = client.create_run('torch', fold=3)","title":"Creating a run from a client"},{"location":"tutorial/data/","text":"Set of Data classes Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain about them. File 3 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Data First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 8.16s ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [3] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.17s ) [0, array([3.46939 , 2.591532], dtype=float32), array([9.007157], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 8.17s ) [array([ 0, 10, 20]), array([[3.46939 , 2.591532 ], [3.0152574, 2.056742 ], [2.1888337, 4.3979006]], dtype=float32), array([[9.007157 ], [6.2764583], [9.553357 ]], dtype=float32)] Dataset An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.18s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-05-28 14:04:58 ( 3.00ms ) python3 ( 8.18s ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get sample from an dataset. use normal indexing dataset[0] # Integer index. [7] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.19s ) [0, array([3.46939 , 2.591532], dtype=float32), array([9.007157], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.19s ) [array([ 0, 16, 33]), array([[3.46939 , 2.591532 ], [1.6906978, 2.0528266], [2.2630548, 4.119627 ]], dtype=float32), array([[9.007157 ], [3.5456395], [9.6264515]], dtype=float32)] index, *_ = dataset[:] print(len(index)) index[:10] [9] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 8.20s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional argument: transform . def transform(mode:str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.20s ) [0, array([6.93878 , 5.183064], dtype=float32), array([18.014315], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [11] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.21s ) [array([6.93878 , 5.183064], dtype=float32), array([18.014315], dtype=float32)] Usually, we don't instantiate the Dataset object directly. Instead, the next Datasets class manages the dataset. Datasets An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.21s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. A Datasets instance is a dict-like object: for dataset in datasets.items(): print(dataset) [13] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.21s ) ('train', Dataset(mode='train', num_samples=600)) ('val', Dataset(mode='val', num_samples=200)) ('test', Dataset(mode='test', num_samples=200)) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.22s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset. DataLoaders The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [15] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.22s ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. for dataloader in dataloaders.items(): print(dataloader) [16] 2020-05-28 14:04:59 ( 7.00ms ) python3 ( 8.23s ) ('train', <torch.utils.data.dataloader.DataLoader object at 0x000002250A8F85C8>) ('val', <torch.utils.data.dataloader.DataLoader object at 0x000002250A8F8A88>) ('test', <torch.utils.data.dataloader.DataLoader object at 0x000002250A8F83C8>) As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [17] 2020-05-28 14:04:59 ( 4.00ms ) python3 ( 8.23s ) [tensor([954, 160, 764, 938], dtype=torch.int32), tensor([[1.1608, 2.3425], [2.9078, 1.6576], [3.1330, 1.4903], [4.0111, 3.9687]]), tensor([[ 2.7301], [ 4.6931], [ 4.7792], [15.6110]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs of a model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Set of Data classes</span></span></span>"},{"location":"tutorial/data/#set-of-data-classes","text":"Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain about them. File 3 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class)","title":"Set of Data classes"},{"location":"tutorial/data/#data","text":"First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 8.16s ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [3] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.17s ) [0, array([3.46939 , 2.591532], dtype=float32), array([9.007157], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 8.17s ) [array([ 0, 10, 20]), array([[3.46939 , 2.591532 ], [3.0152574, 2.056742 ], [2.1888337, 4.3979006]], dtype=float32), array([[9.007157 ], [6.2764583], [9.553357 ]], dtype=float32)]","title":"Data"},{"location":"tutorial/data/#dataset","text":"An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.18s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-05-28 14:04:58 ( 3.00ms ) python3 ( 8.18s ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get sample from an dataset. use normal indexing dataset[0] # Integer index. [7] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.19s ) [0, array([3.46939 , 2.591532], dtype=float32), array([9.007157], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.19s ) [array([ 0, 16, 33]), array([[3.46939 , 2.591532 ], [1.6906978, 2.0528266], [2.2630548, 4.119627 ]], dtype=float32), array([[9.007157 ], [3.5456395], [9.6264515]], dtype=float32)] index, *_ = dataset[:] print(len(index)) index[:10] [9] 2020-05-28 14:04:58 ( 6.00ms ) python3 ( 8.20s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional argument: transform . def transform(mode:str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.20s ) [0, array([6.93878 , 5.183064], dtype=float32), array([18.014315], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [11] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.21s ) [array([6.93878 , 5.183064], dtype=float32), array([18.014315], dtype=float32)] Usually, we don't instantiate the Dataset object directly. Instead, the next Datasets class manages the dataset.","title":"Dataset"},{"location":"tutorial/data/#datasets","text":"An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.21s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. A Datasets instance is a dict-like object: for dataset in datasets.items(): print(dataset) [13] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.21s ) ('train', Dataset(mode='train', num_samples=600)) ('val', Dataset(mode='val', num_samples=200)) ('test', Dataset(mode='test', num_samples=200)) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-05-28 14:04:58 ( 4.00ms ) python3 ( 8.22s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"Datasets"},{"location":"tutorial/data/#dataloaders","text":"The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [15] 2020-05-28 14:04:58 ( 5.00ms ) python3 ( 8.22s ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. for dataloader in dataloaders.items(): print(dataloader) [16] 2020-05-28 14:04:59 ( 7.00ms ) python3 ( 8.23s ) ('train', <torch.utils.data.dataloader.DataLoader object at 0x000002250A8F85C8>) ('val', <torch.utils.data.dataloader.DataLoader object at 0x000002250A8F8A88>) ('test', <torch.utils.data.dataloader.DataLoader object at 0x000002250A8F83C8>) As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [17] 2020-05-28 14:04:59 ( 4.00ms ) python3 ( 8.23s ) [tensor([954, 160, 764, 938], dtype=torch.int32), tensor([[1.1608, 2.3425], [2.9078, 1.6576], [3.1330, 1.4903], [4.0111, 3.9687]]), tensor([[ 2.7301], [ 4.6931], [ 4.7792], [15.6110]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs of a model.","title":"DataLoaders"},{"location":"tutorial/instance/","text":"Creating Instance In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. We creates a DataLoaders described in the previous section . Basic idea A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. We call this dictionary params . from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.25s ) Data(train_size=834, test_size=166) Here, create_instance() requires the second parameter name to specify a key because params can have multiple keys. Note that we added n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) [3] 2020-05-28 14:04:59 ( 4.00ms ) python3 ( 8.26s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing parmas easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.26s ) Data(train_size=834, test_size=166) Hierarchal Structure Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.27s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Furthermore, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [6] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.27s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance. To describe this behavior, you can use a new def key instead of class . (See the previous section ) Default Class In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-05-28 14:04:59 ( 75.0ms ) python3 ( 8.35s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataloaders --- ivory.torch.data.DataLoaders dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [8] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.35s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4) Default Value If a callable has parameters with default value, you can use __default__ to get default values from the callable signature. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 batch_size: 15 \"\"\" dataloaders = create(doc, 'dataloaders') dataloaders.data.n_splits [9] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.36s ) 4","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Creating Instance</span></span></span>"},{"location":"tutorial/instance/#creating-instance","text":"In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. We creates a DataLoaders described in the previous section .","title":"Creating Instance"},{"location":"tutorial/instance/#basic-idea","text":"A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. We call this dictionary params . from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.25s ) Data(train_size=834, test_size=166) Here, create_instance() requires the second parameter name to specify a key because params can have multiple keys. Note that we added n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) [3] 2020-05-28 14:04:59 ( 4.00ms ) python3 ( 8.26s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing parmas easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.26s ) Data(train_size=834, test_size=166)","title":"Basic idea"},{"location":"tutorial/instance/#hierarchal-structure","text":"Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.27s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Furthermore, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [6] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.27s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance. To describe this behavior, you can use a new def key instead of class . (See the previous section )","title":"Hierarchal Structure"},{"location":"tutorial/instance/#default-class","text":"In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-05-28 14:04:59 ( 75.0ms ) python3 ( 8.35s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataloaders --- ivory.torch.data.DataLoaders dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [8] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.35s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4)","title":"Default Class"},{"location":"tutorial/instance/#default-value","text":"If a callable has parameters with default value, you can use __default__ to get default values from the callable signature. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 batch_size: 15 \"\"\" dataloaders = create(doc, 'dataloaders') dataloaders.data.n_splits [9] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.36s ) 4","title":"Default Value"},{"location":"tutorial/model/","text":"Model Structure Model We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 4 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [2] 2020-05-28 14:04:59 ( 11.0ms ) python3 ( 8.38s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [3] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.39s ) tensor([[2.8833, 2.7999], [2.4303, 4.8014], [4.0537, 1.1563], [4.8641, 2.9741]]) model(input) [4] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.39s ) tensor([[0.2142], [0.2177], [0.2083], [0.2072]], grad_fn=<AddmmBackward>) Optimizer To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.40s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.40s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in a globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method. Scheduler A Scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.41s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x2250a9544c8> If a $ -notation has no suffix, the value becomes its key itself. The following two example are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Model Structure</span></span></span>"},{"location":"tutorial/model/#model-structure","text":"","title":"Model Structure"},{"location":"tutorial/model/#model","text":"We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 4 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [2] 2020-05-28 14:04:59 ( 11.0ms ) python3 ( 8.38s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [3] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.39s ) tensor([[2.8833, 2.7999], [2.4303, 4.8014], [4.0537, 1.1563], [4.8641, 2.9741]]) model(input) [4] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.39s ) tensor([[0.2142], [0.2177], [0.2083], [0.2072]], grad_fn=<AddmmBackward>)","title":"Model"},{"location":"tutorial/model/#optimizer","text":"To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.40s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-05-28 14:04:59 ( 5.00ms ) python3 ( 8.40s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in a globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method.","title":"Optimizer"},{"location":"tutorial/model/#scheduler","text":"A Scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-05-28 14:04:59 ( 6.00ms ) python3 ( 8.41s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x2250a9544c8> If a $ -notation has no suffix, the value becomes its key itself. The following two example are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"Scheduler"},{"location":"tutorial/task/","text":"Multiple Runs Task Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-05-28 14:04:59 ( 45.0ms ) python3 ( 8.48s ) [I 200528 14:04:59 tracker:48] A new experiment created with name: 'torch' Task(id='5005a761db4a4493bdb1b1ae2f5cf89b', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Product The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-05-28 14:04:59 ( 37.0ms ) python3 ( 8.52s ) <generator object Task.product at 0x000002250A943448> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-28 14:04:59 ( 415ms ) python3 ( 8.94s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-05-28 14:04:59 ( 510ms ) python3 ( 9.45s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7 Chain The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-05-28 14:05:00 ( 66.0ms ) python3 ( 9.51s ) <generator object Task.chain at 0x000002250A943148> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-05-28 14:05:00 ( 780ms ) python3 ( 10.3s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-05-28 14:05:01 ( 936ms ) python3 ( 11.2s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5 Range Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-05-28 14:05:02 ( 6.00ms ) python3 ( 11.2s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.2s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.2s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.2s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-28 14:05:02 ( 4.00ms ) python3 ( 11.2s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-28 14:05:02 ( 4.31ms ) python3 ( 11.3s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-28 14:05:02 ( 3.98ms ) python3 ( 11.3s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-05-28 14:05:02 ( 4.39ms ) python3 ( 11.3s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-28 14:05:02 ( 5.14ms ) python3 ( 11.3s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.3s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-28 14:05:02 ( 3.98ms ) python3 ( 11.3s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Multiple Runs</span></span></span>"},{"location":"tutorial/task/#multiple-runs","text":"","title":"Multiple Runs"},{"location":"tutorial/task/#task","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-05-28 14:04:59 ( 45.0ms ) python3 ( 8.48s ) [I 200528 14:04:59 tracker:48] A new experiment created with name: 'torch' Task(id='5005a761db4a4493bdb1b1ae2f5cf89b', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library.","title":"Task"},{"location":"tutorial/task/#product","text":"The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-05-28 14:04:59 ( 37.0ms ) python3 ( 8.52s ) <generator object Task.product at 0x000002250A943448> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-28 14:04:59 ( 415ms ) python3 ( 8.94s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-05-28 14:04:59 ( 510ms ) python3 ( 9.45s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7","title":"Product"},{"location":"tutorial/task/#chain","text":"The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-05-28 14:05:00 ( 66.0ms ) python3 ( 9.51s ) <generator object Task.chain at 0x000002250A943148> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-05-28 14:05:00 ( 780ms ) python3 ( 10.3s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-05-28 14:05:01 ( 936ms ) python3 ( 11.2s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5","title":"Chain"},{"location":"tutorial/task/#range","text":"Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-05-28 14:05:02 ( 6.00ms ) python3 ( 11.2s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.2s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.2s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.2s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-28 14:05:02 ( 4.00ms ) python3 ( 11.2s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-28 14:05:02 ( 4.31ms ) python3 ( 11.3s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-28 14:05:02 ( 3.98ms ) python3 ( 11.3s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-05-28 14:05:02 ( 4.39ms ) python3 ( 11.3s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-28 14:05:02 ( 5.14ms ) python3 ( 11.3s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-05-28 14:05:02 ( 3.00ms ) python3 ( 11.3s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-28 14:05:02 ( 3.98ms ) python3 ( 11.3s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"Range"},{"location":"tutorial/tracking/","text":"Tracking Ivory uses MLFlow Tracking for the workflow tracking and model saving. Creating Runs First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-05-28 14:05:02 ( 1.32s ) python3 ( 12.6s ) [I 200528 14:05:02 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=12.71 val_loss=6.703 lr=0.001 best [epoch#1] loss=5.958 val_loss=5.031 lr=0.001 best [epoch#2] loss=4.277 val_loss=3.356 lr=0.001 best [epoch#3] loss=2.656 val_loss=2.158 lr=0.001 best [epoch#4] loss=1.788 val_loss=1.636 lr=0.001 best [epoch#5] loss=1.227 val_loss=0.9263 lr=0.001 best [epoch#6] loss=0.854 val_loss=0.9299 lr=0.001 [epoch#7] loss=0.7173 val_loss=0.5881 lr=0.001 best [epoch#8] loss=0.5962 val_loss=0.6373 lr=0.001 [epoch#9] loss=0.5757 val_loss=0.5965 lr=0.001 import ivory client = ivory.create_client(\"examples\") task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-05-28 14:05:03 ( 4.39s ) python3 ( 17.0s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-05-28 14:05:07 ( 5.48s ) python3 ( 22.5s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-05-28 14:05:13 ( 7.48s ) python3 ( 30.0s ) [I 2020-05-28 14:05:13,515] A new study created with name: torch.lr.study#0 [run#8] lr=2.543e-05 [I 2020-05-28 14:05:14,981] Finished trial#0 with value: 8.303562009334565 with parameters: {'lr': 2.542797289084562e-05}. Best is trial#0 with value: 8.303562009334565. [run#9] lr=2.202e-05 [I 2020-05-28 14:05:16,442] Finished trial#1 with value: 8.426873636245727 with parameters: {'lr': 2.202271311364737e-05}. Best is trial#0 with value: 8.303562009334565. [run#10] lr=0.000113 [I 2020-05-28 14:05:17,911] Finished trial#2 with value: 6.021162259578705 with parameters: {'lr': 0.00011303083258447847}. Best is trial#2 with value: 6.021162259578705. [run#11] lr=0.0002941 [I 2020-05-28 14:05:19,396] Finished trial#3 with value: 4.402597904205322 with parameters: {'lr': 0.00029409959449792385}. Best is trial#3 with value: 4.402597904205322. [run#12] lr=3.105e-05 [I 2020-05-28 14:05:20,887] Finished trial#4 with value: 8.13041273355484 with parameters: {'lr': 3.104708621290407e-05}. Best is trial#3 with value: 4.402597904205322. <optuna.study.Study at 0x2250a950fc8> Tracking If the Client instace has a Tracker instance, the multiple runs created by the tasks can be tracked. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are some tasks we made above. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [7] 2020-05-28 14:05:20 ( 71.0ms ) python3 ( 30.1s ) 75e69 study#0 749b2 task#1 8b895 task#0 Note task#0 that we made first hasn't yielded any runs yet, so that the task has not been a parent run. The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(2,4)) print_run_info(run_ids) [8] 2020-05-28 14:05:20 ( 56.0ms ) python3 ( 30.1s ) TypeError: 'NoneType' object is not subscriptable TypeError Traceback (most recent call last) <ipython-input-188-64ca24d6ed75> in <module> 1 run_ids = client.get_run_ids('torch', task=range(2,4)) ----> 2 print_run_info(run_ids) <ipython-input-187-3165e3ebc9bb> in print_run_info(run_ids) 2 def print_run_info(run_ids): 3 for run_id in run_ids: ----> 4 print(run_id[:5], client.get_run_name(run_id)) 5 6 run_ids = client.search_parent_run_ids('torch') The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(3, 5)) print_run_info(run_ids) [9] 2020-05-28 14:05:21 ( 202ms ) python3 ( 30.3s ) TypeError: 'NoneType' object is not iterable TypeError Traceback (most recent call last) <ipython-input-189-47717412bb1c> in <module> 1 run_ids = client.get_nested_run_ids('torch', task=range(3, 5)) ----> 2 print_run_info(run_ids) <ipython-input-187-3165e3ebc9bb> in print_run_info(run_ids) 1 # A helper function 2 def print_run_info(run_ids): ----> 3 for run_id in run_ids: 4 print(run_id[:5], client.get_run_name(run_id)) 5 ~\\Documents\\github\\ivory\\ivory\\core\\client.py in get_nested_run_ids(self, name, **kwargs) 135 run_numbers = kwargs.pop(run_name) 136 parent_run_ids = self.get_run_ids(name, **{run_name: run_numbers}) --> 137 yield from self.search_run_ids(name, parent_run_id=parent_run_ids, **kwargs) 138 139 def set_parent_run_id(self, name: str, **kwargs): ~\\Documents\\github\\ivory\\ivory\\core\\client.py in search_run_ids(self, name, run_name, parent_run_id, parent_only, nested_only, exclude_parent, best_score_limit, **query) 186 exclude_parent, 187 best_score_limit, --> 188 **query, 189 ) 190 ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in search_run_ids(self, experiment_id, run_name, parent_run_id, parent_only, nested_only, exclude_parent, best_score_limit, **query) 145 else: 146 run_ids = self.list_run_ids(experiment_id, parent_run_id, exclude_parent) --> 147 for run_id in run_ids: 148 if run_name and not re.match(run_name, self.get_run_name(run_id)): 149 continue ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in list_run_ids(self, experiment_id, parent_run_id, exclude_parent) 81 ) -> Iterator[str]: 82 if parent_run_id: ---> 83 yield from self.list_nested_run_ids(experiment_id, parent_run_id) 84 else: 85 if exclude_parent: ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in list_nested_run_ids(self, experiment_id, parent_run_id) 95 if not isinstance(parent_run_id, str): 96 for parent_run_id in list(parent_run_id): ---> 97 yield from self.list_nested_run_ids(experiment_id, parent_run_id) 98 return 99 filter_string = \"\" ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in list_nested_run_ids(self, experiment_id, parent_run_id) 94 ) -> Iterator[str]: 95 if not isinstance(parent_run_id, str): ---> 96 for parent_run_id in list(parent_run_id): 97 yield from self.list_nested_run_ids(experiment_id, parent_run_id) 98 return On the other hand, the client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=14) print_run_info([run_id]) [10] 2020-05-28 14:05:21 ( 158ms ) python3 ( 30.5s ) TypeError: expected string or bytes-like object TypeError Traceback (most recent call last) <ipython-input-190-0268c37c43d4> in <module> ----> 1 run_id = client.get_parent_run_id('torch', run=14) 2 print_run_info([run_id]) ~\\Documents\\github\\ivory\\ivory\\core\\client.py in get_parent_run_id(self, name, **kwargs) 129 def get_parent_run_id(self, name: str, **kwargs) -> str: 130 run_id = self.get_run_id(name, **kwargs) --> 131 return self.tracker.get_parent_run_id(run_id) 132 133 def get_nested_run_ids(self, name: str, **kwargs) -> Iterator[str]: ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in get_parent_run_id(self, run_id) 172 173 def get_parent_run_id(self, run_id: str) -> str: --> 174 return get_parent_run_id(self.client.get_run(run_id)) 175 176 def get_run_status(self, run_id: str) -> str: ~\\miniconda3\\envs\\daizu\\lib\\site-packages\\mlflow\\tracking\\client.py in get_run(self, run_id) 94 raises an exception. 95 \"\"\" ---> 96 return self._tracking_client.get_run(run_id) 97 98 def get_metric_history(self, run_id, key): ~\\miniconda3\\envs\\daizu\\lib\\site-packages\\mlflow\\tracking\\_tracking_service\\client.py in get_run(self, run_id) 46 raises an exception. 47 \"\"\" ---> 48 _validate_run_id(run_id) 49 return self.store.get_run(run_id) 50 ~\\miniconda3\\envs\\daizu\\lib\\site-packages\\mlflow\\utils\\validation.py in _validate_run_id(run_id) 141 def _validate_run_id(run_id): 142 \"\"\"Check that `run_id` is a valid run ID and raise an exception if it isn't.\"\"\" --> 143 if _RUN_ID_REGEX.match(run_id) is None: 144 raise MlflowException(\"Invalid run ID: '%s'\" % run_id, error_code=INVALID_PARAMETER_VALUE) 145 Range Ivory provides the ivory.utils.range.Range class for parameter setting. This class can be used as the standard range , but more flexible, expecially for float type. from ivory.utils.range import Range # Normal usage list(Range(3, 6)) # The stop value is included. [11] 2020-05-28 14:05:21 ( 104ms ) python3 ( 30.6s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-28 14:05:21 ( 5.00ms ) python3 ( 30.6s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a str . list(Range('3-7')) # <start>-<stop> [17] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [3, 5, 7] list(Range('0.0-1.0:4')) # <start>-<stop>:<num> [19] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.0, 0.3333333333333333, 0.6666666666666666, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking</span></span></span>"},{"location":"tutorial/tracking/#tracking","text":"Ivory uses MLFlow Tracking for the workflow tracking and model saving.","title":"Tracking"},{"location":"tutorial/tracking/#creating-runs","text":"First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-05-28 14:05:02 ( 1.32s ) python3 ( 12.6s ) [I 200528 14:05:02 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=12.71 val_loss=6.703 lr=0.001 best [epoch#1] loss=5.958 val_loss=5.031 lr=0.001 best [epoch#2] loss=4.277 val_loss=3.356 lr=0.001 best [epoch#3] loss=2.656 val_loss=2.158 lr=0.001 best [epoch#4] loss=1.788 val_loss=1.636 lr=0.001 best [epoch#5] loss=1.227 val_loss=0.9263 lr=0.001 best [epoch#6] loss=0.854 val_loss=0.9299 lr=0.001 [epoch#7] loss=0.7173 val_loss=0.5881 lr=0.001 best [epoch#8] loss=0.5962 val_loss=0.6373 lr=0.001 [epoch#9] loss=0.5757 val_loss=0.5965 lr=0.001 import ivory client = ivory.create_client(\"examples\") task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-05-28 14:05:03 ( 4.39s ) python3 ( 17.0s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-05-28 14:05:07 ( 5.48s ) python3 ( 22.5s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-05-28 14:05:13 ( 7.48s ) python3 ( 30.0s ) [I 2020-05-28 14:05:13,515] A new study created with name: torch.lr.study#0 [run#8] lr=2.543e-05 [I 2020-05-28 14:05:14,981] Finished trial#0 with value: 8.303562009334565 with parameters: {'lr': 2.542797289084562e-05}. Best is trial#0 with value: 8.303562009334565. [run#9] lr=2.202e-05 [I 2020-05-28 14:05:16,442] Finished trial#1 with value: 8.426873636245727 with parameters: {'lr': 2.202271311364737e-05}. Best is trial#0 with value: 8.303562009334565. [run#10] lr=0.000113 [I 2020-05-28 14:05:17,911] Finished trial#2 with value: 6.021162259578705 with parameters: {'lr': 0.00011303083258447847}. Best is trial#2 with value: 6.021162259578705. [run#11] lr=0.0002941 [I 2020-05-28 14:05:19,396] Finished trial#3 with value: 4.402597904205322 with parameters: {'lr': 0.00029409959449792385}. Best is trial#3 with value: 4.402597904205322. [run#12] lr=3.105e-05 [I 2020-05-28 14:05:20,887] Finished trial#4 with value: 8.13041273355484 with parameters: {'lr': 3.104708621290407e-05}. Best is trial#3 with value: 4.402597904205322. <optuna.study.Study at 0x2250a950fc8>","title":"Creating Runs"},{"location":"tutorial/tracking/#tracking_1","text":"If the Client instace has a Tracker instance, the multiple runs created by the tasks can be tracked. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are some tasks we made above. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [7] 2020-05-28 14:05:20 ( 71.0ms ) python3 ( 30.1s ) 75e69 study#0 749b2 task#1 8b895 task#0 Note task#0 that we made first hasn't yielded any runs yet, so that the task has not been a parent run. The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(2,4)) print_run_info(run_ids) [8] 2020-05-28 14:05:20 ( 56.0ms ) python3 ( 30.1s ) TypeError: 'NoneType' object is not subscriptable TypeError Traceback (most recent call last) <ipython-input-188-64ca24d6ed75> in <module> 1 run_ids = client.get_run_ids('torch', task=range(2,4)) ----> 2 print_run_info(run_ids) <ipython-input-187-3165e3ebc9bb> in print_run_info(run_ids) 2 def print_run_info(run_ids): 3 for run_id in run_ids: ----> 4 print(run_id[:5], client.get_run_name(run_id)) 5 6 run_ids = client.search_parent_run_ids('torch') The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(3, 5)) print_run_info(run_ids) [9] 2020-05-28 14:05:21 ( 202ms ) python3 ( 30.3s ) TypeError: 'NoneType' object is not iterable TypeError Traceback (most recent call last) <ipython-input-189-47717412bb1c> in <module> 1 run_ids = client.get_nested_run_ids('torch', task=range(3, 5)) ----> 2 print_run_info(run_ids) <ipython-input-187-3165e3ebc9bb> in print_run_info(run_ids) 1 # A helper function 2 def print_run_info(run_ids): ----> 3 for run_id in run_ids: 4 print(run_id[:5], client.get_run_name(run_id)) 5 ~\\Documents\\github\\ivory\\ivory\\core\\client.py in get_nested_run_ids(self, name, **kwargs) 135 run_numbers = kwargs.pop(run_name) 136 parent_run_ids = self.get_run_ids(name, **{run_name: run_numbers}) --> 137 yield from self.search_run_ids(name, parent_run_id=parent_run_ids, **kwargs) 138 139 def set_parent_run_id(self, name: str, **kwargs): ~\\Documents\\github\\ivory\\ivory\\core\\client.py in search_run_ids(self, name, run_name, parent_run_id, parent_only, nested_only, exclude_parent, best_score_limit, **query) 186 exclude_parent, 187 best_score_limit, --> 188 **query, 189 ) 190 ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in search_run_ids(self, experiment_id, run_name, parent_run_id, parent_only, nested_only, exclude_parent, best_score_limit, **query) 145 else: 146 run_ids = self.list_run_ids(experiment_id, parent_run_id, exclude_parent) --> 147 for run_id in run_ids: 148 if run_name and not re.match(run_name, self.get_run_name(run_id)): 149 continue ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in list_run_ids(self, experiment_id, parent_run_id, exclude_parent) 81 ) -> Iterator[str]: 82 if parent_run_id: ---> 83 yield from self.list_nested_run_ids(experiment_id, parent_run_id) 84 else: 85 if exclude_parent: ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in list_nested_run_ids(self, experiment_id, parent_run_id) 95 if not isinstance(parent_run_id, str): 96 for parent_run_id in list(parent_run_id): ---> 97 yield from self.list_nested_run_ids(experiment_id, parent_run_id) 98 return 99 filter_string = \"\" ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in list_nested_run_ids(self, experiment_id, parent_run_id) 94 ) -> Iterator[str]: 95 if not isinstance(parent_run_id, str): ---> 96 for parent_run_id in list(parent_run_id): 97 yield from self.list_nested_run_ids(experiment_id, parent_run_id) 98 return On the other hand, the client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=14) print_run_info([run_id]) [10] 2020-05-28 14:05:21 ( 158ms ) python3 ( 30.5s ) TypeError: expected string or bytes-like object TypeError Traceback (most recent call last) <ipython-input-190-0268c37c43d4> in <module> ----> 1 run_id = client.get_parent_run_id('torch', run=14) 2 print_run_info([run_id]) ~\\Documents\\github\\ivory\\ivory\\core\\client.py in get_parent_run_id(self, name, **kwargs) 129 def get_parent_run_id(self, name: str, **kwargs) -> str: 130 run_id = self.get_run_id(name, **kwargs) --> 131 return self.tracker.get_parent_run_id(run_id) 132 133 def get_nested_run_ids(self, name: str, **kwargs) -> Iterator[str]: ~\\Documents\\github\\ivory\\ivory\\core\\tracker.py in get_parent_run_id(self, run_id) 172 173 def get_parent_run_id(self, run_id: str) -> str: --> 174 return get_parent_run_id(self.client.get_run(run_id)) 175 176 def get_run_status(self, run_id: str) -> str: ~\\miniconda3\\envs\\daizu\\lib\\site-packages\\mlflow\\tracking\\client.py in get_run(self, run_id) 94 raises an exception. 95 \"\"\" ---> 96 return self._tracking_client.get_run(run_id) 97 98 def get_metric_history(self, run_id, key): ~\\miniconda3\\envs\\daizu\\lib\\site-packages\\mlflow\\tracking\\_tracking_service\\client.py in get_run(self, run_id) 46 raises an exception. 47 \"\"\" ---> 48 _validate_run_id(run_id) 49 return self.store.get_run(run_id) 50 ~\\miniconda3\\envs\\daizu\\lib\\site-packages\\mlflow\\utils\\validation.py in _validate_run_id(run_id) 141 def _validate_run_id(run_id): 142 \"\"\"Check that `run_id` is a valid run ID and raise an exception if it isn't.\"\"\" --> 143 if _RUN_ID_REGEX.match(run_id) is None: 144 raise MlflowException(\"Invalid run ID: '%s'\" % run_id, error_code=INVALID_PARAMETER_VALUE) 145","title":"Tracking"},{"location":"tutorial/tracking/#range","text":"Ivory provides the ivory.utils.range.Range class for parameter setting. This class can be used as the standard range , but more flexible, expecially for float type. from ivory.utils.range import Range # Normal usage list(Range(3, 6)) # The stop value is included. [11] 2020-05-28 14:05:21 ( 104ms ) python3 ( 30.6s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-28 14:05:21 ( 5.00ms ) python3 ( 30.6s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a str . list(Range('3-7')) # <start>-<stop> [17] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [3, 5, 7] list(Range('0.0-1.0:4')) # <start>-<stop>:<num> [19] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.0, 0.3333333333333333, 0.6666666666666666, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"Range"},{"location":"tutorial/trainer/","text":"Training a Model Example Preparation First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 \"\"\") params [2] 2020-05-28 14:05:21 ( 10.0ms ) python3 ( 30.6s ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}}, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-05-28 14:05:21 ( 6.00ms ) python3 ( 30.7s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer'] Callbacks Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-05-28 14:05:21 ( 38.0ms ) python3 ( 30.7s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin Metrics The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-05-28 14:05:21 ( 4.00ms ) python3 ( 30.7s ) Metrics() The Metrics class for PyTorch has a criterion callable object to calculate loss. run.metrics.criterion [6] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.7s ) <function torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')> Monitor The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [7] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.7s ) Monitor(metric='val_loss', mode='min') EarlyStopping The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [8] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.7s ) EarlyStopping(patience=10, wait=0) Trainer The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [9] 2020-05-28 14:05:21 ( 4.00ms ) python3 ( 30.7s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch') Using a Trainer A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [10] 2020-05-28 14:05:21 ( 520ms ) python3 ( 31.2s ) [epoch#0] loss=12.07 val_loss=8.068 lr=0.001 best [epoch#1] loss=6.525 val_loss=5.773 lr=0.001 best [epoch#2] loss=5.427 val_loss=4.213 lr=0.001 best [epoch#3] loss=3.581 val_loss=2.86 lr=0.001 best [epoch#4] loss=2.314 val_loss=1.752 lr=0.001 best [epoch#5] loss=1.482 val_loss=1.251 lr=0.001 best [epoch#6] loss=0.9798 val_loss=0.931 lr=0.001 best [epoch#7] loss=0.7446 val_loss=0.7902 lr=0.001 best [epoch#8] loss=0.6066 val_loss=0.7223 lr=0.001 best [epoch#9] loss=0.5818 val_loss=0.7304 lr=0.001 You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [11] 2020-05-28 14:05:22 ( 269ms ) python3 ( 31.5s ) [epoch#10] loss=0.5977 val_loss=0.507 lr=0.001 best [epoch#11] loss=0.4849 val_loss=0.4278 lr=0.001 best [epoch#12] loss=0.441 val_loss=0.4669 lr=0.001 [epoch#13] loss=0.4182 val_loss=0.3461 lr=0.001 best [epoch#14] loss=0.3877 val_loss=0.3573 lr=0.001 Note The Run.start() method doesn't reset the trainer's epoch. Callbacks after Training After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [12] 2020-05-28 14:05:22 ( 4.00ms ) python3 ( 31.5s ) Metrics(loss=0.3877, val_loss=0.3573, lr=0.001) run.metrics.history.val_loss # Totally, trained for 15 epochs. [13] 2020-05-28 14:05:22 ( 5.00ms ) python3 ( 31.5s ) {0: 8.068315243721008, 1: 5.7731601119041445, 2: 4.213478833436966, 3: 2.859914427995682, 4: 1.752172063291073, 5: 1.2513262905180453, 6: 0.9309915043413639, 7: 0.7901747345924377, 8: 0.7223430559039116, 9: 0.7304416216909886, 10: 0.5069530740380287, 11: 0.42776295691728594, 12: 0.46685019992291926, 13: 0.34607179239392283, 14: 0.3572867576032877} run.monitor # Store the best score and its epoch. [14] 2020-05-28 14:05:22 ( 4.00ms ) python3 ( 31.5s ) Monitor(metric='val_loss', mode='min', best_score=0.346, best_epoch=13) run.early_stopping # Current `wait`. [15] 2020-05-28 14:05:22 ( 3.00ms ) python3 ( 31.5s ) EarlyStopping(patience=10, wait=1) run.trainer # Current epoch is 14 (0-indexed). [16] 2020-05-28 14:05:22 ( 4.00ms ) python3 ( 31.5s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Training a Model</span></span></span>"},{"location":"tutorial/trainer/#training-a-model","text":"","title":"Training a Model"},{"location":"tutorial/trainer/#example-preparation","text":"First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 \"\"\") params [2] 2020-05-28 14:05:21 ( 10.0ms ) python3 ( 30.6s ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}}, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-05-28 14:05:21 ( 6.00ms ) python3 ( 30.7s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer']","title":"Example Preparation"},{"location":"tutorial/trainer/#callbacks","text":"Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-05-28 14:05:21 ( 38.0ms ) python3 ( 30.7s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin","title":"Callbacks"},{"location":"tutorial/trainer/#metrics","text":"The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-05-28 14:05:21 ( 4.00ms ) python3 ( 30.7s ) Metrics() The Metrics class for PyTorch has a criterion callable object to calculate loss. run.metrics.criterion [6] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.7s ) <function torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')>","title":"Metrics"},{"location":"tutorial/trainer/#monitor","text":"The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [7] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.7s ) Monitor(metric='val_loss', mode='min')","title":"Monitor"},{"location":"tutorial/trainer/#earlystopping","text":"The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [8] 2020-05-28 14:05:21 ( 3.00ms ) python3 ( 30.7s ) EarlyStopping(patience=10, wait=0)","title":"EarlyStopping"},{"location":"tutorial/trainer/#trainer","text":"The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [9] 2020-05-28 14:05:21 ( 4.00ms ) python3 ( 30.7s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Trainer"},{"location":"tutorial/trainer/#using-a-trainer","text":"A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [10] 2020-05-28 14:05:21 ( 520ms ) python3 ( 31.2s ) [epoch#0] loss=12.07 val_loss=8.068 lr=0.001 best [epoch#1] loss=6.525 val_loss=5.773 lr=0.001 best [epoch#2] loss=5.427 val_loss=4.213 lr=0.001 best [epoch#3] loss=3.581 val_loss=2.86 lr=0.001 best [epoch#4] loss=2.314 val_loss=1.752 lr=0.001 best [epoch#5] loss=1.482 val_loss=1.251 lr=0.001 best [epoch#6] loss=0.9798 val_loss=0.931 lr=0.001 best [epoch#7] loss=0.7446 val_loss=0.7902 lr=0.001 best [epoch#8] loss=0.6066 val_loss=0.7223 lr=0.001 best [epoch#9] loss=0.5818 val_loss=0.7304 lr=0.001 You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [11] 2020-05-28 14:05:22 ( 269ms ) python3 ( 31.5s ) [epoch#10] loss=0.5977 val_loss=0.507 lr=0.001 best [epoch#11] loss=0.4849 val_loss=0.4278 lr=0.001 best [epoch#12] loss=0.441 val_loss=0.4669 lr=0.001 [epoch#13] loss=0.4182 val_loss=0.3461 lr=0.001 best [epoch#14] loss=0.3877 val_loss=0.3573 lr=0.001 Note The Run.start() method doesn't reset the trainer's epoch.","title":"Using a Trainer"},{"location":"tutorial/trainer/#callbacks-after-training","text":"After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [12] 2020-05-28 14:05:22 ( 4.00ms ) python3 ( 31.5s ) Metrics(loss=0.3877, val_loss=0.3573, lr=0.001) run.metrics.history.val_loss # Totally, trained for 15 epochs. [13] 2020-05-28 14:05:22 ( 5.00ms ) python3 ( 31.5s ) {0: 8.068315243721008, 1: 5.7731601119041445, 2: 4.213478833436966, 3: 2.859914427995682, 4: 1.752172063291073, 5: 1.2513262905180453, 6: 0.9309915043413639, 7: 0.7901747345924377, 8: 0.7223430559039116, 9: 0.7304416216909886, 10: 0.5069530740380287, 11: 0.42776295691728594, 12: 0.46685019992291926, 13: 0.34607179239392283, 14: 0.3572867576032877} run.monitor # Store the best score and its epoch. [14] 2020-05-28 14:05:22 ( 4.00ms ) python3 ( 31.5s ) Monitor(metric='val_loss', mode='min', best_score=0.346, best_epoch=13) run.early_stopping # Current `wait`. [15] 2020-05-28 14:05:22 ( 3.00ms ) python3 ( 31.5s ) EarlyStopping(patience=10, wait=1) run.trainer # Current epoch is 14 (0-indexed). [16] 2020-05-28 14:05:22 ( 4.00ms ) python3 ( 31.5s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Callbacks after Training"},{"location":"tutorial/tuning/","text":"Hyperparameter Tuning Suggest Function To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 7 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the Optuna offical documentation . Note In the suggest_hidden_sizes() function, we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() function to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-05-28 14:05:22 ( 5.00ms ) python3 ( 31.6s ) Study Ivory implements a special run type called Study which controls hyperparameter tuning using Optuna . import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-05-28 14:05:22 ( 85.0ms ) python3 ( 31.7s ) [I 200528 14:05:22 tracker:48] A new experiment created with name: 'torch' Study(id='a711987f8bff4b438824804984ba12d6', name='study#0', num_objects=5) In the client.create_study() function, you can pass keyword arguments in which a key is a suggest names and a value is a pure suggest functions. Objective The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and provides it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-05-28 14:05:22 ( 5.00ms ) python3 ( 31.7s ) Objective(['lr']) study_hs.objective [6] 2020-05-28 14:05:22 ( 3.00ms ) python3 ( 31.7s ) Objective(['hidden_sizes']) Optimization Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-05-28 14:05:22 ( 1.81s ) python3 ( 33.5s ) [I 2020-05-28 14:05:22,731] A new study created with name: torch.lr.study#0 [run#0] lr=0.0007176 fold=3 epochs=3 [epoch#0] loss=14.92 val_loss=7.437 lr=0.0007176 best [epoch#1] loss=6.306 val_loss=5.834 lr=0.0007176 best [epoch#2] loss=5.135 val_loss=4.774 lr=0.0007176 best [I 2020-05-28 14:05:23,326] Finished trial#0 with value: 4.773539292812347 with parameters: {'lr': 0.0007175898704667993}. Best is trial#0 with value: 4.773539292812347. [run#1] lr=0.001195 fold=3 epochs=3 [epoch#0] loss=12.5 val_loss=6.676 lr=0.001195 best [epoch#1] loss=5.556 val_loss=4.698 lr=0.001195 best [epoch#2] loss=4.229 val_loss=4.144 lr=0.001195 best [I 2020-05-28 14:05:23,919] Finished trial#1 with value: 4.143831324577332 with parameters: {'lr': 0.0011954454496665005}. Best is trial#1 with value: 4.143831324577332. [run#2] lr=0.00162 fold=3 epochs=3 [epoch#0] loss=11.09 val_loss=6.355 lr=0.00162 best [epoch#1] loss=5.419 val_loss=4.261 lr=0.00162 best [epoch#2] loss=3.293 val_loss=2.771 lr=0.00162 best [I 2020-05-28 14:05:24,506] Finished trial#2 with value: 2.770973062515259 with parameters: {'lr': 0.001620354821784766}. Best is trial#2 with value: 2.770973062515259. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-05-28 14:05:24 ( 1.84s ) python3 ( 35.4s ) [I 2020-05-28 14:05:24,537] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=26 hidden_sizes:1=17 num_layers=2 epochs=3 [epoch#0] loss=20.45 val_loss=6.857 lr=0.001 best [epoch#1] loss=6.305 val_loss=6.34 lr=0.001 best [epoch#2] loss=5.632 val_loss=5.331 lr=0.001 best [I 2020-05-28 14:05:25,147] Finished trial#0 with value: 5.330851233005523 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 17, 'num_layers': 2}. Best is trial#0 with value: 5.330851233005523. [run#4] hidden_sizes:0=18 hidden_sizes:1=28 num_layers=2 epochs=3 [epoch#0] loss=21.1 val_loss=6.804 lr=0.001 best [epoch#1] loss=6.426 val_loss=6.255 lr=0.001 best [epoch#2] loss=5.935 val_loss=5.798 lr=0.001 best [I 2020-05-28 14:05:25,739] Finished trial#1 with value: 5.797763848304749 with parameters: {'hidden_sizes:0': 18, 'hidden_sizes:1': 28, 'num_layers': 2}. Best is trial#0 with value: 5.330851233005523. [run#5] hidden_sizes:0=23 hidden_sizes:1=29 num_layers=2 epochs=3 [epoch#0] loss=17.71 val_loss=7.053 lr=0.001 best [epoch#1] loss=6.342 val_loss=6.84 lr=0.001 best [epoch#2] loss=5.451 val_loss=5.336 lr=0.001 best [I 2020-05-28 14:05:26,346] Finished trial#2 with value: 5.335860657691955 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 29, 'num_layers': 2}. Best is trial#0 with value: 5.330851233005523. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-05-28 14:05:26 ( 4.00ms ) python3 ( 35.4s ) <optuna.study.Study at 0x2250aab1fc8> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-05-28 14:05:26 ( 5.00ms ) python3 ( 35.4s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, RunID is saved. optuna_study_lr.user_attrs [11] 2020-05-28 14:05:26 ( 5.00ms ) python3 ( 35.4s ) {'run_id': 'a711987f8bff4b438824804984ba12d6'} optuna_study_lr.trials[0].user_attrs [12] 2020-05-28 14:05:26 ( 4.00ms ) python3 ( 35.4s ) {'run_id': '29132242c2124f0799eca8217f28763c'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-05-28 14:05:26 ( 5.00ms ) python3 ( 35.4s ) <mlflow.tracking.client.MlflowClient at 0x2250aad3408> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-05-28 14:05:26 ( 7.00ms ) python3 ( 35.4s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-05-28 14:05:26 ( 10.0ms ) python3 ( 35.4s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 8 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 The Monitor instance monitors val_loss and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max Parametric Optimization Again read the suggest functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() function has some logic but the suggest_lr() function is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass iterable(s) to the client.create_study() function instead of a callable tuple, range, Range A tuple, range, or Range instance represent parameter ranges. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-05-28 14:05:26 ( 1.96s ) python3 ( 37.4s ) [I 2020-05-28 14:05:26,490] A new study created with name: torch.lr.study#2 [run#6] lr=0.009442 epochs=1 [I 2020-05-28 14:05:26,868] Finished trial#0 with value: 15.44840669631958 with parameters: {'lr': 0.009441995734388347}. Best is trial#0 with value: 15.44840669631958. [run#7] lr=0.007124 epochs=1 [I 2020-05-28 14:05:27,230] Finished trial#1 with value: 7.713035857677459 with parameters: {'lr': 0.007123828173873202}. Best is trial#1 with value: 7.713035857677459. [run#8] lr=0.004644 epochs=1 [I 2020-05-28 14:05:27,594] Finished trial#2 with value: 98.60356998443604 with parameters: {'lr': 0.004644341482187609}. Best is trial#1 with value: 7.713035857677459. [run#9] lr=0.001893 epochs=1 [I 2020-05-28 14:05:27,973] Finished trial#3 with value: 8.306830966472626 with parameters: {'lr': 0.001892730744664992}. Best is trial#1 with value: 7.713035857677459. [run#10] lr=0.003165 epochs=1 [I 2020-05-28 14:05:28,360] Finished trial#4 with value: 6.782948929071426 with parameters: {'lr': 0.003164899558855928}. Best is trial#4 with value: 6.782948929071426. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 20)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-05-28 14:05:28 ( 2.00s ) python3 ( 39.4s ) [I 2020-05-28 14:05:28,468] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=11 epochs=1 [I 2020-05-28 14:05:28,852] Finished trial#0 with value: 8.875942385196685 with parameters: {'hidden_sizes.0': 11}. Best is trial#0 with value: 8.875942385196685. [run#12] hidden_sizes.0=18 epochs=1 [I 2020-05-28 14:05:29,225] Finished trial#1 with value: 8.11760492324829 with parameters: {'hidden_sizes.0': 18}. Best is trial#1 with value: 8.11760492324829. [run#13] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:29,603] Finished trial#2 with value: 7.8361660718917845 with parameters: {'hidden_sizes.0': 10}. Best is trial#2 with value: 7.8361660718917845. [run#14] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:29,984] Finished trial#3 with value: 9.15675221681595 with parameters: {'hidden_sizes.0': 10}. Best is trial#2 with value: 7.8361660718917845. [run#15] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:30,364] Finished trial#4 with value: 8.126809978485108 with parameters: {'hidden_sizes.0': 10}. Best is trial#2 with value: 7.8361660718917845. You can specify a step params = {'hidden_sizes.0': range(10, 20, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-05-28 14:05:30 ( 2.11s ) python3 ( 41.5s ) [I 2020-05-28 14:05:30,488] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=16 epochs=1 [I 2020-05-28 14:05:30,882] Finished trial#0 with value: 7.560184299945831 with parameters: {'hidden_sizes.0': 16}. Best is trial#0 with value: 7.560184299945831. [run#17] hidden_sizes.0=13 epochs=1 [I 2020-05-28 14:05:31,275] Finished trial#1 with value: 8.607846939563752 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 7.560184299945831. [run#18] hidden_sizes.0=13 epochs=1 [I 2020-05-28 14:05:31,675] Finished trial#2 with value: 8.565467238426208 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 7.560184299945831. [run#19] hidden_sizes.0=13 epochs=1 [I 2020-05-28 14:05:32,073] Finished trial#3 with value: 7.256689751148224 with parameters: {'hidden_sizes.0': 13}. Best is trial#3 with value: 7.256689751148224. [run#20] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:32,473] Finished trial#4 with value: 7.61679116487503 with parameters: {'hidden_sizes.0': 10}. Best is trial#3 with value: 7.256689751148224. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-05-28 14:05:32 ( 2.26s ) python3 ( 43.7s ) [I 2020-05-28 14:05:32,612] A new study created with name: torch.lr.study#5 [run#21] lr=0.00173 epochs=1 [I 2020-05-28 14:05:33,031] Finished trial#0 with value: 6.769354224205017 with parameters: {'lr': 0.0017296446938474903}. Best is trial#0 with value: 6.769354224205017. [run#22] lr=0.005462 epochs=1 [I 2020-05-28 14:05:33,443] Finished trial#1 with value: 17.77368609905243 with parameters: {'lr': 0.005462086556877391}. Best is trial#0 with value: 6.769354224205017. [run#23] lr=0.003362 epochs=1 [I 2020-05-28 14:05:33,867] Finished trial#2 with value: 6.101597547531128 with parameters: {'lr': 0.003361914261025218}. Best is trial#2 with value: 6.101597547531128. [run#24] lr=0.001086 epochs=1 [I 2020-05-28 14:05:34,289] Finished trial#3 with value: 6.51294219493866 with parameters: {'lr': 0.0010862855564853161}. Best is trial#2 with value: 6.101597547531128. [run#25] lr=0.003171 epochs=1 [I 2020-05-28 14:05:34,734] Finished trial#4 with value: 4.587558138370514 with parameters: {'lr': 0.0031709644933879118}. Best is trial#4 with value: 4.587558138370514. list A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-05-28 14:05:34 ( 2.30s ) python3 ( 46.0s ) [I 2020-05-28 14:05:34,890] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:35,327] Finished trial#0 with value: 8.008499228954316 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 8.008499228954316. [run#27] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:35,746] Finished trial#1 with value: 8.72653682231903 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 8.008499228954316. [run#28] hidden_sizes.0=20 epochs=1 [I 2020-05-28 14:05:36,173] Finished trial#2 with value: 9.071938228607177 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 8.008499228954316. [run#29] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:36,605] Finished trial#3 with value: 7.1040250062942505 with parameters: {'hidden_sizes.0': 10}. Best is trial#3 with value: 7.1040250062942505. [run#30] hidden_sizes.0=30 epochs=1 [I 2020-05-28 14:05:37,036] Finished trial#4 with value: 7.311557245254517 with parameters: {'hidden_sizes.0': 30}. Best is trial#3 with value: 7.1040250062942505. Product If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-05-28 14:05:37 ( 5.11s ) python3 ( 51.1s ) [I 2020-05-28 14:05:37,214] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=12 hidden_sizes:1=20 hidden_sizes:2=28 lr=0.0005982 num_layers=3 epochs=1 [I 2020-05-28 14:05:37,712] Finished trial#0 with value: 8.477884137630463 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 20, 'hidden_sizes:2': 28, 'lr': 0.0005982112847786007, 'num_layers': 3}. Best is trial#0 with value: 8.477884137630463. [run#32] hidden_sizes:0=24 hidden_sizes:1=24 hidden_sizes:2=27 lr=0.0005883 num_layers=3 epochs=1 [I 2020-05-28 14:05:38,201] Finished trial#1 with value: 10.718765878677369 with parameters: {'hidden_sizes:0': 24, 'hidden_sizes:1': 24, 'hidden_sizes:2': 27, 'lr': 0.0005883027469076012, 'num_layers': 3}. Best is trial#0 with value: 8.477884137630463. [run#33] hidden_sizes:0=13 hidden_sizes:1=21 hidden_sizes:2=10 lr=0.000301 num_layers=3 epochs=1 [I 2020-05-28 14:05:38,687] Finished trial#2 with value: 96.12896919250488 with parameters: {'hidden_sizes:0': 13, 'hidden_sizes:1': 21, 'hidden_sizes:2': 10, 'lr': 0.0003009684939928948, 'num_layers': 3}. Best is trial#0 with value: 8.477884137630463. [run#34] hidden_sizes:0=19 hidden_sizes:1=24 lr=0.0006397 num_layers=2 epochs=1 [I 2020-05-28 14:05:39,167] Finished trial#3 with value: 8.194329714775085 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 24, 'lr': 0.0006397267019477898, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#35] hidden_sizes:0=29 hidden_sizes:1=27 hidden_sizes:2=25 lr=0.0003845 num_layers=3 epochs=1 [I 2020-05-28 14:05:39,660] Finished trial#4 with value: 63.34320230484009 with parameters: {'hidden_sizes:0': 29, 'hidden_sizes:1': 27, 'hidden_sizes:2': 25, 'lr': 0.00038449133291202297, 'num_layers': 3}. Best is trial#3 with value: 8.194329714775085. [run#36] hidden_sizes:0=30 hidden_sizes:1=27 hidden_sizes:2=13 lr=0.0001748 num_layers=3 epochs=1 [I 2020-05-28 14:05:40,152] Finished trial#5 with value: 96.4633056640625 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 27, 'hidden_sizes:2': 13, 'lr': 0.00017475436936655747, 'num_layers': 3}. Best is trial#3 with value: 8.194329714775085. [run#37] hidden_sizes:0=30 hidden_sizes:1=10 lr=0.0004316 num_layers=2 epochs=1 [I 2020-05-28 14:05:40,635] Finished trial#6 with value: 8.862216973304749 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 10, 'lr': 0.0004316452983377237, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#38] hidden_sizes:0=14 hidden_sizes:1=24 lr=0.0006196 num_layers=2 epochs=1 [I 2020-05-28 14:05:41,134] Finished trial#7 with value: 8.825332427024842 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 24, 'lr': 0.0006196408322565513, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#39] hidden_sizes:0=23 hidden_sizes:1=28 lr=0.0005428 num_layers=2 epochs=1 [I 2020-05-28 14:05:41,624] Finished trial#8 with value: 8.752635943889619 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 28, 'lr': 0.0005427781100614357, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#40] hidden_sizes:0=10 hidden_sizes:1=17 hidden_sizes:2=18 lr=0.0009358 num_layers=3 epochs=1 [I 2020-05-28 14:05:42,146] Finished trial#9 with value: 11.112245631217956 with parameters: {'hidden_sizes:0': 10, 'hidden_sizes:1': 17, 'hidden_sizes:2': 18, 'lr': 0.0009357902695839973, 'num_layers': 3}. Best is trial#3 with value: 8.194329714775085. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" must be better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-05-28 14:05:42 ( 3.00ms ) python3 ( 51.1s ) 'torch.hidden_sizes.lr.study#7' Study from YAML file As a normal Run , a Study instance also can be created from a YAML file. For this, pass an extra keyword argument to the client.create_experiment() function. The key is the instance name (in this case study ) and value is a YAML file name without the extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-05-28 14:05:42 ( 12.1ms ) python3 ( 51.2s ) Experiment(id='1', name='torch', num_objects=1) Here is the contents of study.yml file. File 10 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses def keyword. On the other hand, lr is just one line. If a suggest funtion can be called without additional parameters, you can omit the def keyword. Using this experiment, create Study instances. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-05-28 14:05:42 ( 174ms ) python3 ( 51.3s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-05-28 14:05:42 ( 169ms ) python3 ( 51.5s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-05-28 14:05:42 ( 3.98ms ) python3 ( 51.5s ) functools.partial(<function suggest_hidden_sizes at 0x000002250AAB8EE8>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-05-28 14:05:42 ( 2.21s ) python3 ( 53.7s ) [I 2020-05-28 14:05:42,550] A new study created with name: torch.lr.study#8 [run#41] lr=0.0008723 epochs=3 [I 2020-05-28 14:05:43,287] Finished trial#0 with value: 4.489659428596497 with parameters: {'lr': 0.0008722708113185674}. Best is trial#0 with value: 4.489659428596497. [run#42] lr=1.617e-05 epochs=3 [I 2020-05-28 14:05:44,010] Finished trial#1 with value: 62.64217882156372 with parameters: {'lr': 1.6173306852934862e-05}. Best is trial#0 with value: 4.489659428596497. [run#43] lr=0.0003322 epochs=3 [I 2020-05-28 14:05:44,734] Finished trial#2 with value: 6.994030702114105 with parameters: {'lr': 0.0003321791431487163}. Best is trial#0 with value: 4.489659428596497. <optuna.study.Study at 0x2250aba6108> Pruning Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is the updated contents of study.yml file. File 11 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Hyperparameter Tuning</span></span></span>"},{"location":"tutorial/tuning/#hyperparameter-tuning","text":"","title":"Hyperparameter Tuning"},{"location":"tutorial/tuning/#suggest-function","text":"To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 7 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the Optuna offical documentation . Note In the suggest_hidden_sizes() function, we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() function to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-05-28 14:05:22 ( 5.00ms ) python3 ( 31.6s )","title":"Suggest Function"},{"location":"tutorial/tuning/#study","text":"Ivory implements a special run type called Study which controls hyperparameter tuning using Optuna . import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-05-28 14:05:22 ( 85.0ms ) python3 ( 31.7s ) [I 200528 14:05:22 tracker:48] A new experiment created with name: 'torch' Study(id='a711987f8bff4b438824804984ba12d6', name='study#0', num_objects=5) In the client.create_study() function, you can pass keyword arguments in which a key is a suggest names and a value is a pure suggest functions.","title":"Study"},{"location":"tutorial/tuning/#objective","text":"The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and provides it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-05-28 14:05:22 ( 5.00ms ) python3 ( 31.7s ) Objective(['lr']) study_hs.objective [6] 2020-05-28 14:05:22 ( 3.00ms ) python3 ( 31.7s ) Objective(['hidden_sizes'])","title":"Objective"},{"location":"tutorial/tuning/#optimization","text":"Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-05-28 14:05:22 ( 1.81s ) python3 ( 33.5s ) [I 2020-05-28 14:05:22,731] A new study created with name: torch.lr.study#0 [run#0] lr=0.0007176 fold=3 epochs=3 [epoch#0] loss=14.92 val_loss=7.437 lr=0.0007176 best [epoch#1] loss=6.306 val_loss=5.834 lr=0.0007176 best [epoch#2] loss=5.135 val_loss=4.774 lr=0.0007176 best [I 2020-05-28 14:05:23,326] Finished trial#0 with value: 4.773539292812347 with parameters: {'lr': 0.0007175898704667993}. Best is trial#0 with value: 4.773539292812347. [run#1] lr=0.001195 fold=3 epochs=3 [epoch#0] loss=12.5 val_loss=6.676 lr=0.001195 best [epoch#1] loss=5.556 val_loss=4.698 lr=0.001195 best [epoch#2] loss=4.229 val_loss=4.144 lr=0.001195 best [I 2020-05-28 14:05:23,919] Finished trial#1 with value: 4.143831324577332 with parameters: {'lr': 0.0011954454496665005}. Best is trial#1 with value: 4.143831324577332. [run#2] lr=0.00162 fold=3 epochs=3 [epoch#0] loss=11.09 val_loss=6.355 lr=0.00162 best [epoch#1] loss=5.419 val_loss=4.261 lr=0.00162 best [epoch#2] loss=3.293 val_loss=2.771 lr=0.00162 best [I 2020-05-28 14:05:24,506] Finished trial#2 with value: 2.770973062515259 with parameters: {'lr': 0.001620354821784766}. Best is trial#2 with value: 2.770973062515259. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-05-28 14:05:24 ( 1.84s ) python3 ( 35.4s ) [I 2020-05-28 14:05:24,537] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=26 hidden_sizes:1=17 num_layers=2 epochs=3 [epoch#0] loss=20.45 val_loss=6.857 lr=0.001 best [epoch#1] loss=6.305 val_loss=6.34 lr=0.001 best [epoch#2] loss=5.632 val_loss=5.331 lr=0.001 best [I 2020-05-28 14:05:25,147] Finished trial#0 with value: 5.330851233005523 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 17, 'num_layers': 2}. Best is trial#0 with value: 5.330851233005523. [run#4] hidden_sizes:0=18 hidden_sizes:1=28 num_layers=2 epochs=3 [epoch#0] loss=21.1 val_loss=6.804 lr=0.001 best [epoch#1] loss=6.426 val_loss=6.255 lr=0.001 best [epoch#2] loss=5.935 val_loss=5.798 lr=0.001 best [I 2020-05-28 14:05:25,739] Finished trial#1 with value: 5.797763848304749 with parameters: {'hidden_sizes:0': 18, 'hidden_sizes:1': 28, 'num_layers': 2}. Best is trial#0 with value: 5.330851233005523. [run#5] hidden_sizes:0=23 hidden_sizes:1=29 num_layers=2 epochs=3 [epoch#0] loss=17.71 val_loss=7.053 lr=0.001 best [epoch#1] loss=6.342 val_loss=6.84 lr=0.001 best [epoch#2] loss=5.451 val_loss=5.336 lr=0.001 best [I 2020-05-28 14:05:26,346] Finished trial#2 with value: 5.335860657691955 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 29, 'num_layers': 2}. Best is trial#0 with value: 5.330851233005523. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-05-28 14:05:26 ( 4.00ms ) python3 ( 35.4s ) <optuna.study.Study at 0x2250aab1fc8> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-05-28 14:05:26 ( 5.00ms ) python3 ( 35.4s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, RunID is saved. optuna_study_lr.user_attrs [11] 2020-05-28 14:05:26 ( 5.00ms ) python3 ( 35.4s ) {'run_id': 'a711987f8bff4b438824804984ba12d6'} optuna_study_lr.trials[0].user_attrs [12] 2020-05-28 14:05:26 ( 4.00ms ) python3 ( 35.4s ) {'run_id': '29132242c2124f0799eca8217f28763c'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-05-28 14:05:26 ( 5.00ms ) python3 ( 35.4s ) <mlflow.tracking.client.MlflowClient at 0x2250aad3408> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-05-28 14:05:26 ( 7.00ms ) python3 ( 35.4s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-05-28 14:05:26 ( 10.0ms ) python3 ( 35.4s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 8 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 The Monitor instance monitors val_loss and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max","title":"Optimization"},{"location":"tutorial/tuning/#parametric-optimization","text":"Again read the suggest functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() function has some logic but the suggest_lr() function is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass iterable(s) to the client.create_study() function instead of a callable","title":"Parametric Optimization"},{"location":"tutorial/tuning/#tuple-range-range","text":"A tuple, range, or Range instance represent parameter ranges. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-05-28 14:05:26 ( 1.96s ) python3 ( 37.4s ) [I 2020-05-28 14:05:26,490] A new study created with name: torch.lr.study#2 [run#6] lr=0.009442 epochs=1 [I 2020-05-28 14:05:26,868] Finished trial#0 with value: 15.44840669631958 with parameters: {'lr': 0.009441995734388347}. Best is trial#0 with value: 15.44840669631958. [run#7] lr=0.007124 epochs=1 [I 2020-05-28 14:05:27,230] Finished trial#1 with value: 7.713035857677459 with parameters: {'lr': 0.007123828173873202}. Best is trial#1 with value: 7.713035857677459. [run#8] lr=0.004644 epochs=1 [I 2020-05-28 14:05:27,594] Finished trial#2 with value: 98.60356998443604 with parameters: {'lr': 0.004644341482187609}. Best is trial#1 with value: 7.713035857677459. [run#9] lr=0.001893 epochs=1 [I 2020-05-28 14:05:27,973] Finished trial#3 with value: 8.306830966472626 with parameters: {'lr': 0.001892730744664992}. Best is trial#1 with value: 7.713035857677459. [run#10] lr=0.003165 epochs=1 [I 2020-05-28 14:05:28,360] Finished trial#4 with value: 6.782948929071426 with parameters: {'lr': 0.003164899558855928}. Best is trial#4 with value: 6.782948929071426. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 20)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-05-28 14:05:28 ( 2.00s ) python3 ( 39.4s ) [I 2020-05-28 14:05:28,468] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=11 epochs=1 [I 2020-05-28 14:05:28,852] Finished trial#0 with value: 8.875942385196685 with parameters: {'hidden_sizes.0': 11}. Best is trial#0 with value: 8.875942385196685. [run#12] hidden_sizes.0=18 epochs=1 [I 2020-05-28 14:05:29,225] Finished trial#1 with value: 8.11760492324829 with parameters: {'hidden_sizes.0': 18}. Best is trial#1 with value: 8.11760492324829. [run#13] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:29,603] Finished trial#2 with value: 7.8361660718917845 with parameters: {'hidden_sizes.0': 10}. Best is trial#2 with value: 7.8361660718917845. [run#14] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:29,984] Finished trial#3 with value: 9.15675221681595 with parameters: {'hidden_sizes.0': 10}. Best is trial#2 with value: 7.8361660718917845. [run#15] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:30,364] Finished trial#4 with value: 8.126809978485108 with parameters: {'hidden_sizes.0': 10}. Best is trial#2 with value: 7.8361660718917845. You can specify a step params = {'hidden_sizes.0': range(10, 20, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-05-28 14:05:30 ( 2.11s ) python3 ( 41.5s ) [I 2020-05-28 14:05:30,488] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=16 epochs=1 [I 2020-05-28 14:05:30,882] Finished trial#0 with value: 7.560184299945831 with parameters: {'hidden_sizes.0': 16}. Best is trial#0 with value: 7.560184299945831. [run#17] hidden_sizes.0=13 epochs=1 [I 2020-05-28 14:05:31,275] Finished trial#1 with value: 8.607846939563752 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 7.560184299945831. [run#18] hidden_sizes.0=13 epochs=1 [I 2020-05-28 14:05:31,675] Finished trial#2 with value: 8.565467238426208 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 7.560184299945831. [run#19] hidden_sizes.0=13 epochs=1 [I 2020-05-28 14:05:32,073] Finished trial#3 with value: 7.256689751148224 with parameters: {'hidden_sizes.0': 13}. Best is trial#3 with value: 7.256689751148224. [run#20] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:32,473] Finished trial#4 with value: 7.61679116487503 with parameters: {'hidden_sizes.0': 10}. Best is trial#3 with value: 7.256689751148224. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-05-28 14:05:32 ( 2.26s ) python3 ( 43.7s ) [I 2020-05-28 14:05:32,612] A new study created with name: torch.lr.study#5 [run#21] lr=0.00173 epochs=1 [I 2020-05-28 14:05:33,031] Finished trial#0 with value: 6.769354224205017 with parameters: {'lr': 0.0017296446938474903}. Best is trial#0 with value: 6.769354224205017. [run#22] lr=0.005462 epochs=1 [I 2020-05-28 14:05:33,443] Finished trial#1 with value: 17.77368609905243 with parameters: {'lr': 0.005462086556877391}. Best is trial#0 with value: 6.769354224205017. [run#23] lr=0.003362 epochs=1 [I 2020-05-28 14:05:33,867] Finished trial#2 with value: 6.101597547531128 with parameters: {'lr': 0.003361914261025218}. Best is trial#2 with value: 6.101597547531128. [run#24] lr=0.001086 epochs=1 [I 2020-05-28 14:05:34,289] Finished trial#3 with value: 6.51294219493866 with parameters: {'lr': 0.0010862855564853161}. Best is trial#2 with value: 6.101597547531128. [run#25] lr=0.003171 epochs=1 [I 2020-05-28 14:05:34,734] Finished trial#4 with value: 4.587558138370514 with parameters: {'lr': 0.0031709644933879118}. Best is trial#4 with value: 4.587558138370514.","title":"tuple, range, Range"},{"location":"tutorial/tuning/#list","text":"A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-05-28 14:05:34 ( 2.30s ) python3 ( 46.0s ) [I 2020-05-28 14:05:34,890] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:35,327] Finished trial#0 with value: 8.008499228954316 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 8.008499228954316. [run#27] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:35,746] Finished trial#1 with value: 8.72653682231903 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 8.008499228954316. [run#28] hidden_sizes.0=20 epochs=1 [I 2020-05-28 14:05:36,173] Finished trial#2 with value: 9.071938228607177 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 8.008499228954316. [run#29] hidden_sizes.0=10 epochs=1 [I 2020-05-28 14:05:36,605] Finished trial#3 with value: 7.1040250062942505 with parameters: {'hidden_sizes.0': 10}. Best is trial#3 with value: 7.1040250062942505. [run#30] hidden_sizes.0=30 epochs=1 [I 2020-05-28 14:05:37,036] Finished trial#4 with value: 7.311557245254517 with parameters: {'hidden_sizes.0': 30}. Best is trial#3 with value: 7.1040250062942505.","title":"list"},{"location":"tutorial/tuning/#product","text":"If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-05-28 14:05:37 ( 5.11s ) python3 ( 51.1s ) [I 2020-05-28 14:05:37,214] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=12 hidden_sizes:1=20 hidden_sizes:2=28 lr=0.0005982 num_layers=3 epochs=1 [I 2020-05-28 14:05:37,712] Finished trial#0 with value: 8.477884137630463 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 20, 'hidden_sizes:2': 28, 'lr': 0.0005982112847786007, 'num_layers': 3}. Best is trial#0 with value: 8.477884137630463. [run#32] hidden_sizes:0=24 hidden_sizes:1=24 hidden_sizes:2=27 lr=0.0005883 num_layers=3 epochs=1 [I 2020-05-28 14:05:38,201] Finished trial#1 with value: 10.718765878677369 with parameters: {'hidden_sizes:0': 24, 'hidden_sizes:1': 24, 'hidden_sizes:2': 27, 'lr': 0.0005883027469076012, 'num_layers': 3}. Best is trial#0 with value: 8.477884137630463. [run#33] hidden_sizes:0=13 hidden_sizes:1=21 hidden_sizes:2=10 lr=0.000301 num_layers=3 epochs=1 [I 2020-05-28 14:05:38,687] Finished trial#2 with value: 96.12896919250488 with parameters: {'hidden_sizes:0': 13, 'hidden_sizes:1': 21, 'hidden_sizes:2': 10, 'lr': 0.0003009684939928948, 'num_layers': 3}. Best is trial#0 with value: 8.477884137630463. [run#34] hidden_sizes:0=19 hidden_sizes:1=24 lr=0.0006397 num_layers=2 epochs=1 [I 2020-05-28 14:05:39,167] Finished trial#3 with value: 8.194329714775085 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 24, 'lr': 0.0006397267019477898, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#35] hidden_sizes:0=29 hidden_sizes:1=27 hidden_sizes:2=25 lr=0.0003845 num_layers=3 epochs=1 [I 2020-05-28 14:05:39,660] Finished trial#4 with value: 63.34320230484009 with parameters: {'hidden_sizes:0': 29, 'hidden_sizes:1': 27, 'hidden_sizes:2': 25, 'lr': 0.00038449133291202297, 'num_layers': 3}. Best is trial#3 with value: 8.194329714775085. [run#36] hidden_sizes:0=30 hidden_sizes:1=27 hidden_sizes:2=13 lr=0.0001748 num_layers=3 epochs=1 [I 2020-05-28 14:05:40,152] Finished trial#5 with value: 96.4633056640625 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 27, 'hidden_sizes:2': 13, 'lr': 0.00017475436936655747, 'num_layers': 3}. Best is trial#3 with value: 8.194329714775085. [run#37] hidden_sizes:0=30 hidden_sizes:1=10 lr=0.0004316 num_layers=2 epochs=1 [I 2020-05-28 14:05:40,635] Finished trial#6 with value: 8.862216973304749 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 10, 'lr': 0.0004316452983377237, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#38] hidden_sizes:0=14 hidden_sizes:1=24 lr=0.0006196 num_layers=2 epochs=1 [I 2020-05-28 14:05:41,134] Finished trial#7 with value: 8.825332427024842 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 24, 'lr': 0.0006196408322565513, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#39] hidden_sizes:0=23 hidden_sizes:1=28 lr=0.0005428 num_layers=2 epochs=1 [I 2020-05-28 14:05:41,624] Finished trial#8 with value: 8.752635943889619 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 28, 'lr': 0.0005427781100614357, 'num_layers': 2}. Best is trial#3 with value: 8.194329714775085. [run#40] hidden_sizes:0=10 hidden_sizes:1=17 hidden_sizes:2=18 lr=0.0009358 num_layers=3 epochs=1 [I 2020-05-28 14:05:42,146] Finished trial#9 with value: 11.112245631217956 with parameters: {'hidden_sizes:0': 10, 'hidden_sizes:1': 17, 'hidden_sizes:2': 18, 'lr': 0.0009357902695839973, 'num_layers': 3}. Best is trial#3 with value: 8.194329714775085. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" must be better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-05-28 14:05:42 ( 3.00ms ) python3 ( 51.1s ) 'torch.hidden_sizes.lr.study#7'","title":"Product"},{"location":"tutorial/tuning/#study-from-yaml-file","text":"As a normal Run , a Study instance also can be created from a YAML file. For this, pass an extra keyword argument to the client.create_experiment() function. The key is the instance name (in this case study ) and value is a YAML file name without the extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-05-28 14:05:42 ( 12.1ms ) python3 ( 51.2s ) Experiment(id='1', name='torch', num_objects=1) Here is the contents of study.yml file. File 10 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses def keyword. On the other hand, lr is just one line. If a suggest funtion can be called without additional parameters, you can omit the def keyword. Using this experiment, create Study instances. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-05-28 14:05:42 ( 174ms ) python3 ( 51.3s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-05-28 14:05:42 ( 169ms ) python3 ( 51.5s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-05-28 14:05:42 ( 3.98ms ) python3 ( 51.5s ) functools.partial(<function suggest_hidden_sizes at 0x000002250AAB8EE8>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-05-28 14:05:42 ( 2.21s ) python3 ( 53.7s ) [I 2020-05-28 14:05:42,550] A new study created with name: torch.lr.study#8 [run#41] lr=0.0008723 epochs=3 [I 2020-05-28 14:05:43,287] Finished trial#0 with value: 4.489659428596497 with parameters: {'lr': 0.0008722708113185674}. Best is trial#0 with value: 4.489659428596497. [run#42] lr=1.617e-05 epochs=3 [I 2020-05-28 14:05:44,010] Finished trial#1 with value: 62.64217882156372 with parameters: {'lr': 1.6173306852934862e-05}. Best is trial#0 with value: 4.489659428596497. [run#43] lr=0.0003322 epochs=3 [I 2020-05-28 14:05:44,734] Finished trial#2 with value: 6.994030702114105 with parameters: {'lr': 0.0003321791431487163}. Best is trial#0 with value: 4.489659428596497. <optuna.study.Study at 0x2250aba6108>","title":"Study from YAML file"},{"location":"tutorial/tuning/#pruning","text":"Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is the updated contents of study.yml file. File 11 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna.","title":"Pruning"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ivory Documentation Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Documentation</span></span></span>"},{"location":"#ivory-documentation","text":"Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"Ivory Documentation"},{"location":"quickstart/","text":"Quickstart Installation Install Ivory using pip . $ pip install ivory Using an Ivory Client Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-06-01 16:01:57 ( 1.03s ) python3 ( 1.08s ) Client(num_instances=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.09s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance that connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-06-01 16:01:58 ( 5.00ms ) python3 ( 1.09s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.09s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the working directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note If you don't need any customization, the YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and tuner. (So, the above file is unnecessary.) If you don't need a tracker and/or tuner, for example in debugging, use ivory.create_client(tracker=False, tuner=False) . Create NumPy data In this quickstart, we try to predict rectangles area from their width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() is defined. The ivory.create_client() automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() defined in rectangle/data.py and an example output: File 2 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1) import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.10s ) array([[2.890881 , 4.9526153], [3.331994 , 3.301199 ], [1.0694575, 1.8662084], [3.8569527, 3.151669 ]], dtype=float32) z [9] 2020-06-01 16:01:58 ( 3.00ms ) python3 ( 1.11s ) array([14.2094555, 11.169854 , 2.1142802, 12.133472 ], dtype=float32) ivory.utils.fold.kfold_split() creates a fold array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [10] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.11s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) Set of Data Classes Ivory defines a set of base classes for data ( Data , Dataset , Datasets , and DataLoaders ) that user's custom classes can inherit. But now, we use the Data only. Now, we can get a rectangle.data.Data instance. data = rectangle.data.Data() data [11] 2020-06-01 16:01:58 ( 6.00ms ) python3 ( 1.12s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [12] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.12s ) (0, array([3.0982542, 1.4571707], dtype=float32), array([4.5988407], dtype=float32)) The returned value is a tuple of (index, input, target). Ivory always keeps data index so that we can know where a sample comes from. Define a model We use a simple MLP model. Note that the number of hidden layers and the size of each hidden layer are customizable. File 3 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) Parameter file for Run Ivory configures a run using a YAML file. Here is a full example. File 4 torch.yaml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 Let's create a run calling the Client.create_run() . run = client.create_run('torch') run [14] 2020-06-01 16:01:58 ( 279ms ) python3 ( 1.68s ) [I 200601 16:01:58 tracker:48] A new experiment created with name: 'torch' Run(id='ab5ebea52943410ea264987d78a8db83', name='run#0', num_instances=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By clicking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have an attribute params that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [15] 2020-06-01 16:01:59 ( 6.00ms ) python3 ( 1.69s ) run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 0 class: ivory.core.data.Datasets model: class: rectangle.torch.Model hidden_sizes: - 20 - 30 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: ab5ebea52943410ea264987d78a8db83 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but has been slightly changed. Run and experiment keys are inserted. Run name is assigned by Ivory Client. Experiment ID and Run ID are assigned by MLFlow Tracking. Default classes are specified, for example the ivory.torch.trainer.Trainer class for a trainer instance. The Client.create_run() can take keyword arguments to modify these parameters: run = client.create_run( 'torch', fold=3, hidden_sizes=[40, 50, 60], ) print('[datasets]') print(yaml.dump(run.params['run']['datasets'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [16] 2020-06-01 16:01:59 ( 44.0ms ) python3 ( 1.73s ) [datasets] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 3 class: ivory.core.data.Datasets [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60 Train a model Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [17] 2020-06-01 16:01:59 ( 1.30s ) python3 ( 3.03s ) [epoch#0] loss=18.66 val_loss=7.742 lr=0.001 best [epoch#1] loss=6.813 val_loss=6.144 lr=0.001 best [epoch#2] loss=6.105 val_loss=5.398 lr=0.001 best [epoch#3] loss=5.295 val_loss=4.715 lr=0.001 best [epoch#4] loss=4.553 val_loss=3.883 lr=0.001 best [epoch#5] loss=3.795 val_loss=3.137 lr=0.001 best [epoch#6] loss=2.956 val_loss=2.574 lr=0.001 best [epoch#7] loss=2.168 val_loss=1.801 lr=0.001 best [epoch#8] loss=1.595 val_loss=1.317 lr=0.001 best [epoch#9] loss=1.132 val_loss=1.219 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [18] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.04s ) Dict(['loss', 'val_loss', 'lr']) run.metrics.history.val_loss [19] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.04s ) {0: 7.742454063892365, 1: 6.143502056598663, 2: 5.398322057723999, 3: 4.715235149860382, 4: 3.882868933677673, 5: 3.1367634654045107, 6: 2.574497628211975, 7: 1.8010327786207199, 8: 1.3173263639211654, 9: 1.219246757775545} Also the model output and target are automatically collected in a run.results instance. run.results [20] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.04s ) Results(['train', 'val']) run.results.val.output[:5] [21] 2020-06-01 16:02:00 ( 5.00ms ) python3 ( 3.05s ) array([[ 2.0722656], [ 8.101309 ], [10.7582 ], [11.441732 ], [14.379766 ]], dtype=float32) run.results.val.target[:5] [22] 2020-06-01 16:02:00 ( 5.00ms ) python3 ( 3.05s ) array([[ 2.0068963], [ 7.686576 ], [11.300791 ], [11.222835 ], [15.203695 ]], dtype=float32) Test a model Testing a model is as simple as training. Just call Run.start('test') instead of a (default) 'train' argument. run.start('test') run.results [23] 2020-06-01 16:02:00 ( 39.0ms ) python3 ( 3.09s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [24] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.10s ) array([[ 8.905878 ], [10.418325 ], [ 4.899633 ], [ 7.4395466], [16.949183 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [25] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.10s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32) Task for multiple runs Ivory implements a special run type called Task that controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [26] 2020-06-01 16:02:00 ( 45.0ms ) python3 ( 3.15s ) Task(id='dfc1b5e5116a4c4585936c03aad9d828', name='task#0', num_instances=3) The Task class has two functions to generate multiple runs: Task.prodcut() and Task.chain() . These two functions have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [27] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.15s ) <generator object Task.product at 0x00000107B0B8FD48> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specify. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 3 for each. A task instance doesn't start any training by itself. In addition, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means successive test after training. for run in runs: run.start('both') [28] 2020-06-01 16:02:00 ( 2.13s ) python3 ( 5.28s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3 Collect runs Our client has a Tracker instance. It stores the state of runs in background using MLFlow Tracking. The Client provides several functions to access the stored runs. For example, Client.search_run_ids() returns a generator that yields Run ID assigned by MLFlow Tracking. # A helper function. def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [29] 2020-06-01 16:02:02 ( 4.00ms ) python3 ( 5.28s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [30] 2020-06-01 16:02:02 ( 75.0ms ) python3 ( 5.36s ) 9b873 run#6 dd342 run#5 a4a16 run#4 9f75e run#3 dfc1b task#0 3ecd3 run#2 d3e88 run#1 ab5eb run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [31] 2020-06-01 16:02:02 ( 143ms ) python3 ( 5.50s ) 9f75e run#3 3ecd3 run#2 ab5eb run#0 # If `parent_run_id` is specified, nested runs with the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [32] 2020-06-01 16:02:02 ( 44.0ms ) python3 ( 5.54s ) 9b873 run#6 dd342 run#5 a4a16 run#4 9f75e run#3 Client.get_run_id() and Client.get_run_ids() fetch Run ID from run name, more strictly, a key-value pair of (run class name in lower case, run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [33] 2020-06-01 16:02:03 ( 52.4ms ) python3 ( 5.60s ) ab5eb run#0 dfc1b task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [34] 2020-06-01 16:02:03 ( 56.0ms ) python3 ( 5.65s ) 3ecd3 run#2 9f75e run#3 Load runs and results A Client instance can load runs. First select Run ID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long Run ID after we restart a Python session and lose the Task instance. On the other hand, a run name is easy to manage and write. # Assume that we restarted a session so we have no run instances now. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [35] 2020-06-01 16:02:03 ( 64.0ms ) python3 ( 5.72s ) 9b873 run#6 dd342 run#5 a4a16 run#4 9f75e run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [36] 2020-06-01 16:02:03 ( 43.0ms ) python3 ( 5.76s ) Run(id='9b873bdf406b4795a12e9b812fd502fd', name='run#6', num_instances=11) Note that the Client.load_run() doesn't require an experiment name because Run ID is UUID . As you expected, the fold number is 3. run.datasets.fold [37] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 5.76s ) 3 By loading a run, we obtain the pretrained model. run.model.eval() [38] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 5.77s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=30, bias=True) (2): Linear(in_features=30, out_features=1, bias=True) ) ) import torch index, input, target = run.datasets.val[:5] with torch.no_grad(): output = run.model(torch.tensor(input)) print('[output]') print(output.numpy()) print('[target]') print(target) [39] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 5.78s ) [output] [[ 4.545364 ] [ 5.1212196] [ 9.380013 ] [ 7.4850936] [11.642327 ]] [target] [[ 2.1424406] [ 3.1382954] [ 6.2698073] [ 5.970175 ] [13.225378 ]] If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [40] 2020-06-01 16:02:03 ( 25.0ms ) python3 ( 5.80s ) Results(['train', 'val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [41] 2020-06-01 16:02:03 ( 7.00ms ) python3 ( 5.81s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. In order to load multiple run's results at the same time, the Ivory Client provides a convenient function. results = client.load_results(run_ids, verbose=False) # No progress bar. results [42] 2020-06-01 16:02:03 ( 88.0ms ) python3 ( 5.90s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [43] 2020-06-01 16:02:03 ( 6.00ms ) python3 ( 5.90s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of the validation and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples should be 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [44] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 5.91s ) (800, 200) Usually, duplicated samples in test data are averaged for ensembling. Results.mean() performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode, result in reduced_results.items(): print(mode, result.output.shape) [45] 2020-06-01 16:02:03 ( 12.0ms ) python3 ( 5.92s ) val (800, 1) test (200, 1) Compare these two results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [46] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 5.93s ) [results] [[9.235045] [9.449627] [9.452878] [9.153109]] -> mean: 9.322664 [reduced_results] [[9.322664]] For convenience, The Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [47] 2020-06-01 16:02:03 ( 83.0ms ) python3 ( 6.01s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [48] 2020-06-01 16:02:03 ( 6.00ms ) python3 ( 6.02s ) val (800, 1) test (200, 1) The cross validation (CV) score can be calculated as follows: true = results.val.target pred = results.val.output np.mean(np.sqrt((true - pred) ** 2)) # Use any function for your metric. [49] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.02s ) 2.008625 And we got prediction for the test data using 4 MLP models. results.test.output[:5] [50] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.02s ) array([[ 9.322664], [10.909479], [ 6.961643], [ 8.868744], [14.416925]], dtype=float32) Summary In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the Tutorial.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Quickstart</span></span></span>"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Install Ivory using pip . $ pip install ivory","title":"Installation"},{"location":"quickstart/#using-an-ivory-client","text":"Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-06-01 16:01:57 ( 1.03s ) python3 ( 1.08s ) Client(num_instances=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.09s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance that connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-06-01 16:01:58 ( 5.00ms ) python3 ( 1.09s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.09s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the working directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note If you don't need any customization, the YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and tuner. (So, the above file is unnecessary.) If you don't need a tracker and/or tuner, for example in debugging, use ivory.create_client(tracker=False, tuner=False) .","title":"Using an Ivory Client"},{"location":"quickstart/#create-numpy-data","text":"In this quickstart, we try to predict rectangles area from their width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() is defined. The ivory.create_client() automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() defined in rectangle/data.py and an example output: File 2 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1) import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.10s ) array([[2.890881 , 4.9526153], [3.331994 , 3.301199 ], [1.0694575, 1.8662084], [3.8569527, 3.151669 ]], dtype=float32) z [9] 2020-06-01 16:01:58 ( 3.00ms ) python3 ( 1.11s ) array([14.2094555, 11.169854 , 2.1142802, 12.133472 ], dtype=float32) ivory.utils.fold.kfold_split() creates a fold array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [10] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.11s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8)","title":"Create NumPy data"},{"location":"quickstart/#set-of-data-classes","text":"Ivory defines a set of base classes for data ( Data , Dataset , Datasets , and DataLoaders ) that user's custom classes can inherit. But now, we use the Data only. Now, we can get a rectangle.data.Data instance. data = rectangle.data.Data() data [11] 2020-06-01 16:01:58 ( 6.00ms ) python3 ( 1.12s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [12] 2020-06-01 16:01:58 ( 4.00ms ) python3 ( 1.12s ) (0, array([3.0982542, 1.4571707], dtype=float32), array([4.5988407], dtype=float32)) The returned value is a tuple of (index, input, target). Ivory always keeps data index so that we can know where a sample comes from.","title":"Set of Data Classes"},{"location":"quickstart/#define-a-model","text":"We use a simple MLP model. Note that the number of hidden layers and the size of each hidden layer are customizable. File 3 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x)","title":"Define a model"},{"location":"quickstart/#parameter-file-for-run","text":"Ivory configures a run using a YAML file. Here is a full example. File 4 torch.yaml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 Let's create a run calling the Client.create_run() . run = client.create_run('torch') run [14] 2020-06-01 16:01:58 ( 279ms ) python3 ( 1.68s ) [I 200601 16:01:58 tracker:48] A new experiment created with name: 'torch' Run(id='ab5ebea52943410ea264987d78a8db83', name='run#0', num_instances=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By clicking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have an attribute params that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [15] 2020-06-01 16:01:59 ( 6.00ms ) python3 ( 1.69s ) run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 0 class: ivory.core.data.Datasets model: class: rectangle.torch.Model hidden_sizes: - 20 - 30 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: ab5ebea52943410ea264987d78a8db83 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but has been slightly changed. Run and experiment keys are inserted. Run name is assigned by Ivory Client. Experiment ID and Run ID are assigned by MLFlow Tracking. Default classes are specified, for example the ivory.torch.trainer.Trainer class for a trainer instance. The Client.create_run() can take keyword arguments to modify these parameters: run = client.create_run( 'torch', fold=3, hidden_sizes=[40, 50, 60], ) print('[datasets]') print(yaml.dump(run.params['run']['datasets'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [16] 2020-06-01 16:01:59 ( 44.0ms ) python3 ( 1.73s ) [datasets] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 3 class: ivory.core.data.Datasets [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60","title":"Parameter file for Run"},{"location":"quickstart/#train-a-model","text":"Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [17] 2020-06-01 16:01:59 ( 1.30s ) python3 ( 3.03s ) [epoch#0] loss=18.66 val_loss=7.742 lr=0.001 best [epoch#1] loss=6.813 val_loss=6.144 lr=0.001 best [epoch#2] loss=6.105 val_loss=5.398 lr=0.001 best [epoch#3] loss=5.295 val_loss=4.715 lr=0.001 best [epoch#4] loss=4.553 val_loss=3.883 lr=0.001 best [epoch#5] loss=3.795 val_loss=3.137 lr=0.001 best [epoch#6] loss=2.956 val_loss=2.574 lr=0.001 best [epoch#7] loss=2.168 val_loss=1.801 lr=0.001 best [epoch#8] loss=1.595 val_loss=1.317 lr=0.001 best [epoch#9] loss=1.132 val_loss=1.219 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [18] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.04s ) Dict(['loss', 'val_loss', 'lr']) run.metrics.history.val_loss [19] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.04s ) {0: 7.742454063892365, 1: 6.143502056598663, 2: 5.398322057723999, 3: 4.715235149860382, 4: 3.882868933677673, 5: 3.1367634654045107, 6: 2.574497628211975, 7: 1.8010327786207199, 8: 1.3173263639211654, 9: 1.219246757775545} Also the model output and target are automatically collected in a run.results instance. run.results [20] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.04s ) Results(['train', 'val']) run.results.val.output[:5] [21] 2020-06-01 16:02:00 ( 5.00ms ) python3 ( 3.05s ) array([[ 2.0722656], [ 8.101309 ], [10.7582 ], [11.441732 ], [14.379766 ]], dtype=float32) run.results.val.target[:5] [22] 2020-06-01 16:02:00 ( 5.00ms ) python3 ( 3.05s ) array([[ 2.0068963], [ 7.686576 ], [11.300791 ], [11.222835 ], [15.203695 ]], dtype=float32)","title":"Train a model"},{"location":"quickstart/#test-a-model","text":"Testing a model is as simple as training. Just call Run.start('test') instead of a (default) 'train' argument. run.start('test') run.results [23] 2020-06-01 16:02:00 ( 39.0ms ) python3 ( 3.09s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [24] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.10s ) array([[ 8.905878 ], [10.418325 ], [ 4.899633 ], [ 7.4395466], [16.949183 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [25] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.10s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32)","title":"Test a model"},{"location":"quickstart/#task-for-multiple-runs","text":"Ivory implements a special run type called Task that controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [26] 2020-06-01 16:02:00 ( 45.0ms ) python3 ( 3.15s ) Task(id='dfc1b5e5116a4c4585936c03aad9d828', name='task#0', num_instances=3) The Task class has two functions to generate multiple runs: Task.prodcut() and Task.chain() . These two functions have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [27] 2020-06-01 16:02:00 ( 4.00ms ) python3 ( 3.15s ) <generator object Task.product at 0x00000107B0B8FD48> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specify. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 3 for each. A task instance doesn't start any training by itself. In addition, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means successive test after training. for run in runs: run.start('both') [28] 2020-06-01 16:02:00 ( 2.13s ) python3 ( 5.28s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3","title":"Task for multiple runs"},{"location":"quickstart/#collect-runs","text":"Our client has a Tracker instance. It stores the state of runs in background using MLFlow Tracking. The Client provides several functions to access the stored runs. For example, Client.search_run_ids() returns a generator that yields Run ID assigned by MLFlow Tracking. # A helper function. def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [29] 2020-06-01 16:02:02 ( 4.00ms ) python3 ( 5.28s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [30] 2020-06-01 16:02:02 ( 75.0ms ) python3 ( 5.36s ) 9b873 run#6 dd342 run#5 a4a16 run#4 9f75e run#3 dfc1b task#0 3ecd3 run#2 d3e88 run#1 ab5eb run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [31] 2020-06-01 16:02:02 ( 143ms ) python3 ( 5.50s ) 9f75e run#3 3ecd3 run#2 ab5eb run#0 # If `parent_run_id` is specified, nested runs with the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [32] 2020-06-01 16:02:02 ( 44.0ms ) python3 ( 5.54s ) 9b873 run#6 dd342 run#5 a4a16 run#4 9f75e run#3 Client.get_run_id() and Client.get_run_ids() fetch Run ID from run name, more strictly, a key-value pair of (run class name in lower case, run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [33] 2020-06-01 16:02:03 ( 52.4ms ) python3 ( 5.60s ) ab5eb run#0 dfc1b task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [34] 2020-06-01 16:02:03 ( 56.0ms ) python3 ( 5.65s ) 3ecd3 run#2 9f75e run#3","title":"Collect runs"},{"location":"quickstart/#load-runs-and-results","text":"A Client instance can load runs. First select Run ID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long Run ID after we restart a Python session and lose the Task instance. On the other hand, a run name is easy to manage and write. # Assume that we restarted a session so we have no run instances now. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [35] 2020-06-01 16:02:03 ( 64.0ms ) python3 ( 5.72s ) 9b873 run#6 dd342 run#5 a4a16 run#4 9f75e run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [36] 2020-06-01 16:02:03 ( 43.0ms ) python3 ( 5.76s ) Run(id='9b873bdf406b4795a12e9b812fd502fd', name='run#6', num_instances=11) Note that the Client.load_run() doesn't require an experiment name because Run ID is UUID . As you expected, the fold number is 3. run.datasets.fold [37] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 5.76s ) 3 By loading a run, we obtain the pretrained model. run.model.eval() [38] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 5.77s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=30, bias=True) (2): Linear(in_features=30, out_features=1, bias=True) ) ) import torch index, input, target = run.datasets.val[:5] with torch.no_grad(): output = run.model(torch.tensor(input)) print('[output]') print(output.numpy()) print('[target]') print(target) [39] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 5.78s ) [output] [[ 4.545364 ] [ 5.1212196] [ 9.380013 ] [ 7.4850936] [11.642327 ]] [target] [[ 2.1424406] [ 3.1382954] [ 6.2698073] [ 5.970175 ] [13.225378 ]] If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [40] 2020-06-01 16:02:03 ( 25.0ms ) python3 ( 5.80s ) Results(['train', 'val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [41] 2020-06-01 16:02:03 ( 7.00ms ) python3 ( 5.81s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. In order to load multiple run's results at the same time, the Ivory Client provides a convenient function. results = client.load_results(run_ids, verbose=False) # No progress bar. results [42] 2020-06-01 16:02:03 ( 88.0ms ) python3 ( 5.90s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [43] 2020-06-01 16:02:03 ( 6.00ms ) python3 ( 5.90s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of the validation and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples should be 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [44] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 5.91s ) (800, 200) Usually, duplicated samples in test data are averaged for ensembling. Results.mean() performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode, result in reduced_results.items(): print(mode, result.output.shape) [45] 2020-06-01 16:02:03 ( 12.0ms ) python3 ( 5.92s ) val (800, 1) test (200, 1) Compare these two results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [46] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 5.93s ) [results] [[9.235045] [9.449627] [9.452878] [9.153109]] -> mean: 9.322664 [reduced_results] [[9.322664]] For convenience, The Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [47] 2020-06-01 16:02:03 ( 83.0ms ) python3 ( 6.01s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [48] 2020-06-01 16:02:03 ( 6.00ms ) python3 ( 6.02s ) val (800, 1) test (200, 1) The cross validation (CV) score can be calculated as follows: true = results.val.target pred = results.val.output np.mean(np.sqrt((true - pred) ** 2)) # Use any function for your metric. [49] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.02s ) 2.008625 And we got prediction for the test data using 4 MLP models. results.test.output[:5] [50] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.02s ) array([[ 9.322664], [10.909479], [ 6.961643], [ 8.868744], [14.416925]], dtype=float32)","title":"Load runs and results"},{"location":"quickstart/#summary","text":"In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the Tutorial.","title":"Summary"},{"location":"api/ivory.callbacks/","text":"Callbacks ivory.callbacks.results CLASS ivory.callbacks.results.Results () Results callback stores training, validation and test results. Each result is ivory.core.collections.Dict type that has index , output , and target array. To get target array of validation, use target = results.val.target Attributes train (Dict) \u2014 Train results. val (Dict) \u2014 Validation results. test (Dict) \u2014 Test results. METHOD mean () \u2192 Results Returns a reduced Results instance aveaged by index . FUNCTION ivory.callbacks.results.concatenate (iterable, callback=None, modes=('val', 'test'), reduction='none') \u2192 Results Returns a concatenated Results. Parameters iterable (iterable of Results) \u2014 Iterable of Results instance. callback (callable, optional) \u2014 Called for each Results . Must take ( mode , index , output , target ) arguments and return a tuple of ('index', output , target ). modes (iterable of str) \u2014 Specify modes to concatenate. reduction (str, optional) \u2014 Reduction. none or mean . ivory.callbacks.early_stopping DATACLASS ivory.callbacks.early_stopping.EarlyStopping (patience, wait=0) Early stops a training loop when a monitored metric has stopped improving. Parameters patience (int) \u2014 Number of epochs with no improvement after which training will be stopped. Attributes patience (int) \u2014 Number of epochs with no improvement after which training will be stopped. wait (int) \u2014 Number of continuous epochs with no imporovement. Raises EarlyStopped \u2014 When ealry stopping occurs.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callbacks</span></span></span>"},{"location":"api/ivory.callbacks/#callbacks","text":"","title":"Callbacks"},{"location":"api/ivory.callbacks/#ivorycallbacksresults","text":"CLASS ivory.callbacks.results.Results () Results callback stores training, validation and test results. Each result is ivory.core.collections.Dict type that has index , output , and target array. To get target array of validation, use target = results.val.target Attributes train (Dict) \u2014 Train results. val (Dict) \u2014 Validation results. test (Dict) \u2014 Test results. METHOD mean () \u2192 Results Returns a reduced Results instance aveaged by index . FUNCTION ivory.callbacks.results.concatenate (iterable, callback=None, modes=('val', 'test'), reduction='none') \u2192 Results Returns a concatenated Results. Parameters iterable (iterable of Results) \u2014 Iterable of Results instance. callback (callable, optional) \u2014 Called for each Results . Must take ( mode , index , output , target ) arguments and return a tuple of ('index', output , target ). modes (iterable of str) \u2014 Specify modes to concatenate. reduction (str, optional) \u2014 Reduction. none or mean .","title":"ivory.callbacks.results"},{"location":"api/ivory.callbacks/#ivorycallbacksearly_stopping","text":"DATACLASS ivory.callbacks.early_stopping.EarlyStopping (patience, wait=0) Early stops a training loop when a monitored metric has stopped improving. Parameters patience (int) \u2014 Number of epochs with no improvement after which training will be stopped. Attributes patience (int) \u2014 Number of epochs with no improvement after which training will be stopped. wait (int) \u2014 Number of continuous epochs with no imporovement. Raises EarlyStopped \u2014 When ealry stopping occurs.","title":"ivory.callbacks.early_stopping"},{"location":"api/ivory.core.base/","text":"MODULE ivory.core.base This module provides base classes for Ivory. CLASS ivory.core.base. Base (params=None, **instances) Base class for an entity class such as Client , Experiment , and Run . Parameters params (dict, optional) \u2014 Parameter dictionary to create this instance. **instances \u2014 Member instances. Key is its name and value is the member instance. Attributes params (dict, optional) \u2014 Parameter dictionary to create this instance. id (str) \u2014 Instance ID given by MLFlow Tracking . name (str) \u2014 Instance name. source_name (str) \u2014 Name of the YAML parameter file that is used to create this instance. CLASS ivory.core.base. Creator (params=None, **instances) Creator class to create Run instances. METHOD create_params (args=None, name='run', **kwargs) \u2192 (dict, dict) Returns a tuple of (parameter dictionary, update dictionary). The parameter dictionary is deeply copied from original one, then updated according to the arguments. The update dictionary includes updated parameter only. Parameters args (dict, optional) \u2014 Update dictionary. name (str, optional) \u2014 Run class name in lower case. **kwargs \u2014 Additional update dictionary. Examples Use args for parameters including dots: params, update = experiment.create_params( {'hidden_sizes.0': 100}, fold=3 ) The params is the full parameter dictionary. while the update is a part of params , i.e., update = {'hidden_sizes.0': 100, 'fold': 3} . METHOD create_run (args=None, name='run', **kwargs) Creates a Run instance according to arguments. Parameters args (dict, optional) \u2014 Update dictionary. name (str, optional) \u2014 Run class name in lower case. **kwargs \u2014 Additional update dictionary. Returns (Run) Created Run instance. The parameter for this instance is the returned dictionary from the create_params() function. METHOD create_instance (instance_name, args=None, name='run', **kwargs) Creates an member instance of a Run according to arguments. Parameters instance_name (str) \u2014 Name of a member instance to create. args (dict, optional) \u2014 Update dictionary. name (, optional) \u2014 Run class name in lower case. **kwargs \u2014 Additional update dictionary. Returns Created instance. The parameter for this instance is the returned directory from the create_params() function. CLASS ivory.core.base. Callback (caller, methods) Callback class for the Ivory callback system. CLASS ivory.core.base. CallbackCaller (params=None, **instances) Callback caller class. METHOD create_callbacks () Creates callback functions and store them in a dictionary. CLASS ivory.core.base. Experiment (params=None, **instances) Experimet class is one of the main classes of Ivory library. Basically, one experiment is corresponding to one YAML parameter file that is held in an Experiment instance as a parameter dictionary. This parameter dictionary defines the default parameter values to create Run instances. See Also The base class ivory.core.base.Creator defines some functions to create a Run instance or its member instance. METHOD set_tracker (tracker) Sets a Tracker instance for tracking. Parameters tracker (Tracker) \u2014 Tracker instance. METHOD create_task () Creates a Task instance for multiple runs. See Also For more details, see client.create_task() Multiple Runs in Tutorial. METHOD create_study (args=None, **suggests) Creates a Study instance for hyperparameter tuning. See Also For more details, see client.create_study() Hyperparameter Tuning in Tutorial","title":"Ivory.core.base"},{"location":"api/ivory.core.client/","text":"MODULE ivory.core.client This module provides the Ivory Client class that is one of the main classes of Ivory library. To create an Client instance: import ivory client = ivory.create_client() Here, the current directory becomes the working directory in which experiment YAML files exist. If you want to refer other directory, use: client = ivory.create_client('path/to/working_directory') CLASS ivory.core.client. Client (params=None, **objects) The Ivory Client class. Attributes tracker (Tracker) \u2014 A Tracker instance for tracking run process. tuner (Tuner) \u2014 A Tuner instance for hyperparameter tuning. METHOD create_experiment (name, *args, **kwargs) \u2192 Experiment Creates an Experiment according to the YAML file specified by name . Parameters name (str) \u2014 Experiment name. *args \u2014 Additional parameter files. **kwargs \u2014 Additional parameter files. A YAML file named <name>.yml or <name>.yaml should exist under the working directory. Any additionanl parameter files are added through *args and/or **kwargs . Examples Positional argument style : experiment = client.create_experiment('example', 'study') In this case, study.yml is like this, including the instance name study : study: tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: example.suggest_lr Keyword argument style : experiment = client.create_experiment('example', study='study') In this case, study.yml is like this, omitting the instance name study : tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: example.suggest_lr METHOD create_run (name, args=None, **kwargs) \u2192 Run Creates a Run . Parameters name (str) \u2014 Experiment name. args (dict, optional) \u2014 Parameter dictionary to update the default values of Experiment . **kwargs \u2014 Additional parameters. Examples To update a fold number: run = client.create_run('example', fold=3) If a parameter name includes dots: run = client.create_run('example', {'model.class': 'your.new.Model'}) METHOD create_task (name, run_number=None) \u2192 Task Creates a Task instance for multiple runs. Parameters name (str) \u2014 Experiment name. run_number (int, optional) \u2014 If specified, load an existing task instead of creating a new one. See Also Multiple Runs in Tutorial METHOD create_study (name, args=None, run_number=None, **suggests) \u2192 Study Creates a Study instance for hyperparameter tuning. Parameters name (str) \u2014 Experiment name. args (str or dict) \u2014 Suggest name (str) or parametric optimization (dict). run_number (int, optional) \u2014 If specified, load an existing study instead of creating a new one. **suggests \u2014 Parametric optimization. Examples To use a suggest function: study = client.create_study('example', 'lr') For parametric optimization: study = client.create_study('example', lr=(1e-5, 1e-3)) If a parameter name includes dots: study = client.create_study('example', {'hidden_sizes.0': range(5, 20)}) See Also Hyperparameter Tuning in Tutorial METHOD get_run_id (name, **kwargs) \u2192 str Returns a Run ID. Parameters name (str) \u2014 Experiment name. Examples To get a Run ID of run#4. client.get_run_id('example', run=4) To get a Run ID of task#10. client.get_run_id('example', task=10) GENERATOR get_run_ids (name, **kwargs) \u2192 Iterator[str] Returns an iterator that yields Run IDs. Parameters name (str) \u2014 Experiment name. Examples To get an iterator that yields Run IDs for Runs. client.get_run_id('example', run=[1, 2, 3]) To get an iterator that yields Run IDs for Tasks. client.get_run_id('example', task=range(3, 8)) METHOD get_parent_run_id (name, **kwargs) \u2192 str Returns a parent Run ID of a nested run. Parameters name (str) \u2014 Experiment name. Examples To get a prarent Run ID of run#5. client.get_parent_run_id('example', run=5) GENERATOR get_nested_run_ids (name, **kwargs) \u2192 Iterator[str] Returns an iterator that yields nested Run IDs of parent runs. Parameters name (str) \u2014 Experiment name. Examples To get an iterator that yields Run IDs of runs whose parent is task#2. client.get_nested_run_ids('example', task=2) Multiple parents can be specified. client.get_nested_run_ids('example', task=range(3, 8)) METHOD set_parent_run_id (name, **kwargs) Sets parent Run ID to runs. Parameters name (str) \u2014 Experiment name. Examples To set task#2 as a parant for run#4. client.set_parent_run_id('example', task=2, run=4) Multiple nested runs can be specified. client.set_parent_run_id('example', task=2, run=range(3)) METHOD get_run_name (run_id) \u2192 str Returns a run name ( run#XXX , task#XXX , etc .) for Run ID. Parameters run_id (str) \u2014 Run ID METHOD get_run_name_tuple (run_id) \u2192 (str, int) Returns a run name as a tuple of (run class name, run number). Parameters run_id (str) \u2014 Run ID GENERATOR search_run_ids (name='', run_name='', parent_run_id='', parent_only=False, nested_only=False, exclude_parent=False, best_score_limit=None, **query) \u2192 Iterator[str] Returns an iterator that yields matching Run IDs. Parameters name (str, optional) \u2014 Experiment name pattern for filtering. run_name (str, optional) \u2014 Run name pattern for filtering. parent_run_id (str or iterable of str) \u2014 If specified, search from runs that have the parent id(s). parent_only (bool, optional) \u2014 If True, search from parent runs. nested_only (bool, optional) \u2014 If True, search from nested runs. exclude_parent (bool, optional) \u2014 If True, skip parent runs. best_score_limit (Union[float, NoneType], optional) \u2014 Yields runs with the best score better than this value. **query \u2014 Key-value pairs for filtering. GENERATOR search_parent_run_ids (name='', **query) \u2192 Iterator[str] Returns an iterator that yields matching parent Run IDs. Parameters name (str, optional) \u2014 Experiment name pattern for filtering. **query \u2014 Key-value pairs for filtering. GENERATOR search_nested_run_ids (name='', **query) \u2192 Iterator[str] Returns an iterator that yields matching nested Run IDs. Parameters name (str, optional) \u2014 Experiment name pattern for filtering. **query \u2014 Key-value pairs for filtering. METHOD set_terminated (name, status=None, **kwargs) Sets runs' status to terminated. Parameters status (Union[str, NoneType], optional) \u2014 A string value of mlflow.entities.RunStatus . Defaults to \u201cFINISHED\u201d. Examples To terminate a run: client.set_terminated('example', run=5) To kill multiple runs: client.set_terminated('example', 'KILLED', run=[3, 5, 7]) METHOD set_terminated_all (name='') Sets all runs' status to terminated. Parameters status \u2014 A string value of mlflow.entities.RunStatus . Defaults to \u201cFINISHED\u201d. Examples To terminate all of the runs of the example experiment: client.set_terminated_all('example') To terminate all of the runs globally: client.set_terminated_all() METHOD load_params (run_id) \u2192 Dict[str, Any] Returns a parameter dictionary loaded from MLFlow Tracking. Parameters run_id (str) \u2014 Run ID for a run to be loaded. METHOD load_run (run_id, mode='test') \u2192 Run Returns a Run instance created using parameters loaded from MLFlow Tracking. Parameters run_id (str) \u2014 Run ID for a run to be loaded. mode (str, optional) \u2014 Mode name: 'current' , 'best' , or 'test' . Default is 'test' . METHOD load_run_by_name (name, mode='test', **kwargs) \u2192 Run Returns a Run instance created using parameters loaded from MLFlow Tracking. Parameters name (str) \u2014 Experiment name pattern for filtering. mode (str, optional) \u2014 Mode name: 'current' , 'best' , or 'test' . Examples To load run#4 of the example experiment. client.load_run_by_name('example', run=4) METHOD load_instance (run_id, instance_name, mode='test') \u2192 Any Returns a member of a Run created using parameters loaded from MLFlow Tracking. Parameters run_id (str) \u2014 Run ID for a run to be loaded. instance_name (str) \u2014 Instance name. mode (str, optional) \u2014 Mode name: 'current' , 'best' , or 'test' . METHOD load_results (run_ids, callback=None, reduction='none', verbose=True) Loads results from multiple runs and concatenates them. Parameters run_ids (Union[str, Iterable[str]]) \u2014 Multiple run ids to load. callback (callable) \u2014 Callback function for each run. This function must take a (index, output, target) and return a tuple with the same signature. verbose (bool, optional) \u2014 If True , tqdm progress bar is displayed. Returns (Results) A concatenated results instance. METHOD remove_deleted_runs (name='') Removes deleted runs from a local file system. Parameters name (str, optional) \u2014 Experiment name pattern for filtering. Returns (int) Number of removed runs. FUNCTION ivory.core.client. create_client (directory='', name='client', tracker=True, tuner=True) Creates an Ivory Client instance. Parameters directory (str, optional) \u2014 A working directory. If a YAML file specified by the name parameter exists, the file is loaded to configure the client. In addition, this directory is automatically inserted to sys.path . name (str, optional) \u2014 A YAML config file name. tracker (bool, optional) \u2014 If True, the client instance has a tracker. tuner (bool, optional) \u2014 If True, the client instance has a tuner. Returns (Client) An created client. Note If tracker is True (default value), a mlruns directory is made under the working directory by MLFlow Tracking.","title":"Ivory.core.client"},{"location":"api/ivory.core.data/","text":"MODULE ivory.core.data Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . Basically, you only need to define a class that is a subclass of Data and use original Dataset and Datasets . An example parameter YAML file is: datasets: data: class: your.Data # a subclass of ivory.core.data.Data dataset: fold: 0 But if you need, you can define your Dataset and/or Datasets . datasets: class: your.Datasets # a subclass of ivory.core.data.Datasets data: class: your.Data # a subclass of ivory.core.data.Data dataset: def: your.Dataset # a subclass of ivory.core.data.Dataset fold: 0 The DataLoaders is used internally by ivory.torch.trainer.Trainer or ivory.nnabla.trainer.Trainer classes to yield a minibatch in training loop. Note Use a 'def' key for dataset instead of 'class' . See Tutorial DATACLASS ivory.core.data. Data () Base class to provide data to a Dataset instance. To make a subclass, you need to assign the following attributes in the Data.init() : index : Index of samples. input : Input data. target : Target data. fold : Fold number. METHOD init () Initializes index , input , target , and fold attributes. The fold number of test data must be -1 . Examples For regression def init(self): self.index = np.range(100) self.input = np.random.randn(100, 5) self.target = np.random.randn(100) self.fold = np.random.randint(5) self.fold[80:] = -1 For classification def init(self): self.index = np.range(100) self.input = np.random.randn(100, 5) self.target = np.random.randint(100, 10) self.fold = np.random.randint(5) self.fold[80:] = -1 METHOD get_index (mode, fold) \u2192 ndarray Returns index according to the mode and fold. Parameters mode (str) \u2014 Mode name: 'train' , 'val' , or 'test' . fold (int) \u2014 Fold number. METHOD get_input (index) Returns input data. By default, this function returns self.input[index] . You can override this behavior in a subclass. Parameters index (int or 1D-array) \u2014 Index. METHOD get_target (index) Returns target data. By default, this function returns self.target[index] . You can override this behavior in a subclass. Parameters index (int or 1D-array) \u2014 Index. METHOD get (index) \u2192 tuple Returns a tuple of ( index , input , target ) according to the index. Parameters index (int or 1D-array) \u2014 Index. DATACLASS ivory.core.data. Dataset (data, mode, fold, transform=None) Dataset class represents a set of data for a mode and fold. Parameters data (Data) \u2014 Data instance that provides data to Dataset instance. mode (str) \u2014 Mode name: 'train' , 'val' , or 'test' . fold (int) \u2014 Fold number. transform (callable, optional) \u2014 Callable to transform the data. The transform must take 2 or 3 arguments: ( mode , input , optional target ) and return a tuple of ( input , optional target ). METHOD init () Called at initialization. You can add any process in a subclass. METHOD get (index=None) \u2192 tuple Returns a tuple of ( index , input , target ) according to the index. If index is None , reutrns all of the data. Parameters index (int or 1D-array, optional) \u2014 Index. METHOD sample (n=0, frac=0.0) \u2192 tuple Returns a tuple of ( index , input , target ) randomly sampled. Parameters n (int, optional) \u2014 Size of sampling. frac (float, optional) \u2014 Ratio of sampling. DATACLASS ivory.core.data. Datasets (data, dataset, fold) Dataset class represents a collection of Dataset for a fold. Parameters data (Data) \u2014 Data instance that provides data to Dataset instance. dataset (Callable) \u2014 Dataset factory. fold (int) \u2014 Fold number. Attributes train (Dataset) \u2014 Train dataset. val (Dataset) \u2014 Validation dataset. test (Dataset) \u2014 Test dataset. fold (int) \u2014 Fold number. CLASS ivory.core.data. DataLoaders (datasets, batch_size, shuffle) DataLoaders class represents a collection of DataLoader . Parameters datasets (Datasets) \u2014 Datasets instance. batch_size (int) \u2014 Batch_size shuffle (bool) \u2014 If True, train dataset is shuffled. Validation and test dataset are not shuffled regardless of this value. Attributes train (Dataset) \u2014 Train dataset. val (Dataset) \u2014 Validation dataset. test (Dataset) \u2014 Test dataset.","title":"Ivory.core.data"},{"location":"api/ivory.core.run/","text":"MODULE ivory.core.run This module provides the Run class that is one of the main classes of Ivory library. In addition, Task and Study classes are defined, which manages multiple runs for cross validation, hyperparameter tuning, and so on. To create an Run instance: import ivory client = ivory.create_run('example') The argument example is an experiment name in which the created run is included. Ivory assumes that example.yml or example.yaml file exists under the client's working directory. You can comfirm the client's working directory by: os.path.dirname(client.source_name) One you got a Run instance. call Run.start() to start training. For test, call Run.start('test') instead. Also, you can perform traing and test by one step with Run.start('both') . CLASS ivory.core.run. Run (params=None, **instances) Run class is one of the main classes of Ivory library. METHOD set_tracker (tracker, name) Sets tracker for tracking. By setting a tracker, a Run instance can be a run of MLFlow Tracking at the same time. MLFlow Tracking gives the Run ID and name for this instance. Parameters tracker (Tracker) \u2014 Tracker instance. METHOD start (mode='train') Starts traing and/or test. Parameters mode (str, optional) \u2014 Mode name: 'train' , 'test' , or 'both' . METHOD state_dict () \u2192 dict Returns a state dictionary for all of member instances. METHOD load_state_dict (state_dict) Loads a state dictionary to all of member instances. Parameters state_dict (dict) \u2014 state dictionary for all of member instances. METHOD save (directory) Saves member instances. Parameters directory (str) \u2014 Directory where member instances are saved. METHOD load (directory) \u2192 Dict[str, Any] Loads member instances. Parameters directory (str) \u2014 Directory where member instances have been saved. CLASS ivory.core.run. Task (params=None, **instances) Task class creates a parent run that generates multiple runs. METHOD create_run (args, **kwargs) Create a nested run according to arguments Parameters args (dict, optional) \u2014 Update dictionary. **kwargs \u2014 Additional update dictionary. Returns (Run) Created nested Run instance. GENERATOR product (params=None, repeat=1, **kwargs) \u2192 Iterator[ivory.core.run.Run] Makes a product iterator. This iterator returns runs from cartesian product of input parameters. Parameters params (dict, optional) \u2014 Parameter range. Key is a parameter name and value is an iterable of parameter's value. repeat (int, optional) \u2014 Number of repeatation. **kwargs \u2014 Additional parameter range. See Also Product section in Multiple Runs Tutorial GENERATOR chain (params=None, use_best_param=True, **kwargs) \u2192 Iterator[ivory.core.run.Run] Makes a chain iterator. This iterator returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. Parameters params (dict, optional) \u2014 Parameter range. Key is a parameter name and value is an iterable of parameter's value. use_best_param: If True (default), the parameter that got the best score is used during the following iterations. **kwargs \u2014 Additional parameter range. See Also Chain section in Multiple Runs Tutorial CLASS ivory.core.run. Study (params=None, **instances) Study class create a parent run to manage hyperparameter tuning. METHOD optimize (suggest_name='', **kwargs) Performs parameter optimizations using Optuna. Parameters suggest_name (str, optional) \u2014 Name of suggest function. **kwargs \u2014 Key-iterable pairs for parametric optimization. See Also Hyperparameter Tuning in Tutorial","title":"Ivory.core.run"},{"location":"tutorial/callback/","text":"Callback System Basics Ivory implements a simple but powerful callback system. Here is the list of callback functions in the order of invocation: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.08s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have an only `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.09s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.09s ) CallbackCaller(num_instances=1) The number of registered instances is 1. list(caller) [5] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.09s ) ['simple'] Then call CallbackCaller.create_callbacks() to build a callback network. caller.create_callbacks() caller [6] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.10s ) CallbackCaller(num_instances=13) The number of instances increased up to 13. list(caller) [7] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.10s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Let's inspect some callback functions. caller.on_init_begin [8] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.10s ) Callback([]) This is an empty callback because the caller has no instances that define the on_init_begin() . On the other hand, caller.on_fit_begin [9] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.11s ) Callback(['simple']) The simple instance is registered as a receiver of the on_fit_begin() . We can call this. caller.on_fit_begin() [10] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.11s ) on_fit_begin is called from id=1132642829000 id(caller) [11] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.12s ) 1132642829000 This caller-receiver network among arbitrary instance collection builds a complex machine learning workflow. Run class is a subclass of the CallbackCaller and performs more library-specific process. We uses Run below. Example Callback: Results To work with the Results callback, we create a set of data and a model. For more details about the following code, see Creating Instance section. import yaml from ivory.core.instance import create_instance # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') [12] 2020-06-01 16:02:03 ( 7.00ms ) python3 ( 6.12s ) The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-06-01 16:02:03 ( 5.00ms ) python3 ( 6.13s ) Results([]) import ivory.core.run run = ivory.core.run.Run( datasets=datasets, model=model, results=results ) run.create_callbacks() run [14] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.13s ) Run(num_instances=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 6.14s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. Results.step() records the current index, output, and target. import torch # For simplicity, just one epoch with some batches. run.on_train_begin() dataset = run.datasets.train for k in range(3): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. dataset = run.datasets.val for k in range(2): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 6.15s ) Results(['train', 'val']) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. results.train [17] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.15s ) Dict(['index', 'output', 'target']) results.train.index # The length is 4 x 3. [18] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.16s ) array([ 0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16]) results.val.index # The length is 4 x 2. [19] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.16s ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output [20] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.16s ) array([[-0.00151214], [-0.00800011], [ 0.00620469], [-0.00066443], [ 0.01552606], [-0.00894655], [-0.00894655], [ 0.03874946]], dtype=float32) results.val.target [21] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.17s ) array([[ 2.0068963], [11.300791 ], [11.222835 ], [15.203695 ], [13.074032 ], [ 5.0099564], [ 9.623201 ], [ 3.5006502]], dtype=float32) Other Callback There are several callback such as Metrics , Monitor , etc. We will learn about them in next Training a Model tutorial.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callback System</span></span></span>"},{"location":"tutorial/callback/#callback-system","text":"","title":"Callback System"},{"location":"tutorial/callback/#basics","text":"Ivory implements a simple but powerful callback system. Here is the list of callback functions in the order of invocation: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.08s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have an only `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.09s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.09s ) CallbackCaller(num_instances=1) The number of registered instances is 1. list(caller) [5] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.09s ) ['simple'] Then call CallbackCaller.create_callbacks() to build a callback network. caller.create_callbacks() caller [6] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.10s ) CallbackCaller(num_instances=13) The number of instances increased up to 13. list(caller) [7] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.10s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Let's inspect some callback functions. caller.on_init_begin [8] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.10s ) Callback([]) This is an empty callback because the caller has no instances that define the on_init_begin() . On the other hand, caller.on_fit_begin [9] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.11s ) Callback(['simple']) The simple instance is registered as a receiver of the on_fit_begin() . We can call this. caller.on_fit_begin() [10] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.11s ) on_fit_begin is called from id=1132642829000 id(caller) [11] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.12s ) 1132642829000 This caller-receiver network among arbitrary instance collection builds a complex machine learning workflow. Run class is a subclass of the CallbackCaller and performs more library-specific process. We uses Run below.","title":"Basics"},{"location":"tutorial/callback/#example-callback-results","text":"To work with the Results callback, we create a set of data and a model. For more details about the following code, see Creating Instance section. import yaml from ivory.core.instance import create_instance # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') [12] 2020-06-01 16:02:03 ( 7.00ms ) python3 ( 6.12s ) The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-06-01 16:02:03 ( 5.00ms ) python3 ( 6.13s ) Results([]) import ivory.core.run run = ivory.core.run.Run( datasets=datasets, model=model, results=results ) run.create_callbacks() run [14] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.13s ) Run(num_instances=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 6.14s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. Results.step() records the current index, output, and target. import torch # For simplicity, just one epoch with some batches. run.on_train_begin() dataset = run.datasets.train for k in range(3): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. dataset = run.datasets.val for k in range(2): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-06-01 16:02:03 ( 9.00ms ) python3 ( 6.15s ) Results(['train', 'val']) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. results.train [17] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.15s ) Dict(['index', 'output', 'target']) results.train.index # The length is 4 x 3. [18] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.16s ) array([ 0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16]) results.val.index # The length is 4 x 2. [19] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.16s ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output [20] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.16s ) array([[-0.00151214], [-0.00800011], [ 0.00620469], [-0.00066443], [ 0.01552606], [-0.00894655], [-0.00894655], [ 0.03874946]], dtype=float32) results.val.target [21] 2020-06-01 16:02:03 ( 3.00ms ) python3 ( 6.17s ) array([[ 2.0068963], [11.300791 ], [11.222835 ], [15.203695 ], [13.074032 ], [ 5.0099564], [ 9.623201 ], [ 3.5006502]], dtype=float32)","title":"Example Callback: Results"},{"location":"tutorial/callback/#other-callback","text":"There are several callback such as Metrics , Monitor , etc. We will learn about them in next Training a Model tutorial.","title":"Other Callback"},{"location":"tutorial/cli/","text":"Command Line Interface If you define data and model, and prepare a YAML parameter file, you don't need to write another Python script code to invoke runs. Ivory's command line interface can do it. For cross validation: $ ivory run torch fold=0-4 For grid search: $ ivory run torch dropout=0-0.5:5 hidden_sizes.0=10-20-2 For optimization using a suggest function: $ ivory optimize torch lr For parametric optimization: $ ivory optimize torch lr=1e-5_1e-3.log Right-hand side string for each parameter creates a Range instance to determine the range of parameters.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Command Line Interface</span></span></span>"},{"location":"tutorial/cli/#command-line-interface","text":"If you define data and model, and prepare a YAML parameter file, you don't need to write another Python script code to invoke runs. Ivory's command line interface can do it. For cross validation: $ ivory run torch fold=0-4 For grid search: $ ivory run torch dropout=0-0.5:5 hidden_sizes.0=10-20-2 For optimization using a suggest function: $ ivory optimize torch lr For parametric optimization: $ ivory optimize torch lr=1e-5_1e-3.log Right-hand side string for each parameter creates a Range instance to determine the range of parameters.","title":"Command Line Interface"},{"location":"tutorial/core/","text":"Ivory Core Entities Client Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [3] 2020-06-01 16:02:03 ( 7.00ms ) python3 ( 6.23s ) Client(num_instances=2) list(client) [4] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.24s ) ['tracker', 'tuner'] The first object is a Tracker instance that connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna . Show files in the working directory examples . import os os.listdir('examples') [5] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.24s ) ['base.yml', 'client.yml', 'data.yml', 'data2.yml', 'lgb.yml', 'mlruns', 'nnabla.yml', 'rectangle', 'rfr.yml', 'ridge.yml', 'study.yml', 'tensorflow.yml', 'torch.yml', 'torch2.yml'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 7 client.yml client: tracker: tuner: Note If you don't need any customization, the YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and tuner. (So, the above file is unnecessary.) If you don't need a tracker and/or tuner, for example in debugging, use ivory.create_client(tracker=False, tuner=False) . Experiment Client.create_experiment() creates an Experiment instance. If the Client instance has a tracker , an experiment of MLFlow Tracking is also created at the same time if it hasn't existed yet. By clicking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [6] 2020-06-01 16:02:03 ( 12.0ms ) python3 ( 6.25s ) [I 200601 16:02:03 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_instances=1) The ID for this experiment was given by MLFlow Tracking. The Client.create_experiment() loads a YAML file corresponding to the first argument from the working directory. File 8 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [7] 2020-06-01 16:02:03 ( 5.00ms ) python3 ( 6.26s ) {'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'fold': 0, 'class': 'ivory.core.data.Datasets'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [20, 30]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'loss': 'mse', 'batch_size': 10, 'epochs': 10, 'shuffle': True, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file we read before, but has been slightly changed. Run and experiment keys are inserted. Run name is assigned by Ivory Client. Experiment ID and Run ID are assigned by MLFlow Tracking. Default classes are specified, for example the ivory.torch.trainer.Trainer class for a trainer instance. Run After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below. Default parameters Calling without arguments creates a run with default parameters. run = experiment.create_run() run [8] 2020-06-01 16:02:03 ( 35.0ms ) python3 ( 6.29s ) Run(id='27f53a35efca4dc2a613e6b126056967', name='run#0', num_instances=12) Here, the ID for this run is assigned by MLFlow Tracking. On the other hand, the name is assigned by Ivory as the form of \" (run class name in lower case)#(run number) \". Simple literal (int, float, str) Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.datasets.fold [9] 2020-06-01 16:02:03 ( 42.0ms ) python3 ( 6.34s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.datasets.fold [10] 2020-06-01 16:02:03 ( 134ms ) python3 ( 6.47s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-112-db3b6dd1af57> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.datasets.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 103 [`create_params()`](#ivory.core.base.Creator.create_params) function. 104 \"\"\" --> 105 params, args = self.create_params(args, name, **kwargs) 106 run = instance.create_base_instance(params, name, self.source_name) 107 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 87 params.update(default.get(name)) 88 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 89 utils.params.update_dict(params[name], update) 90 return params, args 91 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict): List A list parameter can be overwritten by passing a new list. Off course you can change the length of the list. The original hidden_sizes was [10, 20] . Modify it. run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [11] 2020-06-01 16:02:04 ( 125ms ) python3 ( 6.59s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [12] 2020-06-01 16:02:04 ( 45.0ms ) python3 ( 6.64s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this function is unnecessary? This function is prepared for hyperparameter tuning . In some case, you may want to change elements of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [13] 2020-06-01 16:02:04 ( 46.0ms ) python3 ( 6.69s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) ) Duplicated parameter name Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [14] 2020-06-01 16:02:04 ( 47.0ms ) python3 ( 6.73s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all. Scoping by dots To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [15] 2020-06-01 16:02:04 ( 47.0ms ) python3 ( 6.78s ) (8, 20) Object type Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [16] 2020-06-01 16:02:04 ( 48.0ms ) python3 ( 6.83s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [17] 2020-06-01 16:02:04 ( 50.0ms ) python3 ( 6.88s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimum effort. Creating a run from a client In the above examples, we created runs using the experiment.create_run() . In addition, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 1 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 2 run = client.create_run('torch', fold=3)","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Core Entities</span></span></span>"},{"location":"tutorial/core/#ivory-core-entities","text":"","title":"Ivory Core Entities"},{"location":"tutorial/core/#client","text":"Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [3] 2020-06-01 16:02:03 ( 7.00ms ) python3 ( 6.23s ) Client(num_instances=2) list(client) [4] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.24s ) ['tracker', 'tuner'] The first object is a Tracker instance that connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna . Show files in the working directory examples . import os os.listdir('examples') [5] 2020-06-01 16:02:03 ( 4.00ms ) python3 ( 6.24s ) ['base.yml', 'client.yml', 'data.yml', 'data2.yml', 'lgb.yml', 'mlruns', 'nnabla.yml', 'rectangle', 'rfr.yml', 'ridge.yml', 'study.yml', 'tensorflow.yml', 'torch.yml', 'torch2.yml'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 7 client.yml client: tracker: tuner: Note If you don't need any customization, the YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and tuner. (So, the above file is unnecessary.) If you don't need a tracker and/or tuner, for example in debugging, use ivory.create_client(tracker=False, tuner=False) .","title":"Client"},{"location":"tutorial/core/#experiment","text":"Client.create_experiment() creates an Experiment instance. If the Client instance has a tracker , an experiment of MLFlow Tracking is also created at the same time if it hasn't existed yet. By clicking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [6] 2020-06-01 16:02:03 ( 12.0ms ) python3 ( 6.25s ) [I 200601 16:02:03 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_instances=1) The ID for this experiment was given by MLFlow Tracking. The Client.create_experiment() loads a YAML file corresponding to the first argument from the working directory. File 8 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [7] 2020-06-01 16:02:03 ( 5.00ms ) python3 ( 6.26s ) {'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'fold': 0, 'class': 'ivory.core.data.Datasets'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [20, 30]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'loss': 'mse', 'batch_size': 10, 'epochs': 10, 'shuffle': True, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file we read before, but has been slightly changed. Run and experiment keys are inserted. Run name is assigned by Ivory Client. Experiment ID and Run ID are assigned by MLFlow Tracking. Default classes are specified, for example the ivory.torch.trainer.Trainer class for a trainer instance.","title":"Experiment"},{"location":"tutorial/core/#run","text":"After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below.","title":"Run"},{"location":"tutorial/core/#default-parameters","text":"Calling without arguments creates a run with default parameters. run = experiment.create_run() run [8] 2020-06-01 16:02:03 ( 35.0ms ) python3 ( 6.29s ) Run(id='27f53a35efca4dc2a613e6b126056967', name='run#0', num_instances=12) Here, the ID for this run is assigned by MLFlow Tracking. On the other hand, the name is assigned by Ivory as the form of \" (run class name in lower case)#(run number) \".","title":"Default parameters"},{"location":"tutorial/core/#simple-literal-int-float-str","text":"Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.datasets.fold [9] 2020-06-01 16:02:03 ( 42.0ms ) python3 ( 6.34s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.datasets.fold [10] 2020-06-01 16:02:03 ( 134ms ) python3 ( 6.47s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-112-db3b6dd1af57> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.datasets.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 103 [`create_params()`](#ivory.core.base.Creator.create_params) function. 104 \"\"\" --> 105 params, args = self.create_params(args, name, **kwargs) 106 run = instance.create_base_instance(params, name, self.source_name) 107 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 87 params.update(default.get(name)) 88 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 89 utils.params.update_dict(params[name], update) 90 return params, args 91 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict):","title":"Simple literal (int, float, str)"},{"location":"tutorial/core/#list","text":"A list parameter can be overwritten by passing a new list. Off course you can change the length of the list. The original hidden_sizes was [10, 20] . Modify it. run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [11] 2020-06-01 16:02:04 ( 125ms ) python3 ( 6.59s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [12] 2020-06-01 16:02:04 ( 45.0ms ) python3 ( 6.64s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this function is unnecessary? This function is prepared for hyperparameter tuning . In some case, you may want to change elements of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [13] 2020-06-01 16:02:04 ( 46.0ms ) python3 ( 6.69s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) )","title":"List"},{"location":"tutorial/core/#duplicated-parameter-name","text":"Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [14] 2020-06-01 16:02:04 ( 47.0ms ) python3 ( 6.73s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all.","title":"Duplicated parameter name"},{"location":"tutorial/core/#scoping-by-dots","text":"To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [15] 2020-06-01 16:02:04 ( 47.0ms ) python3 ( 6.78s ) (8, 20)","title":"Scoping by dots"},{"location":"tutorial/core/#object-type","text":"Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [16] 2020-06-01 16:02:04 ( 48.0ms ) python3 ( 6.83s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [17] 2020-06-01 16:02:04 ( 50.0ms ) python3 ( 6.88s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimum effort.","title":"Object type"},{"location":"tutorial/core/#creating-a-run-from-a-client","text":"In the above examples, we created runs using the experiment.create_run() . In addition, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 1 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 2 run = client.create_run('torch', fold=3)","title":"Creating a run from a client"},{"location":"tutorial/data/","text":"Set of Data classes Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain them. File 5 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1) Data Class First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.89s ) Data(train_size=800, test_size=200) In Data.init() , we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. Data.get() returns a tuple of ( index , input , target ). This function is called from Dataset instances when the dataset is indexed. data.get(0) # Integer index. [3] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.90s ) (0, array([3.0982542, 1.4571707], dtype=float32), array([4.5988407], dtype=float32)) data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.90s ) (array([ 0, 10, 20]), array([[3.0982542, 1.4571707], [4.3325844, 3.4936657], [1.4830701, 3.4862447]], dtype=float32), array([[ 4.5988407], [15.210848 ], [ 4.9986 ]], dtype=float32)) Dataset Class An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset here instead of defining a subclass. Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.91s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.91s ) Dataset(mode='val', num_samples=200) As the Data , the Dataset has init() without any arguments and returned value. You can define any code to modify data. To get data from an Dataset instance, use normal indexing dataset[0] # Integer index. [7] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.92s ) (0, array([3.0982542, 1.4571707], dtype=float32), array([4.5988407], dtype=float32)) dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.92s ) (array([ 0, 16, 33]), array([[3.0982542, 1.4571707], [4.867591 , 1.3126242], [1.9519043, 2.3075185]], dtype=float32), array([[4.5988407], [6.2698073], [4.6178045]], dtype=float32)) index, *_ = dataset[:] # Get all data. print(len(index)) index[:10] [9] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.93s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the Data instance according to the mode and fold. The Dataset takes an optional and callable argument: transform . def transform(mode: str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.93s ) (0, array([6.1965084, 2.9143414], dtype=float32), array([9.197681], dtype=float32)) 2 * dataset[0][1], 2 * dataset[0][2] [11] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.93s ) (array([6.1965084, 2.9143414], dtype=float32), array([9.197681], dtype=float32)) Usually, we don't instantiate the Dataset directly. Instead, the Datasets class create dataset instances. Datasets Class An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.94s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset itself or any other function that returns a Dataset instance. for mode, dataset in datasets.items(): print(mode, dataset) [13] 2020-06-01 16:02:04 ( 7.00ms ) python3 ( 6.95s ) train Dataset(mode='train', num_samples=600) val Dataset(mode='val', num_samples=200) test Dataset(mode='test', num_samples=200) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.95s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets , we can easily split a whole data stored in a Data instance into three train, validation, and test dataset. DataLoaders Class The DataLoaders class is used internally by ivory.torch.trainer.Trainer or ivory.nnabla.trainer.Trainer classes to yield a minibatch in training loop. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(datasets, batch_size=4, shuffle=True) dataloaders [15] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.96s ) DataLoaders(['train', 'val', 'test']) for mode, dataloader in dataloaders.items(): print(mode, dataloader) [16] 2020-06-01 16:02:04 ( 10.0ms ) python3 ( 6.97s ) train <torch.utils.data.dataloader.DataLoader object at 0x00000107B6D92E08> val <torch.utils.data.dataloader.DataLoader object at 0x00000107B6D92B48> test <torch.utils.data.dataloader.DataLoader object at 0x00000107B6D92B08> next(iter(dataloaders.train)) # Shuffled [17] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.97s ) [tensor([626, 618, 44, 792], dtype=torch.int32), tensor([[1.7760, 3.0362], [4.1682, 3.4665], [3.0888, 3.6565], [4.5250, 2.5966]]), tensor([[ 5.3801], [14.5551], [11.3598], [11.6566]])] next(iter(dataloaders.val)) # Not shuffled, regardless of `shuffle` argument [18] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.98s ) [tensor([ 1, 5, 8, 14], dtype=torch.int32), tensor([[1.1789, 1.7669], [2.1315, 3.6630], [2.7098, 4.0919], [3.5862, 3.1368]]), tensor([[ 2.0069], [ 7.6866], [11.3008], [11.2228]])] next(iter(dataloaders.test)) # Not shuffled, regardless of `shuffle` argument [19] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.98s ) [tensor([ 9, 11, 19, 23], dtype=torch.int32), tensor([[3.5803, 2.4080], [2.4829, 4.4213], [3.2646, 1.4327], [1.8463, 3.9107]]), tensor([[nan], [nan], [nan], [nan]])]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Set of Data classes</span></span></span>"},{"location":"tutorial/data/#set-of-data-classes","text":"Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain them. File 5 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1)","title":"Set of Data classes"},{"location":"tutorial/data/#data-class","text":"First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.89s ) Data(train_size=800, test_size=200) In Data.init() , we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. Data.get() returns a tuple of ( index , input , target ). This function is called from Dataset instances when the dataset is indexed. data.get(0) # Integer index. [3] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.90s ) (0, array([3.0982542, 1.4571707], dtype=float32), array([4.5988407], dtype=float32)) data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.90s ) (array([ 0, 10, 20]), array([[3.0982542, 1.4571707], [4.3325844, 3.4936657], [1.4830701, 3.4862447]], dtype=float32), array([[ 4.5988407], [15.210848 ], [ 4.9986 ]], dtype=float32))","title":"Data Class"},{"location":"tutorial/data/#dataset-class","text":"An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset here instead of defining a subclass. Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.91s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.91s ) Dataset(mode='val', num_samples=200) As the Data , the Dataset has init() without any arguments and returned value. You can define any code to modify data. To get data from an Dataset instance, use normal indexing dataset[0] # Integer index. [7] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.92s ) (0, array([3.0982542, 1.4571707], dtype=float32), array([4.5988407], dtype=float32)) dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.92s ) (array([ 0, 16, 33]), array([[3.0982542, 1.4571707], [4.867591 , 1.3126242], [1.9519043, 2.3075185]], dtype=float32), array([[4.5988407], [6.2698073], [4.6178045]], dtype=float32)) index, *_ = dataset[:] # Get all data. print(len(index)) index[:10] [9] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.93s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the Data instance according to the mode and fold. The Dataset takes an optional and callable argument: transform . def transform(mode: str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.93s ) (0, array([6.1965084, 2.9143414], dtype=float32), array([9.197681], dtype=float32)) 2 * dataset[0][1], 2 * dataset[0][2] [11] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.93s ) (array([6.1965084, 2.9143414], dtype=float32), array([9.197681], dtype=float32)) Usually, we don't instantiate the Dataset directly. Instead, the Datasets class create dataset instances.","title":"Dataset Class"},{"location":"tutorial/data/#datasets-class","text":"An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.94s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset itself or any other function that returns a Dataset instance. for mode, dataset in datasets.items(): print(mode, dataset) [13] 2020-06-01 16:02:04 ( 7.00ms ) python3 ( 6.95s ) train Dataset(mode='train', num_samples=600) val Dataset(mode='val', num_samples=200) test Dataset(mode='test', num_samples=200) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.95s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets , we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"Datasets Class"},{"location":"tutorial/data/#dataloaders-class","text":"The DataLoaders class is used internally by ivory.torch.trainer.Trainer or ivory.nnabla.trainer.Trainer classes to yield a minibatch in training loop. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(datasets, batch_size=4, shuffle=True) dataloaders [15] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 6.96s ) DataLoaders(['train', 'val', 'test']) for mode, dataloader in dataloaders.items(): print(mode, dataloader) [16] 2020-06-01 16:02:04 ( 10.0ms ) python3 ( 6.97s ) train <torch.utils.data.dataloader.DataLoader object at 0x00000107B6D92E08> val <torch.utils.data.dataloader.DataLoader object at 0x00000107B6D92B48> test <torch.utils.data.dataloader.DataLoader object at 0x00000107B6D92B08> next(iter(dataloaders.train)) # Shuffled [17] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.97s ) [tensor([626, 618, 44, 792], dtype=torch.int32), tensor([[1.7760, 3.0362], [4.1682, 3.4665], [3.0888, 3.6565], [4.5250, 2.5966]]), tensor([[ 5.3801], [14.5551], [11.3598], [11.6566]])] next(iter(dataloaders.val)) # Not shuffled, regardless of `shuffle` argument [18] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.98s ) [tensor([ 1, 5, 8, 14], dtype=torch.int32), tensor([[1.1789, 1.7669], [2.1315, 3.6630], [2.7098, 4.0919], [3.5862, 3.1368]]), tensor([[ 2.0069], [ 7.6866], [11.3008], [11.2228]])] next(iter(dataloaders.test)) # Not shuffled, regardless of `shuffle` argument [19] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 6.98s ) [tensor([ 9, 11, 19, 23], dtype=torch.int32), tensor([[3.5803, 2.4080], [2.4829, 4.4213], [3.2646, 1.4327], [1.8463, 3.9107]]), tensor([[nan], [nan], [nan], [nan]])]","title":"DataLoaders Class"},{"location":"tutorial/instance/","text":"Creating Instances In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. Basic idea A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory exactly uses this relationship. from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 7.00s ) Data(train_size=834, test_size=166) Here, the create_instance() requires the second argument name to specify a key because the first argument params can have multiple keys. Note that we added a n_splits parameter that is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) # 5-fold for train and 1-fold for test. [3] 2020-06-01 16:02:04 ( 3.00ms ) python3 ( 7.00s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing a dictionary easily, we use PyYAML library in this tutorial. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.01s ) Data(train_size=834, test_size=166) Hierarchal Structure Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have a hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.01s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Next, create a Datasets instance. doc = \"\"\" datasets: class: ivory.core.data.Datasets data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 \"\"\" create(doc, 'datasets') [6] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.02s ) Datasets(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Remember that the argument dataset for the Datasets class is not an instance but a callable that returns a Dataset instance (See the previous section ). To describe this behavior, we use a new def key to create a callable instead of a class key. Default Class In the above example, the two lines using an Ivory's original class seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-06-01 16:02:04 ( 78.0ms ) python3 ( 7.10s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: nnabla results --- ivory.callbacks.results.BatchResults metrics --- ivory.nnabla.metrics.Metrics trainer --- ivory.nnabla.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator metrics --- ivory.sklearn.metrics.Metrics Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. import torch.utils.data doc = \"\"\" library: torch # Use default class for PyTorch. datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') isinstance(datasets.train, torch.utils.data.Dataset) [8] 2020-06-01 16:02:04 ( 7.00ms ) python3 ( 7.10s ) True Default Value If a callable has arguments with default value, you can use __default__ to get the default value from the callable signature. doc = \"\"\" datasets: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') datasets.data.n_splits [9] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.11s ) 4 Positional Arguments Do you know the name of the first argument of numpy.array() ? import numpy as np print(np.array.__doc__[:200]) [10] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.11s ) array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0) Create an array. Parameters ---------- object : array_like An array, any object exposing the array inter It's object . But do you want to write like this? doc = \"\"\" x: class: numpy.array # Or `call` instead of `class`. object: [1, 2, 3] \"\"\" create(doc, 'x') [11] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.12s ) array([1, 2, 3]) This is inconvenient and ugly. Use underscore-notation : doc = \"\"\" x: class: numpy.array _: [1, 2, 3] \"\"\" create(doc, 'x') [12] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.12s ) array([1, 2, 3]) The second argument of numpy.array() is dtype . You can also use double underscore , which is unpacked. doc = \"\"\" x: call: numpy.array __: [[1, 2, 3], 'float'] \"\"\" create(doc, 'x') [13] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.12s ) array([1., 2., 3.])","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Creating Instances</span></span></span>"},{"location":"tutorial/instance/#creating-instances","text":"In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning.","title":"Creating Instances"},{"location":"tutorial/instance/#basic-idea","text":"A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory exactly uses this relationship. from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-06-01 16:02:04 ( 5.00ms ) python3 ( 7.00s ) Data(train_size=834, test_size=166) Here, the create_instance() requires the second argument name to specify a key because the first argument params can have multiple keys. Note that we added a n_splits parameter that is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) # 5-fold for train and 1-fold for test. [3] 2020-06-01 16:02:04 ( 3.00ms ) python3 ( 7.00s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing a dictionary easily, we use PyYAML library in this tutorial. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.01s ) Data(train_size=834, test_size=166)","title":"Basic idea"},{"location":"tutorial/instance/#hierarchal-structure","text":"Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have a hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.01s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Next, create a Datasets instance. doc = \"\"\" datasets: class: ivory.core.data.Datasets data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 \"\"\" create(doc, 'datasets') [6] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.02s ) Datasets(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Remember that the argument dataset for the Datasets class is not an instance but a callable that returns a Dataset instance (See the previous section ). To describe this behavior, we use a new def key to create a callable instead of a class key.","title":"Hierarchal Structure"},{"location":"tutorial/instance/#default-class","text":"In the above example, the two lines using an Ivory's original class seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-06-01 16:02:04 ( 78.0ms ) python3 ( 7.10s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: nnabla results --- ivory.callbacks.results.BatchResults metrics --- ivory.nnabla.metrics.Metrics trainer --- ivory.nnabla.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator metrics --- ivory.sklearn.metrics.Metrics Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. import torch.utils.data doc = \"\"\" library: torch # Use default class for PyTorch. datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') isinstance(datasets.train, torch.utils.data.Dataset) [8] 2020-06-01 16:02:04 ( 7.00ms ) python3 ( 7.10s ) True","title":"Default Class"},{"location":"tutorial/instance/#default-value","text":"If a callable has arguments with default value, you can use __default__ to get the default value from the callable signature. doc = \"\"\" datasets: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') datasets.data.n_splits [9] 2020-06-01 16:02:04 ( 6.00ms ) python3 ( 7.11s ) 4","title":"Default Value"},{"location":"tutorial/instance/#positional-arguments","text":"Do you know the name of the first argument of numpy.array() ? import numpy as np print(np.array.__doc__[:200]) [10] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.11s ) array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0) Create an array. Parameters ---------- object : array_like An array, any object exposing the array inter It's object . But do you want to write like this? doc = \"\"\" x: class: numpy.array # Or `call` instead of `class`. object: [1, 2, 3] \"\"\" create(doc, 'x') [11] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.12s ) array([1, 2, 3]) This is inconvenient and ugly. Use underscore-notation : doc = \"\"\" x: class: numpy.array _: [1, 2, 3] \"\"\" create(doc, 'x') [12] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.12s ) array([1, 2, 3]) The second argument of numpy.array() is dtype . You can also use double underscore , which is unpacked. doc = \"\"\" x: call: numpy.array __: [[1, 2, 3], 'float'] \"\"\" create(doc, 'x') [13] 2020-06-01 16:02:04 ( 4.00ms ) python3 ( 7.12s ) array([1., 2., 3.])","title":"Positional Arguments"},{"location":"tutorial/library/","text":"Library Comparison So far, we have used PyTorch in this tutorial, but Ivory can perform machine learning with other libraries. Base Parameter File Before examples, we write two base or template parameter files, which are extended by other parameter files later. File 14 A base parameter YAML file for various libraries (data.yml) datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 File 15 A base parameter YAML file for various libraries (base.yml) extends: data model: hidden_sizes: [20, 30] optimizer: lr: 1e-3 results: metrics: monitor: metric: val_loss trainer: loss: mse batch_size: 5 epochs: 5 shuffle: false verbose: 2 In base.yml , the first line \" extends: data \" means that the file extends (or includes, in this case) data.yml . Neural Network Libraries In this section we compare three neural network libraries ( TensorFlow , NNabla , and PyTorch ), and show that using different libraries on the same problem is straightforward. import tensorflow import nnabla import torch print(tensorflow.__version__) print(nnabla.__version__) print(torch.__version__) [3] 2020-06-01 16:02:04 ( 1.30s ) python3 ( 8.46s ) 2020-06-01 16:02:06,052 [nnabla][INFO]: Initializing CPU extension... C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\nnabla\\function_bases.py:58: DeprecationWarning: `formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly spec.args[1:], spec.varargs, spec.keywords, defaults) 2.1.0 1.7.0 1.5.0+cu101 First define models: File 16 A Model definition in TensorFlow (rectangle/tensorflow.py) from tensorflow import keras from tensorflow.keras.layers import Dense def create_model(hidden_sizes): layers = [Dense(hidden_sizes[0], activation=\"relu\", input_shape=[2])] for hidden_size in hidden_sizes[1:]: layers.append(Dense(hidden_size, activation=\"relu\")) layers.append(Dense(1)) return keras.Sequential(layers) File 17 A Model definition in NNabla (rectangle/nnabla.py) import nnabla as nn import nnabla.functions as F import nnabla.parametric_functions as PF import ivory.nnabla.model class Model(ivory.nnabla.model.Model): def __init__(self, hidden_sizes): super().__init__() self.hidden_sizes = hidden_sizes def forward(self, x): for k, hidden_size in enumerate(self.hidden_sizes): with nn.parameter_scope(f\"layer{k}\"): x = F.relu(PF.affine(x, hidden_size)) with nn.parameter_scope(f\"layer{k+1}\"): x = PF.affine(x, 1) return x File 18 A Model definition in PyTorch (rectangle/torch.py) import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) For simplicity, the TensorFlow model is defined by using the keras.Sequential() , so that we call the create_model() to get the model. Next, write parameter YAML files: File 19 A parameter YAML file for TensorFlow (tensorflow.yml) library: tensorflow extends: base model: call: rectangle.tensorflow.create_model optimizer: class: tensorflow.keras.optimizers.SGD File 20 A parameter YAML file for NNabla (nnabla.yml) library: nnabla extends: base model: class: rectangle.nnabla.Model optimizer: class: nnabla.solvers.Sgd File 21 A parameter YAML fine for PyTorch (torch2.yml) library: torch extends: base model: class: rectangle.torch.Model optimizer: class: torch.optim.SGD _: $.model.parameters() These YAML files are very similar. The only difference is that, in PyTorch, an optimizer needs model parameters at the time of instantiation. Note The model for TensorFlow is a function. A new call key is used. (But you can stil use class , or call for a class, vice versa, because both a class and function are callable .) Next, create three runs. import ivory client = ivory.create_client(\"examples\") run_tf = client.create_run('tensorflow') run_nn = client.create_run('nnabla') run_torch = client.create_run('torch2') [4] 2020-06-01 16:02:06 ( 1.59s ) python3 ( 10.0s ) [I 200601 16:02:06 tracker:48] A new experiment created with name: 'tensorflow' C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\nnabla\\parametric_functions.py:98: DeprecationWarning: `formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly defaults + (None,)) C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\nnabla\\solvers.py:18: DeprecationWarning: `formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly from .solver import * [I 200601 16:02:07 tracker:48] A new experiment created with name: 'nnabla' [I 200601 16:02:07 tracker:48] A new experiment created with name: 'torch2' For comparison, equalize initial parameters. import torch # These three lines are only needed for this example. run, trainer = run_nn, run_nn.trainer run.model.build(trainer.loss, run.datasets.train, trainer.batch_size) run.optimizer.set_parameters(run.model.parameters()) ws_tf = run_tf.model.weights ws_nn = run_nn.model.parameters().values() ws_torch = run_torch.model.parameters() for w_tf, w_nn, w_torch in zip(ws_tf, ws_nn, ws_torch): w_nn.data.data = w_tf.numpy() w_torch.data = torch.tensor(w_tf.numpy().T) [5] 2020-06-01 16:02:07 ( 13.0ms ) python3 ( 10.1s ) Then, start the runs. run_tf.start('both') # Slower due to usage of GPU for a simple network. [6] 2020-06-01 16:02:07 ( 1.90s ) python3 ( 12.0s ) C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_utils.py:1389: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(sample_weight_mode, collections.Mapping): C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_v2_utils.py:544: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(inputs, collections.Sequence): [epoch#0] loss=9.278 val_loss=5.965 best [epoch#1] loss=5.21 val_loss=4.469 best [epoch#2] loss=3.635 val_loss=3.085 best [epoch#3] loss=2.245 val_loss=1.994 best [epoch#4] loss=1.299 val_loss=1.348 best run_nn.start('both') [7] 2020-06-01 16:02:09 ( 829ms ) python3 ( 12.8s ) 2020-06-01 16:02:09,667 [nnabla][INFO]: DataSource with shuffle(False) 2020-06-01 16:02:09,668 [nnabla][INFO]: Using DataIterator 2020-06-01 16:02:09,669 [nnabla][INFO]: DataSource with shuffle(False) 2020-06-01 16:02:09,670 [nnabla][INFO]: Using DataIterator 2020-06-01 16:02:09,672 [nnabla][INFO]: DataSource with shuffle(False) 2020-06-01 16:02:09,673 [nnabla][INFO]: Using DataIterator [epoch#0] loss=9.278 val_loss=5.965 best [epoch#1] loss=5.21 val_loss=4.469 best [epoch#2] loss=3.635 val_loss=3.085 best [epoch#3] loss=2.245 val_loss=1.994 best [epoch#4] loss=1.299 val_loss=1.348 best run_torch.start('both') [8] 2020-06-01 16:02:10 ( 804ms ) python3 ( 13.6s ) [epoch#0] loss=9.278 val_loss=5.965 lr=0.001 best [epoch#1] loss=5.21 val_loss=4.469 lr=0.001 best [epoch#2] loss=3.635 val_loss=3.085 lr=0.001 best [epoch#3] loss=2.245 val_loss=1.994 lr=0.001 best [epoch#4] loss=1.299 val_loss=1.348 lr=0.001 best Metrics during training are almost same. Visualize the results: import matplotlib.pyplot as plt # A helper function def plot(run): dataset = run.results.val plt.scatter(dataset.target.reshape(-1), dataset.output.reshape(-1)) plt.xlim(0, 25) plt.ylim(0, 25) plt.xlabel('Target values') plt.ylabel('Predicted values') for run in [run_tf, run_nn, run_torch]: plot(run) [9] 2020-06-01 16:02:11 ( 220ms ) python3 ( 13.8s ) Actual outputs are like below: x = run_tf.datasets.val[:5][1] run_tf.model.predict(x) [10] 2020-06-01 16:02:11 ( 23.0ms ) python3 ( 13.8s ) array([[ 2.2051313], [ 8.319235 ], [11.02516 ], [11.266552 ], [14.365291 ]], dtype=float32) x = run_nn.datasets.val[:5][1] run_nn.model(x) [11] 2020-06-01 16:02:11 ( 5.00ms ) python3 ( 13.8s ) array([[ 2.205132], [ 8.319233], [11.025161], [11.266553], [14.365292]], dtype=float32) x = run_torch.datasets.val[:5][1] run_torch.model(torch.tensor(x)) [12] 2020-06-01 16:02:11 ( 5.00ms ) python3 ( 13.9s ) tensor([[ 2.2051], [ 8.3192], [11.0252], [11.2666], [14.3653]], grad_fn=<AddmmBackward>) You can ensemble these results, although this is meaningless in this example. from ivory.callbacks.results import concatenate results = concatenate(run.results for run in [run_tf, run_nn, run_torch]) index = results.val.index.argsort() results.val.output[index[:15]] [13] 2020-06-01 16:02:11 ( 5.00ms ) python3 ( 13.9s ) array([[ 2.2051318], [ 2.205132 ], [ 2.205132 ], [ 8.319235 ], [ 8.319233 ], [ 8.319233 ], [11.025158 ], [11.025161 ], [11.02516 ], [11.266552 ], [11.266553 ], [11.266552 ], [14.365292 ], [14.365291 ], [14.365291 ]], dtype=float32) reduced_results = results.mean() reduced_results.val.output[:5] [14] 2020-06-01 16:02:11 ( 11.0ms ) python3 ( 13.9s ) array([[ 2.205132], [ 8.319234], [11.02516 ], [11.266552], [14.365291]], dtype=float32) Scikit-learn Ivory can optimize various scikit-learn 's estimators. Before showing some examples, we need reshape the target array. File 22 A base parameter YAML file for various estimators (data2.yml) extends: data datasets: dataset: transform: rectangle.data.transform The dataset has a transform argument. This function reshapes the target array to match the shape for scikit-learn estimators (1D from 2D). Code 3 rectangle.data.transform() TypeError: module, class, method, function, traceback, frame, or code object was expected, got list TypeError Traceback (most recent call last) <ipython-input-178-2e957216a06d> in <module> 28 source = f\"@dataclass{args}\\n{source}\" 29 return source ---> 30 getsource(_) <ipython-input-178-2e957216a06d> in getsource(obj) 4 else: 5 is_dataclass = False ----> 6 source = inspect.getsource(obj) 7 defaults = [('init', True), ('repr', True), ('eq', True), ('order', False), 8 ('unsafe_hash', False), ('frozen', False)] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsource(object) 971 or code object. The source code is returned as a single string. An 972 OSError is raised if the source code cannot be retrieved.\"\"\" --> 973 lines, lnum = getsourcelines(object) 974 return ''.join(lines) 975 ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcelines(object) 953 raised if the source code cannot be retrieved.\"\"\" 954 object = unwrap(object) --> 955 lines, lnum = findsource(object) 956 957 if istraceback(object): ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in findsource(object) 766 is raised if the source code cannot be retrieved.\"\"\" 767 --> 768 file = getsourcefile(object) 769 if file: 770 # Invalidate cache if needed. ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcefile(object) 682 Return None if no way can be identified to get the source. 683 \"\"\" --> 684 filename = getfile(object) 685 all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:] 686 all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getfile(object) 664 raise TypeError('module, class, method, function, traceback, frame, or ' 665 'code object was expected, got {}'.format( --> 666 type(object).__name__)) 667 668 def getmodulename(path): RandomForestRegressor File 23 A parameter YAML file for RandomForestRegressor (rfr.yml) library: sklearn extends: data2 estimator: model: sklearn.ensemble.RandomForestRegressor n_estimators: 5 max_depth: 3 results: metrics: There are nothing difference to start a run. run = client.create_run('rfr') run.start() [17] 2020-06-01 16:02:11 ( 434ms ) python3 ( 14.5s ) [I 200601 16:02:11 tracker:48] A new experiment created with name: 'rfr' [run#0] mse=2.625 Because RandomForestRegressor estimator has a criterion attribute, the metrics are automatically calculated. Take a look at the outputs. plot(run) [18] 2020-06-01 16:02:12 ( 76.0ms ) python3 ( 14.6s ) Ridge File 24 A parameter YAML file for Ridge (ridge.yml) library: sklearn extends: data2 estimator: model: sklearn.linear_model.Ridge results: metrics: mse: mse_2: rectangle.metrics.mean_squared_error Because Ridge estimator has no criterion attribute, you have to specify metrics if you need. A mse key has empty ( None ) value. In this case, the default function ( sklearn.metrics.mean_squared_error() ) is chosen. On the other hand, mse_2 's value is a custom function's name: Code 4 rectangle.metrics.mean_squared_error() TypeError: module, class, method, function, traceback, frame, or code object was expected, got list TypeError Traceback (most recent call last) <ipython-input-184-2e957216a06d> in <module> 28 source = f\"@dataclass{args}\\n{source}\" 29 return source ---> 30 getsource(_) <ipython-input-184-2e957216a06d> in getsource(obj) 4 else: 5 is_dataclass = False ----> 6 source = inspect.getsource(obj) 7 defaults = [('init', True), ('repr', True), ('eq', True), ('order', False), 8 ('unsafe_hash', False), ('frozen', False)] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsource(object) 971 or code object. The source code is returned as a single string. An 972 OSError is raised if the source code cannot be retrieved.\"\"\" --> 973 lines, lnum = getsourcelines(object) 974 return ''.join(lines) 975 ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcelines(object) 953 raised if the source code cannot be retrieved.\"\"\" 954 object = unwrap(object) --> 955 lines, lnum = findsource(object) 956 957 if istraceback(object): ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in findsource(object) 766 is raised if the source code cannot be retrieved.\"\"\" 767 --> 768 file = getsourcefile(object) 769 if file: 770 # Invalidate cache if needed. ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcefile(object) 682 Return None if no way can be identified to get the source. 683 \"\"\" --> 684 filename = getfile(object) 685 all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:] 686 all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getfile(object) 664 raise TypeError('module, class, method, function, traceback, frame, or ' 665 'code object was expected, got {}'.format( --> 666 type(object).__name__)) 667 668 def getmodulename(path): This functionality allows us to add arbitrary metrics as long as they can be calculated with true and pred arrays . run = client.create_run('ridge') run.start() # Both metrics would give the same values. [21] 2020-06-01 16:02:12 ( 377ms ) python3 ( 15.0s ) [I 200601 16:02:12 tracker:48] A new experiment created with name: 'ridge' [run#0] mse=1.721 mse_2=1.721 plot(run) [22] 2020-06-01 16:02:12 ( 74.0ms ) python3 ( 15.1s ) LightGBM For LightGBM , Ivory implements two estimators: ivory.lightgbm.estimator.Regressor ivory.lightgbm.estimator.Classifier File 25 A parameter YAML file for LightGBM (lgb.yml) extends: data2 estimator: class: ivory.lightgbm.estimator.Regressor boosting_type: gbdt num_leaves: 10 learning_rate: 0.1 max_depth: 4 num_boost_round: 10 verbose_eval: 2 results: metrics: mse: run = client.create_run('lgb') run.start() [23] 2020-06-01 16:02:12 ( 306ms ) python3 ( 15.4s ) [I 200601 16:02:12 tracker:48] A new experiment created with name: 'lgb' [2] training's l2: 16.8772 valid_1's l2: 19.0281 [4] training's l2: 11.606 valid_1's l2: 13.2264 [6] training's l2: 8.01808 valid_1's l2: 9.32486 [8] training's l2: 5.53055 valid_1's l2: 6.6117 [10] training's l2: 3.8524 valid_1's l2: 4.71314 [run#0] mse=4.713 plot(run) [24] 2020-06-01 16:02:13 ( 89.0ms ) python3 ( 15.5s )","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Library Comparison</span></span></span>"},{"location":"tutorial/library/#library-comparison","text":"So far, we have used PyTorch in this tutorial, but Ivory can perform machine learning with other libraries.","title":"Library Comparison"},{"location":"tutorial/library/#base-parameter-file","text":"Before examples, we write two base or template parameter files, which are extended by other parameter files later. File 14 A base parameter YAML file for various libraries (data.yml) datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 File 15 A base parameter YAML file for various libraries (base.yml) extends: data model: hidden_sizes: [20, 30] optimizer: lr: 1e-3 results: metrics: monitor: metric: val_loss trainer: loss: mse batch_size: 5 epochs: 5 shuffle: false verbose: 2 In base.yml , the first line \" extends: data \" means that the file extends (or includes, in this case) data.yml .","title":"Base Parameter File"},{"location":"tutorial/library/#neural-network-libraries","text":"In this section we compare three neural network libraries ( TensorFlow , NNabla , and PyTorch ), and show that using different libraries on the same problem is straightforward. import tensorflow import nnabla import torch print(tensorflow.__version__) print(nnabla.__version__) print(torch.__version__) [3] 2020-06-01 16:02:04 ( 1.30s ) python3 ( 8.46s ) 2020-06-01 16:02:06,052 [nnabla][INFO]: Initializing CPU extension... C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\nnabla\\function_bases.py:58: DeprecationWarning: `formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly spec.args[1:], spec.varargs, spec.keywords, defaults) 2.1.0 1.7.0 1.5.0+cu101 First define models: File 16 A Model definition in TensorFlow (rectangle/tensorflow.py) from tensorflow import keras from tensorflow.keras.layers import Dense def create_model(hidden_sizes): layers = [Dense(hidden_sizes[0], activation=\"relu\", input_shape=[2])] for hidden_size in hidden_sizes[1:]: layers.append(Dense(hidden_size, activation=\"relu\")) layers.append(Dense(1)) return keras.Sequential(layers) File 17 A Model definition in NNabla (rectangle/nnabla.py) import nnabla as nn import nnabla.functions as F import nnabla.parametric_functions as PF import ivory.nnabla.model class Model(ivory.nnabla.model.Model): def __init__(self, hidden_sizes): super().__init__() self.hidden_sizes = hidden_sizes def forward(self, x): for k, hidden_size in enumerate(self.hidden_sizes): with nn.parameter_scope(f\"layer{k}\"): x = F.relu(PF.affine(x, hidden_size)) with nn.parameter_scope(f\"layer{k+1}\"): x = PF.affine(x, 1) return x File 18 A Model definition in PyTorch (rectangle/torch.py) import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) For simplicity, the TensorFlow model is defined by using the keras.Sequential() , so that we call the create_model() to get the model. Next, write parameter YAML files: File 19 A parameter YAML file for TensorFlow (tensorflow.yml) library: tensorflow extends: base model: call: rectangle.tensorflow.create_model optimizer: class: tensorflow.keras.optimizers.SGD File 20 A parameter YAML file for NNabla (nnabla.yml) library: nnabla extends: base model: class: rectangle.nnabla.Model optimizer: class: nnabla.solvers.Sgd File 21 A parameter YAML fine for PyTorch (torch2.yml) library: torch extends: base model: class: rectangle.torch.Model optimizer: class: torch.optim.SGD _: $.model.parameters() These YAML files are very similar. The only difference is that, in PyTorch, an optimizer needs model parameters at the time of instantiation. Note The model for TensorFlow is a function. A new call key is used. (But you can stil use class , or call for a class, vice versa, because both a class and function are callable .) Next, create three runs. import ivory client = ivory.create_client(\"examples\") run_tf = client.create_run('tensorflow') run_nn = client.create_run('nnabla') run_torch = client.create_run('torch2') [4] 2020-06-01 16:02:06 ( 1.59s ) python3 ( 10.0s ) [I 200601 16:02:06 tracker:48] A new experiment created with name: 'tensorflow' C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\nnabla\\parametric_functions.py:98: DeprecationWarning: `formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly defaults + (None,)) C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\nnabla\\solvers.py:18: DeprecationWarning: `formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directly from .solver import * [I 200601 16:02:07 tracker:48] A new experiment created with name: 'nnabla' [I 200601 16:02:07 tracker:48] A new experiment created with name: 'torch2' For comparison, equalize initial parameters. import torch # These three lines are only needed for this example. run, trainer = run_nn, run_nn.trainer run.model.build(trainer.loss, run.datasets.train, trainer.batch_size) run.optimizer.set_parameters(run.model.parameters()) ws_tf = run_tf.model.weights ws_nn = run_nn.model.parameters().values() ws_torch = run_torch.model.parameters() for w_tf, w_nn, w_torch in zip(ws_tf, ws_nn, ws_torch): w_nn.data.data = w_tf.numpy() w_torch.data = torch.tensor(w_tf.numpy().T) [5] 2020-06-01 16:02:07 ( 13.0ms ) python3 ( 10.1s ) Then, start the runs. run_tf.start('both') # Slower due to usage of GPU for a simple network. [6] 2020-06-01 16:02:07 ( 1.90s ) python3 ( 12.0s ) C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_utils.py:1389: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(sample_weight_mode, collections.Mapping): C:\\Users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_v2_utils.py:544: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(inputs, collections.Sequence): [epoch#0] loss=9.278 val_loss=5.965 best [epoch#1] loss=5.21 val_loss=4.469 best [epoch#2] loss=3.635 val_loss=3.085 best [epoch#3] loss=2.245 val_loss=1.994 best [epoch#4] loss=1.299 val_loss=1.348 best run_nn.start('both') [7] 2020-06-01 16:02:09 ( 829ms ) python3 ( 12.8s ) 2020-06-01 16:02:09,667 [nnabla][INFO]: DataSource with shuffle(False) 2020-06-01 16:02:09,668 [nnabla][INFO]: Using DataIterator 2020-06-01 16:02:09,669 [nnabla][INFO]: DataSource with shuffle(False) 2020-06-01 16:02:09,670 [nnabla][INFO]: Using DataIterator 2020-06-01 16:02:09,672 [nnabla][INFO]: DataSource with shuffle(False) 2020-06-01 16:02:09,673 [nnabla][INFO]: Using DataIterator [epoch#0] loss=9.278 val_loss=5.965 best [epoch#1] loss=5.21 val_loss=4.469 best [epoch#2] loss=3.635 val_loss=3.085 best [epoch#3] loss=2.245 val_loss=1.994 best [epoch#4] loss=1.299 val_loss=1.348 best run_torch.start('both') [8] 2020-06-01 16:02:10 ( 804ms ) python3 ( 13.6s ) [epoch#0] loss=9.278 val_loss=5.965 lr=0.001 best [epoch#1] loss=5.21 val_loss=4.469 lr=0.001 best [epoch#2] loss=3.635 val_loss=3.085 lr=0.001 best [epoch#3] loss=2.245 val_loss=1.994 lr=0.001 best [epoch#4] loss=1.299 val_loss=1.348 lr=0.001 best Metrics during training are almost same. Visualize the results: import matplotlib.pyplot as plt # A helper function def plot(run): dataset = run.results.val plt.scatter(dataset.target.reshape(-1), dataset.output.reshape(-1)) plt.xlim(0, 25) plt.ylim(0, 25) plt.xlabel('Target values') plt.ylabel('Predicted values') for run in [run_tf, run_nn, run_torch]: plot(run) [9] 2020-06-01 16:02:11 ( 220ms ) python3 ( 13.8s ) Actual outputs are like below: x = run_tf.datasets.val[:5][1] run_tf.model.predict(x) [10] 2020-06-01 16:02:11 ( 23.0ms ) python3 ( 13.8s ) array([[ 2.2051313], [ 8.319235 ], [11.02516 ], [11.266552 ], [14.365291 ]], dtype=float32) x = run_nn.datasets.val[:5][1] run_nn.model(x) [11] 2020-06-01 16:02:11 ( 5.00ms ) python3 ( 13.8s ) array([[ 2.205132], [ 8.319233], [11.025161], [11.266553], [14.365292]], dtype=float32) x = run_torch.datasets.val[:5][1] run_torch.model(torch.tensor(x)) [12] 2020-06-01 16:02:11 ( 5.00ms ) python3 ( 13.9s ) tensor([[ 2.2051], [ 8.3192], [11.0252], [11.2666], [14.3653]], grad_fn=<AddmmBackward>) You can ensemble these results, although this is meaningless in this example. from ivory.callbacks.results import concatenate results = concatenate(run.results for run in [run_tf, run_nn, run_torch]) index = results.val.index.argsort() results.val.output[index[:15]] [13] 2020-06-01 16:02:11 ( 5.00ms ) python3 ( 13.9s ) array([[ 2.2051318], [ 2.205132 ], [ 2.205132 ], [ 8.319235 ], [ 8.319233 ], [ 8.319233 ], [11.025158 ], [11.025161 ], [11.02516 ], [11.266552 ], [11.266553 ], [11.266552 ], [14.365292 ], [14.365291 ], [14.365291 ]], dtype=float32) reduced_results = results.mean() reduced_results.val.output[:5] [14] 2020-06-01 16:02:11 ( 11.0ms ) python3 ( 13.9s ) array([[ 2.205132], [ 8.319234], [11.02516 ], [11.266552], [14.365291]], dtype=float32)","title":"Neural Network Libraries"},{"location":"tutorial/library/#scikit-learn","text":"Ivory can optimize various scikit-learn 's estimators. Before showing some examples, we need reshape the target array. File 22 A base parameter YAML file for various estimators (data2.yml) extends: data datasets: dataset: transform: rectangle.data.transform The dataset has a transform argument. This function reshapes the target array to match the shape for scikit-learn estimators (1D from 2D). Code 3 rectangle.data.transform() TypeError: module, class, method, function, traceback, frame, or code object was expected, got list TypeError Traceback (most recent call last) <ipython-input-178-2e957216a06d> in <module> 28 source = f\"@dataclass{args}\\n{source}\" 29 return source ---> 30 getsource(_) <ipython-input-178-2e957216a06d> in getsource(obj) 4 else: 5 is_dataclass = False ----> 6 source = inspect.getsource(obj) 7 defaults = [('init', True), ('repr', True), ('eq', True), ('order', False), 8 ('unsafe_hash', False), ('frozen', False)] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsource(object) 971 or code object. The source code is returned as a single string. An 972 OSError is raised if the source code cannot be retrieved.\"\"\" --> 973 lines, lnum = getsourcelines(object) 974 return ''.join(lines) 975 ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcelines(object) 953 raised if the source code cannot be retrieved.\"\"\" 954 object = unwrap(object) --> 955 lines, lnum = findsource(object) 956 957 if istraceback(object): ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in findsource(object) 766 is raised if the source code cannot be retrieved.\"\"\" 767 --> 768 file = getsourcefile(object) 769 if file: 770 # Invalidate cache if needed. ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcefile(object) 682 Return None if no way can be identified to get the source. 683 \"\"\" --> 684 filename = getfile(object) 685 all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:] 686 all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getfile(object) 664 raise TypeError('module, class, method, function, traceback, frame, or ' 665 'code object was expected, got {}'.format( --> 666 type(object).__name__)) 667 668 def getmodulename(path):","title":"Scikit-learn"},{"location":"tutorial/library/#randomforestregressor","text":"File 23 A parameter YAML file for RandomForestRegressor (rfr.yml) library: sklearn extends: data2 estimator: model: sklearn.ensemble.RandomForestRegressor n_estimators: 5 max_depth: 3 results: metrics: There are nothing difference to start a run. run = client.create_run('rfr') run.start() [17] 2020-06-01 16:02:11 ( 434ms ) python3 ( 14.5s ) [I 200601 16:02:11 tracker:48] A new experiment created with name: 'rfr' [run#0] mse=2.625 Because RandomForestRegressor estimator has a criterion attribute, the metrics are automatically calculated. Take a look at the outputs. plot(run) [18] 2020-06-01 16:02:12 ( 76.0ms ) python3 ( 14.6s )","title":"RandomForestRegressor"},{"location":"tutorial/library/#ridge","text":"File 24 A parameter YAML file for Ridge (ridge.yml) library: sklearn extends: data2 estimator: model: sklearn.linear_model.Ridge results: metrics: mse: mse_2: rectangle.metrics.mean_squared_error Because Ridge estimator has no criterion attribute, you have to specify metrics if you need. A mse key has empty ( None ) value. In this case, the default function ( sklearn.metrics.mean_squared_error() ) is chosen. On the other hand, mse_2 's value is a custom function's name: Code 4 rectangle.metrics.mean_squared_error() TypeError: module, class, method, function, traceback, frame, or code object was expected, got list TypeError Traceback (most recent call last) <ipython-input-184-2e957216a06d> in <module> 28 source = f\"@dataclass{args}\\n{source}\" 29 return source ---> 30 getsource(_) <ipython-input-184-2e957216a06d> in getsource(obj) 4 else: 5 is_dataclass = False ----> 6 source = inspect.getsource(obj) 7 defaults = [('init', True), ('repr', True), ('eq', True), ('order', False), 8 ('unsafe_hash', False), ('frozen', False)] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsource(object) 971 or code object. The source code is returned as a single string. An 972 OSError is raised if the source code cannot be retrieved.\"\"\" --> 973 lines, lnum = getsourcelines(object) 974 return ''.join(lines) 975 ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcelines(object) 953 raised if the source code cannot be retrieved.\"\"\" 954 object = unwrap(object) --> 955 lines, lnum = findsource(object) 956 957 if istraceback(object): ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in findsource(object) 766 is raised if the source code cannot be retrieved.\"\"\" 767 --> 768 file = getsourcefile(object) 769 if file: 770 # Invalidate cache if needed. ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getsourcefile(object) 682 Return None if no way can be identified to get the source. 683 \"\"\" --> 684 filename = getfile(object) 685 all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:] 686 all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:] ~\\miniconda3\\envs\\daizu\\lib\\inspect.py in getfile(object) 664 raise TypeError('module, class, method, function, traceback, frame, or ' 665 'code object was expected, got {}'.format( --> 666 type(object).__name__)) 667 668 def getmodulename(path): This functionality allows us to add arbitrary metrics as long as they can be calculated with true and pred arrays . run = client.create_run('ridge') run.start() # Both metrics would give the same values. [21] 2020-06-01 16:02:12 ( 377ms ) python3 ( 15.0s ) [I 200601 16:02:12 tracker:48] A new experiment created with name: 'ridge' [run#0] mse=1.721 mse_2=1.721 plot(run) [22] 2020-06-01 16:02:12 ( 74.0ms ) python3 ( 15.1s )","title":"Ridge"},{"location":"tutorial/library/#lightgbm","text":"For LightGBM , Ivory implements two estimators: ivory.lightgbm.estimator.Regressor ivory.lightgbm.estimator.Classifier File 25 A parameter YAML file for LightGBM (lgb.yml) extends: data2 estimator: class: ivory.lightgbm.estimator.Regressor boosting_type: gbdt num_leaves: 10 learning_rate: 0.1 max_depth: 4 num_boost_round: 10 verbose_eval: 2 results: metrics: mse: run = client.create_run('lgb') run.start() [23] 2020-06-01 16:02:12 ( 306ms ) python3 ( 15.4s ) [I 200601 16:02:12 tracker:48] A new experiment created with name: 'lgb' [2] training's l2: 16.8772 valid_1's l2: 19.0281 [4] training's l2: 11.606 valid_1's l2: 13.2264 [6] training's l2: 8.01808 valid_1's l2: 9.32486 [8] training's l2: 5.53055 valid_1's l2: 6.6117 [10] training's l2: 3.8524 valid_1's l2: 4.71314 [run#0] mse=4.713 plot(run) [24] 2020-06-01 16:02:13 ( 89.0ms ) python3 ( 15.5s )","title":"LightGBM"},{"location":"tutorial/model/","text":"Model Structure Model We have prepared a Datasets instance for PyTorch. Now define a MLP model that works with this Datasets . The model is defined in rectangle/torch.py File 6 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') model [2] 2020-06-01 16:02:13 ( 9.00ms ) python3 ( 15.5s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. import torch index, input, target = datasets.train[:5] input [3] 2020-06-01 16:02:13 ( 4.00ms ) python3 ( 15.5s ) array([[3.0982542, 1.4571707], [3.0498803, 1.5447568], [3.925663 , 1.1112826], [1.0297081, 2.1787055], [2.1314638, 3.66297 ]], dtype=float32) model(torch.tensor(input)) [4] 2020-06-01 16:02:13 ( 5.00ms ) python3 ( 15.5s ) tensor([[0.3322], [0.3325], [0.3271], [0.3092], [0.3211]], grad_fn=<AddmmBackward>) Optimizer To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-06-01 16:02:13 ( 4.00ms ) python3 ( 15.5s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the first argument params is neigher a simple literal nor an other instance. It is an iterable of learnable parameters obtained from a model. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-06-01 16:02:13 ( 5.00ms ) python3 ( 15.5s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in the globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of Model.parameters() . Scheduler A scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-06-01 16:02:13 ( 5.00ms ) python3 ( 15.5s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x10990d1a3c8> If a $ -notation has no suffix, the value becomes its key itself. The following two examples are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and a model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Model Structure</span></span></span>"},{"location":"tutorial/model/#model-structure","text":"","title":"Model Structure"},{"location":"tutorial/model/#model","text":"We have prepared a Datasets instance for PyTorch. Now define a MLP model that works with this Datasets . The model is defined in rectangle/torch.py File 6 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') model [2] 2020-06-01 16:02:13 ( 9.00ms ) python3 ( 15.5s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. import torch index, input, target = datasets.train[:5] input [3] 2020-06-01 16:02:13 ( 4.00ms ) python3 ( 15.5s ) array([[3.0982542, 1.4571707], [3.0498803, 1.5447568], [3.925663 , 1.1112826], [1.0297081, 2.1787055], [2.1314638, 3.66297 ]], dtype=float32) model(torch.tensor(input)) [4] 2020-06-01 16:02:13 ( 5.00ms ) python3 ( 15.5s ) tensor([[0.3322], [0.3325], [0.3271], [0.3092], [0.3211]], grad_fn=<AddmmBackward>)","title":"Model"},{"location":"tutorial/model/#optimizer","text":"To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-06-01 16:02:13 ( 4.00ms ) python3 ( 15.5s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the first argument params is neigher a simple literal nor an other instance. It is an iterable of learnable parameters obtained from a model. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-06-01 16:02:13 ( 5.00ms ) python3 ( 15.5s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in the globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of Model.parameters() .","title":"Optimizer"},{"location":"tutorial/model/#scheduler","text":"A scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-06-01 16:02:13 ( 5.00ms ) python3 ( 15.5s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x10990d1a3c8> If a $ -notation has no suffix, the value becomes its key itself. The following two examples are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and a model.","title":"Scheduler"},{"location":"tutorial/task/","text":"Multiple Runs Task Ivory implements a special run class Task that controls multiple nested runs. Task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-06-01 16:02:13 ( 46.0ms ) python3 ( 15.6s ) [I 200601 16:02:13 tracker:48] A new experiment created with name: 'torch' Task(id='36b41cdfb32f4251a60a4937f400d825', name='task#0', num_instances=3) The Task class has two functions to generate multiple runs: Task.prodcut() and Task.chain() . These two function have the same functionality as itertools of Python starndard library. Product The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-06-01 16:02:13 ( 37.0ms ) python3 ( 15.6s ) <generator object Task.product at 0x0000010990CD9B48> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-06-01 16:02:13 ( 518ms ) python3 ( 16.1s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters that don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-06-01 16:02:13 ( 608ms ) python3 ( 16.8s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7 Chain The Task.chain() makes an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-06-01 16:02:14 ( 65.0ms ) python3 ( 16.8s ) <generator object Task.chain at 0x0000010990C7D9C8> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-06-01 16:02:14 ( 912ms ) python3 ( 17.7s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter that got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-06-01 16:02:15 ( 1.08s ) python3 ( 18.8s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5 Range Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.8s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.8s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.8s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.9s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Multiple Runs</span></span></span>"},{"location":"tutorial/task/#multiple-runs","text":"","title":"Multiple Runs"},{"location":"tutorial/task/#task","text":"Ivory implements a special run class Task that controls multiple nested runs. Task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-06-01 16:02:13 ( 46.0ms ) python3 ( 15.6s ) [I 200601 16:02:13 tracker:48] A new experiment created with name: 'torch' Task(id='36b41cdfb32f4251a60a4937f400d825', name='task#0', num_instances=3) The Task class has two functions to generate multiple runs: Task.prodcut() and Task.chain() . These two function have the same functionality as itertools of Python starndard library.","title":"Task"},{"location":"tutorial/task/#product","text":"The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-06-01 16:02:13 ( 37.0ms ) python3 ( 15.6s ) <generator object Task.product at 0x0000010990CD9B48> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-06-01 16:02:13 ( 518ms ) python3 ( 16.1s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters that don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-06-01 16:02:13 ( 608ms ) python3 ( 16.8s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7","title":"Product"},{"location":"tutorial/task/#chain","text":"The Task.chain() makes an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-06-01 16:02:14 ( 65.0ms ) python3 ( 16.8s ) <generator object Task.chain at 0x0000010990C7D9C8> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-06-01 16:02:14 ( 912ms ) python3 ( 17.7s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter that got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-06-01 16:02:15 ( 1.08s ) python3 ( 18.8s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5","title":"Chain"},{"location":"tutorial/task/#range","text":"Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.8s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.8s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-06-01 16:02:16 ( 4.00ms ) python3 ( 18.8s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.8s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-06-01 16:02:16 ( 5.00ms ) python3 ( 18.9s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"Range"},{"location":"tutorial/tracking/","text":"Tracking Runs with Ivory First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch', fold=2) run.start() [3] 2020-06-01 16:02:16 ( 1.22s ) python3 ( 20.1s ) [I 200601 16:02:16 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=23.79 val_loss=7.691 lr=0.001 best [epoch#1] loss=7.771 val_loss=7.829 lr=0.001 [epoch#2] loss=7.029 val_loss=6.696 lr=0.001 best [epoch#3] loss=6.098 val_loss=5.208 lr=0.001 best [epoch#4] loss=5.215 val_loss=4.327 lr=0.001 best [epoch#5] loss=4.195 val_loss=3.407 lr=0.001 best [epoch#6] loss=3.319 val_loss=2.479 lr=0.001 best [epoch#7] loss=2.473 val_loss=1.81 lr=0.001 best [epoch#8] loss=1.728 val_loss=1.219 lr=0.001 best [epoch#9] loss=1.2 val_loss=0.9118 lr=0.001 best run = client.create_run('torch', fold=3) run.start('both') [4] 2020-06-01 16:02:17 ( 1.27s ) python3 ( 21.4s ) [epoch#0] loss=29.04 val_loss=9.811 lr=0.001 best [epoch#1] loss=8.977 val_loss=8.659 lr=0.001 best [epoch#2] loss=8.28 val_loss=8.045 lr=0.001 best [epoch#3] loss=7.499 val_loss=7.678 lr=0.001 best [epoch#4] loss=7.088 val_loss=6.79 lr=0.001 best [epoch#5] loss=6.283 val_loss=6.075 lr=0.001 best [epoch#6] loss=5.576 val_loss=5.253 lr=0.001 best [epoch#7] loss=4.924 val_loss=4.601 lr=0.001 best [epoch#8] loss=4.16 val_loss=3.831 lr=0.001 best [epoch#9] loss=3.506 val_loss=3.198 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: pass # Do something [5] 2020-06-01 16:02:19 ( 445ms ) python3 ( 21.8s ) [run#2] fold=0 [run#3] fold=1 [run#4] fold=2 task = client.create_task('torch') runs = task.product(n_splits=[3, 4], verbose=0) for run in runs: pass # Do something [6] 2020-06-01 16:02:19 ( 326ms ) python3 ( 22.2s ) [run#5] n_splits=3 [run#6] n_splits=4 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: pass # Do something [7] 2020-06-01 16:02:20 ( 647ms ) python3 ( 22.8s ) [run#7] lr=0.0001 [run#8] lr=0.001 [run#9] batch_size=16 lr=0.0001 [run#10] batch_size=32 lr=0.0001 Tracking Interface Search functions Client.search_run_ids() makes an iterator that returns Run IDs of runs. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_run_ids('torch') print_run_info(run_ids) [8] 2020-06-01 16:02:20 ( 104ms ) python3 ( 22.9s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 12533 task#2 7f88a run#6 cf9e2 run#5 9ce9e task#1 9587a run#4 81eff run#3 296c4 run#2 b6534 task#0 00925 run#1 a23e2 run#0 You can filtering runs by passing keyword arguments. run_ids = client.search_run_ids('torch', lr=1e-4, batch_size=32) print_run_info(run_ids) [9] 2020-06-01 16:02:20 ( 203ms ) python3 ( 23.1s ) a237a run#10 Client.search_nested_run_ids() makes an iterator that returns Run IDs of runs that have a parent run. Optionally, you can filter runs. run_ids = client.search_nested_run_ids('torch') print_run_info(run_ids) [10] 2020-06-01 16:02:20 ( 72.0ms ) python3 ( 23.2s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 7f88a run#6 cf9e2 run#5 9587a run#4 81eff run#3 296c4 run#2 Note that the run#0 isn't returned because it was created by Client.create_run() directly. Client.search_parent_run_ids() makes an iterator that returns Run IDs of runs that have nested runs. In this case, parent runs are three tasks we made above. run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [11] 2020-06-01 16:02:21 ( 45.0ms ) python3 ( 23.2s ) 12533 task#2 9ce9e task#1 b6534 task#0 Get functions Client.get_run_id() returns a Run ID of runs you select by run name. run_id = client.get_run_id('torch', run=0) print_run_info([run_id]) [12] 2020-06-01 16:02:21 ( 39.0ms ) python3 ( 23.3s ) a23e2 run#0 Client.get_run_ids() makes an iterator that returns Run IDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(1, 3)) print_run_info(run_ids) [13] 2020-06-01 16:02:21 ( 72.0ms ) python3 ( 23.4s ) 9ce9e task#1 12533 task#2 Client.get_nested_run_ids() makes an iterator that returns Run IDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(2)) print_run_info(run_ids) [14] 2020-06-01 16:02:21 ( 141ms ) python3 ( 23.5s ) 9587a run#4 81eff run#3 296c4 run#2 7f88a run#6 cf9e2 run#5 Client.get_parent_run_id() returns a Run ID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=5) print_run_info([run_id]) [15] 2020-06-01 16:02:21 ( 39.0ms ) python3 ( 23.5s ) 9ce9e task#1 Set function Sometimes, you may want to change a parent for nested runs. Use Client.set_parent_run_id() . run_ids = client.get_nested_run_ids('torch', task=2) print_run_info(run_ids) [16] 2020-06-01 16:02:21 ( 80.0ms ) python3 ( 23.6s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 client.set_parent_run_id('torch', run=(0, 2, 3), task=2) run_ids = client.get_nested_run_ids('torch', task=2) print_run_info(run_ids) [17] 2020-06-01 16:02:21 ( 226ms ) python3 ( 23.8s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 81eff run#3 296c4 run#2 a23e2 run#0 Next Step Once you got Run ID(s), you can load a run, a member of a run, or collect results of multiple runs for an ensemble. See the quickstart .","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking Runs with Ivory</span></span></span>"},{"location":"tutorial/tracking/#tracking-runs-with-ivory","text":"First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch', fold=2) run.start() [3] 2020-06-01 16:02:16 ( 1.22s ) python3 ( 20.1s ) [I 200601 16:02:16 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=23.79 val_loss=7.691 lr=0.001 best [epoch#1] loss=7.771 val_loss=7.829 lr=0.001 [epoch#2] loss=7.029 val_loss=6.696 lr=0.001 best [epoch#3] loss=6.098 val_loss=5.208 lr=0.001 best [epoch#4] loss=5.215 val_loss=4.327 lr=0.001 best [epoch#5] loss=4.195 val_loss=3.407 lr=0.001 best [epoch#6] loss=3.319 val_loss=2.479 lr=0.001 best [epoch#7] loss=2.473 val_loss=1.81 lr=0.001 best [epoch#8] loss=1.728 val_loss=1.219 lr=0.001 best [epoch#9] loss=1.2 val_loss=0.9118 lr=0.001 best run = client.create_run('torch', fold=3) run.start('both') [4] 2020-06-01 16:02:17 ( 1.27s ) python3 ( 21.4s ) [epoch#0] loss=29.04 val_loss=9.811 lr=0.001 best [epoch#1] loss=8.977 val_loss=8.659 lr=0.001 best [epoch#2] loss=8.28 val_loss=8.045 lr=0.001 best [epoch#3] loss=7.499 val_loss=7.678 lr=0.001 best [epoch#4] loss=7.088 val_loss=6.79 lr=0.001 best [epoch#5] loss=6.283 val_loss=6.075 lr=0.001 best [epoch#6] loss=5.576 val_loss=5.253 lr=0.001 best [epoch#7] loss=4.924 val_loss=4.601 lr=0.001 best [epoch#8] loss=4.16 val_loss=3.831 lr=0.001 best [epoch#9] loss=3.506 val_loss=3.198 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: pass # Do something [5] 2020-06-01 16:02:19 ( 445ms ) python3 ( 21.8s ) [run#2] fold=0 [run#3] fold=1 [run#4] fold=2 task = client.create_task('torch') runs = task.product(n_splits=[3, 4], verbose=0) for run in runs: pass # Do something [6] 2020-06-01 16:02:19 ( 326ms ) python3 ( 22.2s ) [run#5] n_splits=3 [run#6] n_splits=4 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: pass # Do something [7] 2020-06-01 16:02:20 ( 647ms ) python3 ( 22.8s ) [run#7] lr=0.0001 [run#8] lr=0.001 [run#9] batch_size=16 lr=0.0001 [run#10] batch_size=32 lr=0.0001","title":"Tracking Runs with Ivory"},{"location":"tutorial/tracking/#tracking-interface","text":"","title":"Tracking Interface"},{"location":"tutorial/tracking/#search-functions","text":"Client.search_run_ids() makes an iterator that returns Run IDs of runs. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_run_ids('torch') print_run_info(run_ids) [8] 2020-06-01 16:02:20 ( 104ms ) python3 ( 22.9s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 12533 task#2 7f88a run#6 cf9e2 run#5 9ce9e task#1 9587a run#4 81eff run#3 296c4 run#2 b6534 task#0 00925 run#1 a23e2 run#0 You can filtering runs by passing keyword arguments. run_ids = client.search_run_ids('torch', lr=1e-4, batch_size=32) print_run_info(run_ids) [9] 2020-06-01 16:02:20 ( 203ms ) python3 ( 23.1s ) a237a run#10 Client.search_nested_run_ids() makes an iterator that returns Run IDs of runs that have a parent run. Optionally, you can filter runs. run_ids = client.search_nested_run_ids('torch') print_run_info(run_ids) [10] 2020-06-01 16:02:20 ( 72.0ms ) python3 ( 23.2s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 7f88a run#6 cf9e2 run#5 9587a run#4 81eff run#3 296c4 run#2 Note that the run#0 isn't returned because it was created by Client.create_run() directly. Client.search_parent_run_ids() makes an iterator that returns Run IDs of runs that have nested runs. In this case, parent runs are three tasks we made above. run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [11] 2020-06-01 16:02:21 ( 45.0ms ) python3 ( 23.2s ) 12533 task#2 9ce9e task#1 b6534 task#0","title":"Search functions"},{"location":"tutorial/tracking/#get-functions","text":"Client.get_run_id() returns a Run ID of runs you select by run name. run_id = client.get_run_id('torch', run=0) print_run_info([run_id]) [12] 2020-06-01 16:02:21 ( 39.0ms ) python3 ( 23.3s ) a23e2 run#0 Client.get_run_ids() makes an iterator that returns Run IDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(1, 3)) print_run_info(run_ids) [13] 2020-06-01 16:02:21 ( 72.0ms ) python3 ( 23.4s ) 9ce9e task#1 12533 task#2 Client.get_nested_run_ids() makes an iterator that returns Run IDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(2)) print_run_info(run_ids) [14] 2020-06-01 16:02:21 ( 141ms ) python3 ( 23.5s ) 9587a run#4 81eff run#3 296c4 run#2 7f88a run#6 cf9e2 run#5 Client.get_parent_run_id() returns a Run ID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=5) print_run_info([run_id]) [15] 2020-06-01 16:02:21 ( 39.0ms ) python3 ( 23.5s ) 9ce9e task#1","title":"Get functions"},{"location":"tutorial/tracking/#set-function","text":"Sometimes, you may want to change a parent for nested runs. Use Client.set_parent_run_id() . run_ids = client.get_nested_run_ids('torch', task=2) print_run_info(run_ids) [16] 2020-06-01 16:02:21 ( 80.0ms ) python3 ( 23.6s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 client.set_parent_run_id('torch', run=(0, 2, 3), task=2) run_ids = client.get_nested_run_ids('torch', task=2) print_run_info(run_ids) [17] 2020-06-01 16:02:21 ( 226ms ) python3 ( 23.8s ) a237a run#10 56c93 run#9 76c09 run#8 5b6c2 run#7 81eff run#3 296c4 run#2 a23e2 run#0","title":"Set function"},{"location":"tutorial/tracking/#next-step","text":"Once you got Run ID(s), you can load a run, a member of a run, or collect results of multiple runs for an ensemble. See the quickstart .","title":"Next Step"},{"location":"tutorial/training/","text":"Training a Model First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 \"\"\") params [2] 2020-06-01 16:02:21 ( 7.00ms ) python3 ( 23.9s ) {'library': 'torch', 'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': None, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'batch_size': 10, 'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . ivory.core.instance.create_base_instance() is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() because it can create multiple objects by one step processing $ -notation properly. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-06-01 16:02:21 ( 6.00ms ) python3 ( 23.9s ) ['datasets', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer'] Callbacks Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-06-01 16:02:21 ( 34.0ms ) python3 ( 23.9s ) [datasets] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_init_begin on_train_begin on_val_begin on_epoch_end on_test_begin Metrics The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-06-01 16:02:21 ( 4.00ms ) python3 ( 23.9s ) Metrics() Monitor The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-06-01 16:02:21 ( 4.00ms ) python3 ( 23.9s ) Monitor(metric='val_loss', mode='min') EarlyStopping The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-06-01 16:02:21 ( 4.00ms ) python3 ( 23.9s ) EarlyStopping(patience=10, wait=0) Trainer The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-06-01 16:02:21 ( 5.00ms ) python3 ( 23.9s ) Trainer(epoch=-1, epochs=10, global_step=-1, batch_size=10, shuffle=True, dataloaders='ivory.torch.data.DataLoaders', verbose=2, loss=<function mse_loss at 0x00000107B06BB5E8>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch') Using a Trainer A Run instance invokes its trainer by Run.start() . run.start() # create_callbacks() is called automatically. [9] 2020-06-01 16:02:21 ( 533ms ) python3 ( 24.5s ) [epoch#0] loss=12.67 val_loss=6.914 lr=0.001 best [epoch#1] loss=5.519 val_loss=4.283 lr=0.001 best [epoch#2] loss=3.864 val_loss=2.974 lr=0.001 best [epoch#3] loss=2.35 val_loss=1.613 lr=0.001 best [epoch#4] loss=1.42 val_loss=1.236 lr=0.001 best [epoch#5] loss=0.8209 val_loss=0.8311 lr=0.001 best [epoch#6] loss=0.6738 val_loss=0.5343 lr=0.001 best [epoch#7] loss=0.5483 val_loss=0.5106 lr=0.001 best [epoch#8] loss=0.4903 val_loss=0.5397 lr=0.001 [epoch#9] loss=0.4466 val_loss=0.9179 lr=0.001 You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-06-01 16:02:22 ( 265ms ) python3 ( 24.7s ) [epoch#10] loss=0.4251 val_loss=0.3698 lr=0.001 best [epoch#11] loss=0.412 val_loss=0.3503 lr=0.001 best [epoch#12] loss=0.4053 val_loss=0.3432 lr=0.001 best [epoch#13] loss=0.3519 val_loss=0.352 lr=0.001 [epoch#14] loss=0.3584 val_loss=0.4365 lr=0.001 Note The Run.start() doesn't reset the trainer's epoch. Callbacks after Training After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) Metrics(loss=0.3584, val_loss=0.4365, lr=0.001) run.metrics.history.val_loss # Metrics history. [12] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) {0: 6.914260828495026, 1: 4.283172708749771, 2: 2.9741749703884124, 3: 1.6126258432865144, 4: 1.2363424852490426, 5: 0.8311377353966236, 6: 0.5342728190124035, 7: 0.5106164358556271, 8: 0.5397471364587545, 9: 0.917871107161045, 10: 0.36978465542197225, 11: 0.3502662867307663, 12: 0.34318371415138244, 13: 0.3519756354391575, 14: 0.43651325404644015} run.monitor # Store the best score and its epoch. [13] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) Monitor(metric='val_loss', mode='min', best_score=0.343, best_epoch=12) run.early_stopping # Current `wait`. [14] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) EarlyStopping(patience=10, wait=2) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) Trainer(epoch=14, epochs=5, global_step=899, batch_size=10, shuffle=True, dataloaders='ivory.torch.data.DataLoaders', verbose=2, loss=<function mse_loss at 0x00000107B06BB5E8>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Training a Model</span></span></span>"},{"location":"tutorial/training/#training-a-model","text":"First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 \"\"\") params [2] 2020-06-01 16:02:21 ( 7.00ms ) python3 ( 23.9s ) {'library': 'torch', 'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': None, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'batch_size': 10, 'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . ivory.core.instance.create_base_instance() is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() because it can create multiple objects by one step processing $ -notation properly. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-06-01 16:02:21 ( 6.00ms ) python3 ( 23.9s ) ['datasets', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer']","title":"Training a Model"},{"location":"tutorial/training/#callbacks","text":"Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-06-01 16:02:21 ( 34.0ms ) python3 ( 23.9s ) [datasets] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_init_begin on_train_begin on_val_begin on_epoch_end on_test_begin","title":"Callbacks"},{"location":"tutorial/training/#metrics","text":"The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-06-01 16:02:21 ( 4.00ms ) python3 ( 23.9s ) Metrics()","title":"Metrics"},{"location":"tutorial/training/#monitor","text":"The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-06-01 16:02:21 ( 4.00ms ) python3 ( 23.9s ) Monitor(metric='val_loss', mode='min')","title":"Monitor"},{"location":"tutorial/training/#earlystopping","text":"The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-06-01 16:02:21 ( 4.00ms ) python3 ( 23.9s ) EarlyStopping(patience=10, wait=0)","title":"EarlyStopping"},{"location":"tutorial/training/#trainer","text":"The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-06-01 16:02:21 ( 5.00ms ) python3 ( 23.9s ) Trainer(epoch=-1, epochs=10, global_step=-1, batch_size=10, shuffle=True, dataloaders='ivory.torch.data.DataLoaders', verbose=2, loss=<function mse_loss at 0x00000107B06BB5E8>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Trainer"},{"location":"tutorial/training/#using-a-trainer","text":"A Run instance invokes its trainer by Run.start() . run.start() # create_callbacks() is called automatically. [9] 2020-06-01 16:02:21 ( 533ms ) python3 ( 24.5s ) [epoch#0] loss=12.67 val_loss=6.914 lr=0.001 best [epoch#1] loss=5.519 val_loss=4.283 lr=0.001 best [epoch#2] loss=3.864 val_loss=2.974 lr=0.001 best [epoch#3] loss=2.35 val_loss=1.613 lr=0.001 best [epoch#4] loss=1.42 val_loss=1.236 lr=0.001 best [epoch#5] loss=0.8209 val_loss=0.8311 lr=0.001 best [epoch#6] loss=0.6738 val_loss=0.5343 lr=0.001 best [epoch#7] loss=0.5483 val_loss=0.5106 lr=0.001 best [epoch#8] loss=0.4903 val_loss=0.5397 lr=0.001 [epoch#9] loss=0.4466 val_loss=0.9179 lr=0.001 You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-06-01 16:02:22 ( 265ms ) python3 ( 24.7s ) [epoch#10] loss=0.4251 val_loss=0.3698 lr=0.001 best [epoch#11] loss=0.412 val_loss=0.3503 lr=0.001 best [epoch#12] loss=0.4053 val_loss=0.3432 lr=0.001 best [epoch#13] loss=0.3519 val_loss=0.352 lr=0.001 [epoch#14] loss=0.3584 val_loss=0.4365 lr=0.001 Note The Run.start() doesn't reset the trainer's epoch.","title":"Using a Trainer"},{"location":"tutorial/training/#callbacks-after-training","text":"After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) Metrics(loss=0.3584, val_loss=0.4365, lr=0.001) run.metrics.history.val_loss # Metrics history. [12] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) {0: 6.914260828495026, 1: 4.283172708749771, 2: 2.9741749703884124, 3: 1.6126258432865144, 4: 1.2363424852490426, 5: 0.8311377353966236, 6: 0.5342728190124035, 7: 0.5106164358556271, 8: 0.5397471364587545, 9: 0.917871107161045, 10: 0.36978465542197225, 11: 0.3502662867307663, 12: 0.34318371415138244, 13: 0.3519756354391575, 14: 0.43651325404644015} run.monitor # Store the best score and its epoch. [13] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) Monitor(metric='val_loss', mode='min', best_score=0.343, best_epoch=12) run.early_stopping # Current `wait`. [14] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) EarlyStopping(patience=10, wait=2) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-06-01 16:02:22 ( 4.00ms ) python3 ( 24.7s ) Trainer(epoch=14, epochs=5, global_step=899, batch_size=10, shuffle=True, dataloaders='ivory.torch.data.DataLoaders', verbose=2, loss=<function mse_loss at 0x00000107B06BB5E8>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Callbacks after Training"},{"location":"tutorial/tuning/","text":"Hyperparameter Tuning Suggest Function To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the offical Optuna documentation . Note In the suggest_hidden_sizes() , we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-06-01 16:02:22 ( 5.00ms ) python3 ( 24.8s ) Study Ivory implements a special run class Study that controls hyperparameter tuning using Optuna. import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-06-01 16:02:22 ( 93.0ms ) python3 ( 24.9s ) [I 200601 16:02:22 tracker:48] A new experiment created with name: 'torch' Study(id='10a4e7afd5894e6aac192c79d0ed9804', name='study#0', num_instances=5) In the Client.create_study() , you can pass a keyword argument in which the key is a suggest name and the value is a pure suggest function. Objective The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and sends it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-06-01 16:02:22 ( 5.00ms ) python3 ( 24.9s ) Objective(['lr']) study_hs.objective [6] 2020-06-01 16:02:22 ( 3.00ms ) python3 ( 24.9s ) Objective(['hidden_sizes']) Optimization Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-06-01 16:02:22 ( 1.96s ) python3 ( 26.8s ) [I 2020-06-01 16:02:22,837] A new study created with name: torch.lr.study#0 [run#0] lr=0.0007296 fold=3 epochs=3 [epoch#0] loss=26.22 val_loss=9.453 lr=0.0007296 best [epoch#1] loss=9.018 val_loss=8.927 lr=0.0007296 best [epoch#2] loss=8.472 val_loss=8.368 lr=0.0007296 best [I 2020-06-01 16:02:23,495] Finished trial#0 with value: 8.36750864982605 with parameters: {'lr': 0.0007296364038165116}. Best is trial#0 with value: 8.36750864982605. [run#1] lr=0.00152 fold=3 epochs=3 [epoch#0] loss=23.21 val_loss=6.118 lr=0.00152 best [epoch#1] loss=5.246 val_loss=4.808 lr=0.00152 best [epoch#2] loss=4.062 val_loss=3.572 lr=0.00152 best [I 2020-06-01 16:02:24,120] Finished trial#1 with value: 3.5724159121513366 with parameters: {'lr': 0.00151999034447815}. Best is trial#1 with value: 3.5724159121513366. [run#2] lr=4.336e-05 fold=3 epochs=3 [epoch#0] loss=98.48 val_loss=88.99 lr=4.336e-05 best [epoch#1] loss=84.17 val_loss=73.12 lr=4.336e-05 best [epoch#2] loss=65.07 val_loss=51.58 lr=4.336e-05 best [I 2020-06-01 16:02:24,750] Finished trial#2 with value: 51.58238096237183 with parameters: {'lr': 4.336427792917512e-05}. Best is trial#1 with value: 3.5724159121513366. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-06-01 16:02:24 ( 2.06s ) python3 ( 28.9s ) [I 2020-06-01 16:02:24,779] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=23 hidden_sizes:1=27 num_layers=2 epochs=3 [epoch#0] loss=27.55 val_loss=8.878 lr=0.001 best [epoch#1] loss=8.155 val_loss=7.052 lr=0.001 best [epoch#2] loss=6.743 val_loss=5.822 lr=0.001 best [I 2020-06-01 16:02:25,446] Finished trial#0 with value: 5.8218504071235655 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 27, 'num_layers': 2}. Best is trial#0 with value: 5.8218504071235655. [run#4] hidden_sizes:0=30 hidden_sizes:1=15 hidden_sizes:2=17 num_layers=3 epochs=3 [epoch#0] loss=43.82 val_loss=10.74 lr=0.001 best [epoch#1] loss=7.761 val_loss=6.937 lr=0.001 best [epoch#2] loss=6.151 val_loss=6.047 lr=0.001 best [I 2020-06-01 16:02:26,131] Finished trial#1 with value: 6.046673607826233 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 15, 'hidden_sizes:2': 17, 'num_layers': 3}. Best is trial#0 with value: 5.8218504071235655. [run#5] hidden_sizes:0=23 hidden_sizes:1=11 hidden_sizes:2=16 num_layers=3 epochs=3 [epoch#0] loss=38.12 val_loss=9.122 lr=0.001 best [epoch#1] loss=8.344 val_loss=7.541 lr=0.001 best [epoch#2] loss=7.369 val_loss=6.263 lr=0.001 best [I 2020-06-01 16:02:26,816] Finished trial#2 with value: 6.263044774532318 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 11, 'hidden_sizes:2': 16, 'num_layers': 3}. Best is trial#0 with value: 5.8218504071235655. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the Study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-06-01 16:02:26 ( 3.00ms ) python3 ( 28.9s ) <optuna.study.Study at 0x10990e1e8c8> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-06-01 16:02:26 ( 4.00ms ) python3 ( 28.9s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, Run ID is saved. optuna_study_lr.user_attrs [11] 2020-06-01 16:02:26 ( 4.00ms ) python3 ( 28.9s ) {'run_id': '10a4e7afd5894e6aac192c79d0ed9804'} optuna_study_lr.trials[0].user_attrs [12] 2020-06-01 16:02:26 ( 5.00ms ) python3 ( 28.9s ) {'run_id': '73f74f22d0c641b09753948b88eda907'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-06-01 16:02:26 ( 3.00ms ) python3 ( 28.9s ) <mlflow.tracking.client.MlflowClient at 0x10990d04e08> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-06-01 16:02:26 ( 8.00ms ) python3 ( 28.9s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-06-01 16:02:26 ( 10.0ms ) python3 ( 29.0s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 10 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 The Monitor instance monitors val_loss (actually this is the default value, so that you can delete this line) and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max Parametric Optimization Again read the suggest functions. File 11 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() has some logic but the code of the suggest_lr() is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass key-iterable pairs to the client.create_study() instead of key-callable pairs. tuple, range, Range A tuple, range, or Range instance represents parameter range. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-06-01 16:02:26 ( 2.15s ) python3 ( 31.1s ) [I 2020-06-01 16:02:26,953] A new study created with name: torch.lr.study#2 [run#6] lr=0.002982 epochs=1 [I 2020-06-01 16:02:27,372] Finished trial#0 with value: 4.489611351490021 with parameters: {'lr': 0.00298249617800225}. Best is trial#0 with value: 4.489611351490021. [run#7] lr=0.009086 epochs=1 [I 2020-06-01 16:02:27,778] Finished trial#1 with value: 10.493020939826966 with parameters: {'lr': 0.009085724687667177}. Best is trial#0 with value: 4.489611351490021. [run#8] lr=0.006917 epochs=1 [I 2020-06-01 16:02:28,196] Finished trial#2 with value: 56.50038299560547 with parameters: {'lr': 0.006917138901461109}. Best is trial#0 with value: 4.489611351490021. [run#9] lr=0.006524 epochs=1 [I 2020-06-01 16:02:28,606] Finished trial#3 with value: 7.273122251033783 with parameters: {'lr': 0.006524338042706739}. Best is trial#0 with value: 4.489611351490021. [run#10] lr=0.00352 epochs=1 [I 2020-06-01 16:02:29,019] Finished trial#4 with value: 12.133405888080597 with parameters: {'lr': 0.003519543703356591}. Best is trial#0 with value: 4.489611351490021. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 21)} # Range(10, 20), or (10, 20) study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-06-01 16:02:29 ( 2.24s ) python3 ( 33.3s ) [I 2020-06-01 16:02:29,128] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=12 epochs=1 [I 2020-06-01 16:02:29,559] Finished trial#0 with value: 7.304953217506409 with parameters: {'hidden_sizes.0': 12}. Best is trial#0 with value: 7.304953217506409. [run#12] hidden_sizes.0=13 epochs=1 [I 2020-06-01 16:02:29,978] Finished trial#1 with value: 7.787579524517059 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 7.304953217506409. [run#13] hidden_sizes.0=20 epochs=1 [I 2020-06-01 16:02:30,406] Finished trial#2 with value: 7.6509146928787235 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 7.304953217506409. [run#14] hidden_sizes.0=17 epochs=1 [I 2020-06-01 16:02:30,832] Finished trial#3 with value: 6.20806759595871 with parameters: {'hidden_sizes.0': 17}. Best is trial#3 with value: 6.20806759595871. [run#15] hidden_sizes.0=14 epochs=1 [I 2020-06-01 16:02:31,261] Finished trial#4 with value: 8.566307067871094 with parameters: {'hidden_sizes.0': 14}. Best is trial#3 with value: 6.20806759595871. You can specify a step params = {'hidden_sizes.0': range(10, 21, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-06-01 16:02:31 ( 2.33s ) python3 ( 35.7s ) [I 2020-06-01 16:02:31,382] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=10 epochs=1 [I 2020-06-01 16:02:31,829] Finished trial#0 with value: 8.841110181808471 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 8.841110181808471. [run#17] hidden_sizes.0=13 epochs=1 [I 2020-06-01 16:02:32,261] Finished trial#1 with value: 8.839616525173188 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 8.839616525173188. [run#18] hidden_sizes.0=19 epochs=1 [I 2020-06-01 16:02:32,697] Finished trial#2 with value: 8.187466287612915 with parameters: {'hidden_sizes.0': 19}. Best is trial#2 with value: 8.187466287612915. [run#19] hidden_sizes.0=13 epochs=1 [I 2020-06-01 16:02:33,144] Finished trial#3 with value: 8.38949590921402 with parameters: {'hidden_sizes.0': 13}. Best is trial#2 with value: 8.187466287612915. [run#20] hidden_sizes.0=19 epochs=1 [I 2020-06-01 16:02:33,591] Finished trial#4 with value: 9.02156982421875 with parameters: {'hidden_sizes.0': 19}. Best is trial#2 with value: 8.187466287612915. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-06-01 16:02:33 ( 2.46s ) python3 ( 38.1s ) [I 2020-06-01 16:02:33,728] A new study created with name: torch.lr.study#5 [run#21] lr=0.001837 epochs=1 [I 2020-06-01 16:02:34,196] Finished trial#0 with value: 7.482998079061508 with parameters: {'lr': 0.0018367971308171946}. Best is trial#0 with value: 7.482998079061508. [run#22] lr=0.00201 epochs=1 [I 2020-06-01 16:02:34,650] Finished trial#1 with value: 9.565197694301606 with parameters: {'lr': 0.0020102687853020772}. Best is trial#0 with value: 7.482998079061508. [run#23] lr=0.001027 epochs=1 [I 2020-06-01 16:02:35,115] Finished trial#2 with value: 9.117055666446685 with parameters: {'lr': 0.0010269687553967277}. Best is trial#0 with value: 7.482998079061508. [run#24] lr=0.001678 epochs=1 [I 2020-06-01 16:02:35,579] Finished trial#3 with value: 7.085615241527558 with parameters: {'lr': 0.0016780971789582058}. Best is trial#3 with value: 7.085615241527558. [run#25] lr=0.00152 epochs=1 [I 2020-06-01 16:02:36,048] Finished trial#4 with value: 8.383049619197845 with parameters: {'lr': 0.001519861797192682}. Best is trial#3 with value: 7.085615241527558. list A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-06-01 16:02:36 ( 2.54s ) python3 ( 40.7s ) [I 2020-06-01 16:02:36,203] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:36,680] Finished trial#0 with value: 8.047224259376526 with parameters: {'hidden_sizes.0': 30}. Best is trial#0 with value: 8.047224259376526. [run#27] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:37,153] Finished trial#1 with value: 7.751013541221619 with parameters: {'hidden_sizes.0': 30}. Best is trial#1 with value: 7.751013541221619. [run#28] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:37,627] Finished trial#2 with value: 8.376126301288604 with parameters: {'hidden_sizes.0': 30}. Best is trial#1 with value: 7.751013541221619. [run#29] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:38,103] Finished trial#3 with value: 7.69804437160492 with parameters: {'hidden_sizes.0': 30}. Best is trial#3 with value: 7.69804437160492. [run#30] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:38,590] Finished trial#4 with value: 7.39129501581192 with parameters: {'hidden_sizes.0': 30}. Best is trial#4 with value: 7.39129501581192. Product If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-06-01 16:02:38 ( 5.58s ) python3 ( 46.2s ) [I 2020-06-01 16:02:38,758] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=11 hidden_sizes:1=12 lr=0.0004503 num_layers=2 epochs=1 [I 2020-06-01 16:02:39,248] Finished trial#0 with value: 10.726746129989625 with parameters: {'hidden_sizes:0': 11, 'hidden_sizes:1': 12, 'lr': 0.00045031609876315974, 'num_layers': 2}. Best is trial#0 with value: 10.726746129989625. [run#32] hidden_sizes:0=26 hidden_sizes:1=30 hidden_sizes:2=12 lr=0.0001426 num_layers=3 epochs=1 [I 2020-06-01 16:02:39,788] Finished trial#1 with value: 100.86142787933349 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 30, 'hidden_sizes:2': 12, 'lr': 0.0001425602882342697, 'num_layers': 3}. Best is trial#0 with value: 10.726746129989625. [run#33] hidden_sizes:0=12 hidden_sizes:1=20 lr=0.0002658 num_layers=2 epochs=1 [I 2020-06-01 16:02:40,310] Finished trial#2 with value: 92.74196796417236 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 20, 'lr': 0.00026575557923274565, 'num_layers': 2}. Best is trial#0 with value: 10.726746129989625. [run#34] hidden_sizes:0=19 hidden_sizes:1=13 lr=0.0002175 num_layers=2 epochs=1 [I 2020-06-01 16:02:40,836] Finished trial#3 with value: 26.954834866523743 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 13, 'lr': 0.00021749935539871942, 'num_layers': 2}. Best is trial#0 with value: 10.726746129989625. [run#35] hidden_sizes:0=26 hidden_sizes:1=16 hidden_sizes:2=21 lr=0.0004598 num_layers=3 epochs=1 [I 2020-06-01 16:02:41,394] Finished trial#4 with value: 8.748417162895203 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 16, 'hidden_sizes:2': 21, 'lr': 0.0004597514405335076, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#36] hidden_sizes:0=30 hidden_sizes:1=30 hidden_sizes:2=13 lr=0.0004395 num_layers=3 epochs=1 [I 2020-06-01 16:02:41,952] Finished trial#5 with value: 13.098746943473817 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 30, 'hidden_sizes:2': 13, 'lr': 0.00043947977368567916, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#37] hidden_sizes:0=20 hidden_sizes:1=25 hidden_sizes:2=19 lr=0.0002468 num_layers=3 epochs=1 [I 2020-06-01 16:02:42,509] Finished trial#6 with value: 17.363618278503417 with parameters: {'hidden_sizes:0': 20, 'hidden_sizes:1': 25, 'hidden_sizes:2': 19, 'lr': 0.00024680432091553844, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#38] hidden_sizes:0=27 hidden_sizes:1=26 hidden_sizes:2=20 lr=0.0006213 num_layers=3 epochs=1 [I 2020-06-01 16:02:43,063] Finished trial#7 with value: 12.558855342864991 with parameters: {'hidden_sizes:0': 27, 'hidden_sizes:1': 26, 'hidden_sizes:2': 20, 'lr': 0.00062134815350497, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#39] hidden_sizes:0=12 hidden_sizes:1=17 hidden_sizes:2=27 lr=0.0002993 num_layers=3 epochs=1 [I 2020-06-01 16:02:43,625] Finished trial#8 with value: 8.601172745227814 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 17, 'hidden_sizes:2': 27, 'lr': 0.00029930084554780637, 'num_layers': 3}. Best is trial#8 with value: 8.601172745227814. [run#40] hidden_sizes:0=25 hidden_sizes:1=17 lr=0.0006255 num_layers=2 epochs=1 [I 2020-06-01 16:02:44,173] Finished trial#9 with value: 7.267192828655243 with parameters: {'hidden_sizes:0': 25, 'hidden_sizes:1': 17, 'lr': 0.000625545395697247, 'num_layers': 2}. Best is trial#9 with value: 7.267192828655243. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" is better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-06-01 16:02:44 ( 3.00ms ) python3 ( 46.2s ) 'torch.hidden_sizes.lr.study#7' Study from YAML file As a normal Run , a Study instance also can be created from a YAML file. Pass an extra keyword argument to the client.create_experiment() . The key is the instance name (in this case study ) and value is a YAML file name without its extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-06-01 16:02:44 ( 10.0ms ) python3 ( 46.3s ) Experiment(id='1', name='torch', num_instances=1) Here is the contents of study.yml file. File 12 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses a def key to create a callable. On the other hand, lr is just one line. If a suggest funtion can be called without additional arguments, you can omit the def key. Using this experiment, we can create Study instances with a suggest function. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-06-01 16:02:44 ( 174ms ) python3 ( 46.4s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-06-01 16:02:44 ( 168ms ) python3 ( 46.6s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-06-01 16:02:44 ( 3.00ms ) python3 ( 46.6s ) functools.partial(<function suggest_hidden_sizes at 0x000001098D2B9708>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-06-01 16:02:44 ( 2.29s ) python3 ( 48.9s ) [I 2020-06-01 16:02:44,574] A new study created with name: torch.lr.study#8 [run#41] lr=0.0001638 epochs=3 [I 2020-06-01 16:02:45,336] Finished trial#0 with value: 11.169851732254028 with parameters: {'lr': 0.00016382278397587404}. Best is trial#0 with value: 11.169851732254028. [run#42] lr=1.847e-05 epochs=3 [I 2020-06-01 16:02:46,094] Finished trial#1 with value: 86.14067707061767 with parameters: {'lr': 1.8474149766833795e-05}. Best is trial#0 with value: 11.169851732254028. [run#43] lr=3.124e-05 epochs=3 [I 2020-06-01 16:02:46,838] Finished trial#2 with value: 66.50764875411987 with parameters: {'lr': 3.1242870434469704e-05}. Best is trial#0 with value: 11.169851732254028. <optuna.study.Study at 0x10990edbd48> Pruning Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is updated contents of study.yml file. File 13 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna in order to determine the step of pruning. Note Pruning is supported for PyTorch and TensorFlow now.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Hyperparameter Tuning</span></span></span>"},{"location":"tutorial/tuning/#hyperparameter-tuning","text":"","title":"Hyperparameter Tuning"},{"location":"tutorial/tuning/#suggest-function","text":"To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the offical Optuna documentation . Note In the suggest_hidden_sizes() , we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-06-01 16:02:22 ( 5.00ms ) python3 ( 24.8s )","title":"Suggest Function"},{"location":"tutorial/tuning/#study","text":"Ivory implements a special run class Study that controls hyperparameter tuning using Optuna. import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-06-01 16:02:22 ( 93.0ms ) python3 ( 24.9s ) [I 200601 16:02:22 tracker:48] A new experiment created with name: 'torch' Study(id='10a4e7afd5894e6aac192c79d0ed9804', name='study#0', num_instances=5) In the Client.create_study() , you can pass a keyword argument in which the key is a suggest name and the value is a pure suggest function.","title":"Study"},{"location":"tutorial/tuning/#objective","text":"The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and sends it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-06-01 16:02:22 ( 5.00ms ) python3 ( 24.9s ) Objective(['lr']) study_hs.objective [6] 2020-06-01 16:02:22 ( 3.00ms ) python3 ( 24.9s ) Objective(['hidden_sizes'])","title":"Objective"},{"location":"tutorial/tuning/#optimization","text":"Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-06-01 16:02:22 ( 1.96s ) python3 ( 26.8s ) [I 2020-06-01 16:02:22,837] A new study created with name: torch.lr.study#0 [run#0] lr=0.0007296 fold=3 epochs=3 [epoch#0] loss=26.22 val_loss=9.453 lr=0.0007296 best [epoch#1] loss=9.018 val_loss=8.927 lr=0.0007296 best [epoch#2] loss=8.472 val_loss=8.368 lr=0.0007296 best [I 2020-06-01 16:02:23,495] Finished trial#0 with value: 8.36750864982605 with parameters: {'lr': 0.0007296364038165116}. Best is trial#0 with value: 8.36750864982605. [run#1] lr=0.00152 fold=3 epochs=3 [epoch#0] loss=23.21 val_loss=6.118 lr=0.00152 best [epoch#1] loss=5.246 val_loss=4.808 lr=0.00152 best [epoch#2] loss=4.062 val_loss=3.572 lr=0.00152 best [I 2020-06-01 16:02:24,120] Finished trial#1 with value: 3.5724159121513366 with parameters: {'lr': 0.00151999034447815}. Best is trial#1 with value: 3.5724159121513366. [run#2] lr=4.336e-05 fold=3 epochs=3 [epoch#0] loss=98.48 val_loss=88.99 lr=4.336e-05 best [epoch#1] loss=84.17 val_loss=73.12 lr=4.336e-05 best [epoch#2] loss=65.07 val_loss=51.58 lr=4.336e-05 best [I 2020-06-01 16:02:24,750] Finished trial#2 with value: 51.58238096237183 with parameters: {'lr': 4.336427792917512e-05}. Best is trial#1 with value: 3.5724159121513366. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-06-01 16:02:24 ( 2.06s ) python3 ( 28.9s ) [I 2020-06-01 16:02:24,779] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=23 hidden_sizes:1=27 num_layers=2 epochs=3 [epoch#0] loss=27.55 val_loss=8.878 lr=0.001 best [epoch#1] loss=8.155 val_loss=7.052 lr=0.001 best [epoch#2] loss=6.743 val_loss=5.822 lr=0.001 best [I 2020-06-01 16:02:25,446] Finished trial#0 with value: 5.8218504071235655 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 27, 'num_layers': 2}. Best is trial#0 with value: 5.8218504071235655. [run#4] hidden_sizes:0=30 hidden_sizes:1=15 hidden_sizes:2=17 num_layers=3 epochs=3 [epoch#0] loss=43.82 val_loss=10.74 lr=0.001 best [epoch#1] loss=7.761 val_loss=6.937 lr=0.001 best [epoch#2] loss=6.151 val_loss=6.047 lr=0.001 best [I 2020-06-01 16:02:26,131] Finished trial#1 with value: 6.046673607826233 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 15, 'hidden_sizes:2': 17, 'num_layers': 3}. Best is trial#0 with value: 5.8218504071235655. [run#5] hidden_sizes:0=23 hidden_sizes:1=11 hidden_sizes:2=16 num_layers=3 epochs=3 [epoch#0] loss=38.12 val_loss=9.122 lr=0.001 best [epoch#1] loss=8.344 val_loss=7.541 lr=0.001 best [epoch#2] loss=7.369 val_loss=6.263 lr=0.001 best [I 2020-06-01 16:02:26,816] Finished trial#2 with value: 6.263044774532318 with parameters: {'hidden_sizes:0': 23, 'hidden_sizes:1': 11, 'hidden_sizes:2': 16, 'num_layers': 3}. Best is trial#0 with value: 5.8218504071235655. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the Study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-06-01 16:02:26 ( 3.00ms ) python3 ( 28.9s ) <optuna.study.Study at 0x10990e1e8c8> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-06-01 16:02:26 ( 4.00ms ) python3 ( 28.9s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, Run ID is saved. optuna_study_lr.user_attrs [11] 2020-06-01 16:02:26 ( 4.00ms ) python3 ( 28.9s ) {'run_id': '10a4e7afd5894e6aac192c79d0ed9804'} optuna_study_lr.trials[0].user_attrs [12] 2020-06-01 16:02:26 ( 5.00ms ) python3 ( 28.9s ) {'run_id': '73f74f22d0c641b09753948b88eda907'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-06-01 16:02:26 ( 3.00ms ) python3 ( 28.9s ) <mlflow.tracking.client.MlflowClient at 0x10990d04e08> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-06-01 16:02:26 ( 8.00ms ) python3 ( 28.9s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-06-01 16:02:26 ( 10.0ms ) python3 ( 29.0s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 10 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 shuffle: true verbose: 2 The Monitor instance monitors val_loss (actually this is the default value, so that you can delete this line) and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max","title":"Optimization"},{"location":"tutorial/tuning/#parametric-optimization","text":"Again read the suggest functions. File 11 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() has some logic but the code of the suggest_lr() is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass key-iterable pairs to the client.create_study() instead of key-callable pairs.","title":"Parametric Optimization"},{"location":"tutorial/tuning/#tuple-range-range","text":"A tuple, range, or Range instance represents parameter range. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-06-01 16:02:26 ( 2.15s ) python3 ( 31.1s ) [I 2020-06-01 16:02:26,953] A new study created with name: torch.lr.study#2 [run#6] lr=0.002982 epochs=1 [I 2020-06-01 16:02:27,372] Finished trial#0 with value: 4.489611351490021 with parameters: {'lr': 0.00298249617800225}. Best is trial#0 with value: 4.489611351490021. [run#7] lr=0.009086 epochs=1 [I 2020-06-01 16:02:27,778] Finished trial#1 with value: 10.493020939826966 with parameters: {'lr': 0.009085724687667177}. Best is trial#0 with value: 4.489611351490021. [run#8] lr=0.006917 epochs=1 [I 2020-06-01 16:02:28,196] Finished trial#2 with value: 56.50038299560547 with parameters: {'lr': 0.006917138901461109}. Best is trial#0 with value: 4.489611351490021. [run#9] lr=0.006524 epochs=1 [I 2020-06-01 16:02:28,606] Finished trial#3 with value: 7.273122251033783 with parameters: {'lr': 0.006524338042706739}. Best is trial#0 with value: 4.489611351490021. [run#10] lr=0.00352 epochs=1 [I 2020-06-01 16:02:29,019] Finished trial#4 with value: 12.133405888080597 with parameters: {'lr': 0.003519543703356591}. Best is trial#0 with value: 4.489611351490021. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 21)} # Range(10, 20), or (10, 20) study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-06-01 16:02:29 ( 2.24s ) python3 ( 33.3s ) [I 2020-06-01 16:02:29,128] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=12 epochs=1 [I 2020-06-01 16:02:29,559] Finished trial#0 with value: 7.304953217506409 with parameters: {'hidden_sizes.0': 12}. Best is trial#0 with value: 7.304953217506409. [run#12] hidden_sizes.0=13 epochs=1 [I 2020-06-01 16:02:29,978] Finished trial#1 with value: 7.787579524517059 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 7.304953217506409. [run#13] hidden_sizes.0=20 epochs=1 [I 2020-06-01 16:02:30,406] Finished trial#2 with value: 7.6509146928787235 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 7.304953217506409. [run#14] hidden_sizes.0=17 epochs=1 [I 2020-06-01 16:02:30,832] Finished trial#3 with value: 6.20806759595871 with parameters: {'hidden_sizes.0': 17}. Best is trial#3 with value: 6.20806759595871. [run#15] hidden_sizes.0=14 epochs=1 [I 2020-06-01 16:02:31,261] Finished trial#4 with value: 8.566307067871094 with parameters: {'hidden_sizes.0': 14}. Best is trial#3 with value: 6.20806759595871. You can specify a step params = {'hidden_sizes.0': range(10, 21, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-06-01 16:02:31 ( 2.33s ) python3 ( 35.7s ) [I 2020-06-01 16:02:31,382] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=10 epochs=1 [I 2020-06-01 16:02:31,829] Finished trial#0 with value: 8.841110181808471 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 8.841110181808471. [run#17] hidden_sizes.0=13 epochs=1 [I 2020-06-01 16:02:32,261] Finished trial#1 with value: 8.839616525173188 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 8.839616525173188. [run#18] hidden_sizes.0=19 epochs=1 [I 2020-06-01 16:02:32,697] Finished trial#2 with value: 8.187466287612915 with parameters: {'hidden_sizes.0': 19}. Best is trial#2 with value: 8.187466287612915. [run#19] hidden_sizes.0=13 epochs=1 [I 2020-06-01 16:02:33,144] Finished trial#3 with value: 8.38949590921402 with parameters: {'hidden_sizes.0': 13}. Best is trial#2 with value: 8.187466287612915. [run#20] hidden_sizes.0=19 epochs=1 [I 2020-06-01 16:02:33,591] Finished trial#4 with value: 9.02156982421875 with parameters: {'hidden_sizes.0': 19}. Best is trial#2 with value: 8.187466287612915. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-06-01 16:02:33 ( 2.46s ) python3 ( 38.1s ) [I 2020-06-01 16:02:33,728] A new study created with name: torch.lr.study#5 [run#21] lr=0.001837 epochs=1 [I 2020-06-01 16:02:34,196] Finished trial#0 with value: 7.482998079061508 with parameters: {'lr': 0.0018367971308171946}. Best is trial#0 with value: 7.482998079061508. [run#22] lr=0.00201 epochs=1 [I 2020-06-01 16:02:34,650] Finished trial#1 with value: 9.565197694301606 with parameters: {'lr': 0.0020102687853020772}. Best is trial#0 with value: 7.482998079061508. [run#23] lr=0.001027 epochs=1 [I 2020-06-01 16:02:35,115] Finished trial#2 with value: 9.117055666446685 with parameters: {'lr': 0.0010269687553967277}. Best is trial#0 with value: 7.482998079061508. [run#24] lr=0.001678 epochs=1 [I 2020-06-01 16:02:35,579] Finished trial#3 with value: 7.085615241527558 with parameters: {'lr': 0.0016780971789582058}. Best is trial#3 with value: 7.085615241527558. [run#25] lr=0.00152 epochs=1 [I 2020-06-01 16:02:36,048] Finished trial#4 with value: 8.383049619197845 with parameters: {'lr': 0.001519861797192682}. Best is trial#3 with value: 7.085615241527558.","title":"tuple, range, Range"},{"location":"tutorial/tuning/#list","text":"A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-06-01 16:02:36 ( 2.54s ) python3 ( 40.7s ) [I 2020-06-01 16:02:36,203] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:36,680] Finished trial#0 with value: 8.047224259376526 with parameters: {'hidden_sizes.0': 30}. Best is trial#0 with value: 8.047224259376526. [run#27] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:37,153] Finished trial#1 with value: 7.751013541221619 with parameters: {'hidden_sizes.0': 30}. Best is trial#1 with value: 7.751013541221619. [run#28] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:37,627] Finished trial#2 with value: 8.376126301288604 with parameters: {'hidden_sizes.0': 30}. Best is trial#1 with value: 7.751013541221619. [run#29] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:38,103] Finished trial#3 with value: 7.69804437160492 with parameters: {'hidden_sizes.0': 30}. Best is trial#3 with value: 7.69804437160492. [run#30] hidden_sizes.0=30 epochs=1 [I 2020-06-01 16:02:38,590] Finished trial#4 with value: 7.39129501581192 with parameters: {'hidden_sizes.0': 30}. Best is trial#4 with value: 7.39129501581192.","title":"list"},{"location":"tutorial/tuning/#product","text":"If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-06-01 16:02:38 ( 5.58s ) python3 ( 46.2s ) [I 2020-06-01 16:02:38,758] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=11 hidden_sizes:1=12 lr=0.0004503 num_layers=2 epochs=1 [I 2020-06-01 16:02:39,248] Finished trial#0 with value: 10.726746129989625 with parameters: {'hidden_sizes:0': 11, 'hidden_sizes:1': 12, 'lr': 0.00045031609876315974, 'num_layers': 2}. Best is trial#0 with value: 10.726746129989625. [run#32] hidden_sizes:0=26 hidden_sizes:1=30 hidden_sizes:2=12 lr=0.0001426 num_layers=3 epochs=1 [I 2020-06-01 16:02:39,788] Finished trial#1 with value: 100.86142787933349 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 30, 'hidden_sizes:2': 12, 'lr': 0.0001425602882342697, 'num_layers': 3}. Best is trial#0 with value: 10.726746129989625. [run#33] hidden_sizes:0=12 hidden_sizes:1=20 lr=0.0002658 num_layers=2 epochs=1 [I 2020-06-01 16:02:40,310] Finished trial#2 with value: 92.74196796417236 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 20, 'lr': 0.00026575557923274565, 'num_layers': 2}. Best is trial#0 with value: 10.726746129989625. [run#34] hidden_sizes:0=19 hidden_sizes:1=13 lr=0.0002175 num_layers=2 epochs=1 [I 2020-06-01 16:02:40,836] Finished trial#3 with value: 26.954834866523743 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 13, 'lr': 0.00021749935539871942, 'num_layers': 2}. Best is trial#0 with value: 10.726746129989625. [run#35] hidden_sizes:0=26 hidden_sizes:1=16 hidden_sizes:2=21 lr=0.0004598 num_layers=3 epochs=1 [I 2020-06-01 16:02:41,394] Finished trial#4 with value: 8.748417162895203 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 16, 'hidden_sizes:2': 21, 'lr': 0.0004597514405335076, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#36] hidden_sizes:0=30 hidden_sizes:1=30 hidden_sizes:2=13 lr=0.0004395 num_layers=3 epochs=1 [I 2020-06-01 16:02:41,952] Finished trial#5 with value: 13.098746943473817 with parameters: {'hidden_sizes:0': 30, 'hidden_sizes:1': 30, 'hidden_sizes:2': 13, 'lr': 0.00043947977368567916, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#37] hidden_sizes:0=20 hidden_sizes:1=25 hidden_sizes:2=19 lr=0.0002468 num_layers=3 epochs=1 [I 2020-06-01 16:02:42,509] Finished trial#6 with value: 17.363618278503417 with parameters: {'hidden_sizes:0': 20, 'hidden_sizes:1': 25, 'hidden_sizes:2': 19, 'lr': 0.00024680432091553844, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#38] hidden_sizes:0=27 hidden_sizes:1=26 hidden_sizes:2=20 lr=0.0006213 num_layers=3 epochs=1 [I 2020-06-01 16:02:43,063] Finished trial#7 with value: 12.558855342864991 with parameters: {'hidden_sizes:0': 27, 'hidden_sizes:1': 26, 'hidden_sizes:2': 20, 'lr': 0.00062134815350497, 'num_layers': 3}. Best is trial#4 with value: 8.748417162895203. [run#39] hidden_sizes:0=12 hidden_sizes:1=17 hidden_sizes:2=27 lr=0.0002993 num_layers=3 epochs=1 [I 2020-06-01 16:02:43,625] Finished trial#8 with value: 8.601172745227814 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 17, 'hidden_sizes:2': 27, 'lr': 0.00029930084554780637, 'num_layers': 3}. Best is trial#8 with value: 8.601172745227814. [run#40] hidden_sizes:0=25 hidden_sizes:1=17 lr=0.0006255 num_layers=2 epochs=1 [I 2020-06-01 16:02:44,173] Finished trial#9 with value: 7.267192828655243 with parameters: {'hidden_sizes:0': 25, 'hidden_sizes:1': 17, 'lr': 0.000625545395697247, 'num_layers': 2}. Best is trial#9 with value: 7.267192828655243. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" is better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-06-01 16:02:44 ( 3.00ms ) python3 ( 46.2s ) 'torch.hidden_sizes.lr.study#7'","title":"Product"},{"location":"tutorial/tuning/#study-from-yaml-file","text":"As a normal Run , a Study instance also can be created from a YAML file. Pass an extra keyword argument to the client.create_experiment() . The key is the instance name (in this case study ) and value is a YAML file name without its extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-06-01 16:02:44 ( 10.0ms ) python3 ( 46.3s ) Experiment(id='1', name='torch', num_instances=1) Here is the contents of study.yml file. File 12 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses a def key to create a callable. On the other hand, lr is just one line. If a suggest funtion can be called without additional arguments, you can omit the def key. Using this experiment, we can create Study instances with a suggest function. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-06-01 16:02:44 ( 174ms ) python3 ( 46.4s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-06-01 16:02:44 ( 168ms ) python3 ( 46.6s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-06-01 16:02:44 ( 3.00ms ) python3 ( 46.6s ) functools.partial(<function suggest_hidden_sizes at 0x000001098D2B9708>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-06-01 16:02:44 ( 2.29s ) python3 ( 48.9s ) [I 2020-06-01 16:02:44,574] A new study created with name: torch.lr.study#8 [run#41] lr=0.0001638 epochs=3 [I 2020-06-01 16:02:45,336] Finished trial#0 with value: 11.169851732254028 with parameters: {'lr': 0.00016382278397587404}. Best is trial#0 with value: 11.169851732254028. [run#42] lr=1.847e-05 epochs=3 [I 2020-06-01 16:02:46,094] Finished trial#1 with value: 86.14067707061767 with parameters: {'lr': 1.8474149766833795e-05}. Best is trial#0 with value: 11.169851732254028. [run#43] lr=3.124e-05 epochs=3 [I 2020-06-01 16:02:46,838] Finished trial#2 with value: 66.50764875411987 with parameters: {'lr': 3.1242870434469704e-05}. Best is trial#0 with value: 11.169851732254028. <optuna.study.Study at 0x10990edbd48>","title":"Study from YAML file"},{"location":"tutorial/tuning/#pruning","text":"Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is updated contents of study.yml file. File 13 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna in order to determine the step of pruning. Note Pruning is supported for PyTorch and TensorFlow now.","title":"Pruning"},{"location":"tutorial/ui/","text":"Tracking UI Ivory uses MLFlow Tracking for the workflow tracking and model saving. For this feature, the Client instace has to have a Tracker instance. First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-06-01 16:02:47 ( 1.32s ) python3 ( 50.5s ) [I 200601 16:02:47 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=15.21 val_loss=6.163 lr=0.001 best [epoch#1] loss=6.349 val_loss=6.484 lr=0.001 [epoch#2] loss=5.355 val_loss=5.047 lr=0.001 best [epoch#3] loss=4.651 val_loss=4.046 lr=0.001 best [epoch#4] loss=3.716 val_loss=3.68 lr=0.001 best [epoch#5] loss=3.034 val_loss=2.497 lr=0.001 best [epoch#6] loss=2.178 val_loss=1.723 lr=0.001 best [epoch#7] loss=1.582 val_loss=1.386 lr=0.001 best [epoch#8] loss=1.209 val_loss=0.9656 lr=0.001 best [epoch#9] loss=0.9339 val_loss=0.8438 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-06-01 16:02:48 ( 4.13s ) python3 ( 54.6s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-06-01 16:02:52 ( 5.25s ) python3 ( 59.8s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-06-01 16:02:57 ( 7.37s ) python3 ( 1min7s ) [I 2020-06-01 16:02:57,902] A new study created with name: torch.lr.study#0 [run#8] lr=0.0001248 [I 2020-06-01 16:02:59,379] Finished trial#0 with value: 5.891539478302002 with parameters: {'lr': 0.0001247501030115909}. Best is trial#0 with value: 5.891539478302002. [run#9] lr=0.0003054 [I 2020-06-01 16:03:00,820] Finished trial#1 with value: 6.157648730278015 with parameters: {'lr': 0.00030535398551270255}. Best is trial#0 with value: 5.891539478302002. [run#10] lr=0.0002038 [I 2020-06-01 16:03:02,273] Finished trial#2 with value: 5.810854876041413 with parameters: {'lr': 0.00020381825645263737}. Best is trial#2 with value: 5.810854876041413. [run#11] lr=1.396e-05 [I 2020-06-01 16:03:03,725] Finished trial#3 with value: 76.04291610717773 with parameters: {'lr': 1.3958723114719481e-05}. Best is trial#2 with value: 5.810854876041413. [run#12] lr=5.17e-05 [I 2020-06-01 16:03:05,176] Finished trial#4 with value: 7.834332740306854 with parameters: {'lr': 5.169701976383759e-05}. Best is trial#2 with value: 5.810854876041413. <optuna.study.Study at 0x10990f126c8> Tracking UI Optionally, you can update missing parameters: client.update_params('torch') [7] 2020-06-01 16:03:05 ( 347ms ) python3 ( 1min8s ) In a terminal, move to the working directory ( examples ), then run $ ivory ui You can view the UI using URL http://localhost:5000 in your browser. Table 1 A collection of runs. Parameters, metrics, tags are logged. You can compare the training results among runs. Figure 1 Comparison of training curves See also the official MLFlow documentation .","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking UI</span></span></span>"},{"location":"tutorial/ui/#tracking-ui","text":"Ivory uses MLFlow Tracking for the workflow tracking and model saving. For this feature, the Client instace has to have a Tracker instance. First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-06-01 16:02:47 ( 1.32s ) python3 ( 50.5s ) [I 200601 16:02:47 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=15.21 val_loss=6.163 lr=0.001 best [epoch#1] loss=6.349 val_loss=6.484 lr=0.001 [epoch#2] loss=5.355 val_loss=5.047 lr=0.001 best [epoch#3] loss=4.651 val_loss=4.046 lr=0.001 best [epoch#4] loss=3.716 val_loss=3.68 lr=0.001 best [epoch#5] loss=3.034 val_loss=2.497 lr=0.001 best [epoch#6] loss=2.178 val_loss=1.723 lr=0.001 best [epoch#7] loss=1.582 val_loss=1.386 lr=0.001 best [epoch#8] loss=1.209 val_loss=0.9656 lr=0.001 best [epoch#9] loss=0.9339 val_loss=0.8438 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-06-01 16:02:48 ( 4.13s ) python3 ( 54.6s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-06-01 16:02:52 ( 5.25s ) python3 ( 59.8s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-06-01 16:02:57 ( 7.37s ) python3 ( 1min7s ) [I 2020-06-01 16:02:57,902] A new study created with name: torch.lr.study#0 [run#8] lr=0.0001248 [I 2020-06-01 16:02:59,379] Finished trial#0 with value: 5.891539478302002 with parameters: {'lr': 0.0001247501030115909}. Best is trial#0 with value: 5.891539478302002. [run#9] lr=0.0003054 [I 2020-06-01 16:03:00,820] Finished trial#1 with value: 6.157648730278015 with parameters: {'lr': 0.00030535398551270255}. Best is trial#0 with value: 5.891539478302002. [run#10] lr=0.0002038 [I 2020-06-01 16:03:02,273] Finished trial#2 with value: 5.810854876041413 with parameters: {'lr': 0.00020381825645263737}. Best is trial#2 with value: 5.810854876041413. [run#11] lr=1.396e-05 [I 2020-06-01 16:03:03,725] Finished trial#3 with value: 76.04291610717773 with parameters: {'lr': 1.3958723114719481e-05}. Best is trial#2 with value: 5.810854876041413. [run#12] lr=5.17e-05 [I 2020-06-01 16:03:05,176] Finished trial#4 with value: 7.834332740306854 with parameters: {'lr': 5.169701976383759e-05}. Best is trial#2 with value: 5.810854876041413. <optuna.study.Study at 0x10990f126c8>","title":"Tracking UI"},{"location":"tutorial/ui/#tracking-ui_1","text":"Optionally, you can update missing parameters: client.update_params('torch') [7] 2020-06-01 16:03:05 ( 347ms ) python3 ( 1min8s ) In a terminal, move to the working directory ( examples ), then run $ ivory ui You can view the UI using URL http://localhost:5000 in your browser. Table 1 A collection of runs. Parameters, metrics, tags are logged. You can compare the training results among runs. Figure 1 Comparison of training curves See also the official MLFlow documentation .","title":"Tracking UI"}]}
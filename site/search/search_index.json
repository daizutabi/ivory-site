{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ivory Documentation Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Documentation</span></span></span>"},{"location":"#ivory-documentation","text":"Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance.","title":"Ivory Documentation"},{"location":"quickstart/","text":"Quickstart Installation Install Ivory using pip . $ pip install ivory Using a Ivory Client Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the src directory. import ivory client = ivory.create_client(\"src\") client [2] 2020-05-26 22:04:15 ( 1.03s ) python3 ( 1.08s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [3] 2020-05-26 22:04:16 ( 3.00ms ) python3 ( 1.09s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/docs/src/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [4] 2020-05-26 22:04:16 ( 7.00ms ) python3 ( 1.09s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [5] 2020-05-26 22:04:16 ( 3.00ms ) python3 ( 1.10s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Create NumPy data In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function definition and an example output: Code 1 rectangle.data.create_data def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-26 22:04:16 ( 5.00ms ) python3 ( 1.12s ) array([[3.5081396, 3.1979494], [3.2195606, 2.2554057], [4.4544296, 4.439197 ], [4.936046 , 3.3216765]], dtype=float32) z [9] 2020-05-26 22:04:16 ( 4.00ms ) python3 ( 1.13s ) array([11.468119 , 7.1206207, 19.924067 , 16.265718 ], dtype=float32) Set of Data classes Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. Code 2 rectangle.data.Data @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Here, kfold_split function creates a fold-array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [11] 2020-05-26 22:04:16 ( 5.00ms ) python3 ( 1.15s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) In Ivory, fold number = -1 means their samples are test data. Now, we can get a Data instance. data = rectangle.data.Data() data [12] 2020-05-26 22:04:16 ( 4.00ms ) python3 ( 1.15s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [13] 2020-05-26 22:04:16 ( 4.00ms ) python3 ( 1.16s ) [0, array([1.8432103, 4.609573 ], dtype=float32), array([8.659351], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from. Define a model We use a simple MLP model here. Code 3 rectangle.torch.Model class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) Parameter file for Run Ivory configures a run using a YAML file. Here is a full example. File 2 torch.yaml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [16] 2020-05-26 22:04:17 ( 282ms ) python3 ( 1.72s ) [I 200526 22:04:17 tracker:48] A new experiment created with name: torch Run(id='a3cc1be3e125433985ab93b2cab6697a', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [17] 2020-05-26 22:04:17 ( 7.00ms ) python3 ( 1.73s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 100 - 100 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: criterion: def: torch.nn.functional.mse_loss class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: a3cc1be3e125433985ab93b2cab6697a experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method takes keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [18] 2020-05-26 22:04:17 ( 46.0ms ) python3 ( 1.78s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60 Train a model Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [19] 2020-05-26 22:04:17 ( 1.39s ) python3 ( 3.17s ) [epoch#0] loss=13.96 val_loss=7.594 lr=0.001 best [epoch#1] loss=6.593 val_loss=5.974 lr=0.001 best [epoch#2] loss=4.804 val_loss=3.929 lr=0.001 best [epoch#3] loss=3.019 val_loss=2.745 lr=0.001 best [epoch#4] loss=1.902 val_loss=1.838 lr=0.001 best [epoch#5] loss=1.293 val_loss=1.376 lr=0.001 best [epoch#6] loss=0.9551 val_loss=1.139 lr=0.001 best [epoch#7] loss=0.8582 val_loss=0.762 lr=0.001 best [epoch#8] loss=0.7334 val_loss=0.788 lr=0.001 [epoch#9] loss=0.5649 val_loss=0.6173 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [20] 2020-05-26 22:04:18 ( 4.00ms ) python3 ( 3.17s ) Dict('loss', 'val_loss', 'lr') Also the model output and target are automatically collected in a run.results instance. run.results [21] 2020-05-26 22:04:18 ( 4.00ms ) python3 ( 3.18s ) Results('train', 'val') run.results.val.output[:5] [22] 2020-05-26 22:04:18 ( 4.00ms ) python3 ( 3.18s ) array([[ 1.2727845], [ 8.176134 ], [ 3.063041 ], [12.490438 ], [ 2.8674748]], dtype=float32) run.results.val.target[:5] [23] 2020-05-26 22:04:18 ( 5.00ms ) python3 ( 3.19s ) array([[ 2.006633], [ 8.611808], [ 2.996488], [12.279479], [ 2.966431]], dtype=float32) Test a model Testing a model is as simple as training. Just call run.start('test') instead of (default) 'train' . run.start('test') run.results [24] 2020-05-26 22:04:18 ( 44.0ms ) python3 ( 3.23s ) Results('train', 'val', 'test') As you can see, test results were added. run.results.test.output[:5] [25] 2020-05-26 22:04:19 ( 4.00ms ) python3 ( 3.23s ) array([[10.046491 ], [ 7.4606986], [ 5.0891666], [ 3.112987 ], [13.940904 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [26] 2020-05-26 22:04:19 ( 4.00ms ) python3 ( 3.24s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32) Task for multiple runs Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [27] 2020-05-26 22:04:19 ( 46.0ms ) python3 ( 3.28s ) Task(id='474f9abe23b44d8dabe3c416e59459de', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [28] 2020-05-26 22:04:19 ( 4.00ms ) python3 ( 3.29s ) <generator object Task.product at 0x00000269BB6A1DC8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specified. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [29] 2020-05-26 22:04:19 ( 2.36s ) python3 ( 5.65s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3 Collect runs Our client has a Tracker instance. It stores the state of runs in background using the MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by the MLFlow Tracking. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [30] 2020-05-26 22:04:21 ( 4.00ms ) python3 ( 5.66s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [31] 2020-05-26 22:04:21 ( 71.0ms ) python3 ( 5.73s ) 08752 run#6 05752 run#5 2e86e run#4 b7448 run#3 474f9 task#0 12587 run#2 73ddc run#1 a3cc1 run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [32] 2020-05-26 22:04:21 ( 154ms ) python3 ( 5.88s ) b7448 run#3 12587 run#2 73ddc run#1 a3cc1 run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [33] 2020-05-26 22:04:21 ( 46.2ms ) python3 ( 5.93s ) 08752 run#6 05752 run#5 2e86e run#4 b7448 run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [34] 2020-05-26 22:04:21 ( 54.4ms ) python3 ( 5.98s ) a3cc1 run#0 474f9 task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [35] 2020-05-26 22:04:21 ( 57.0ms ) python3 ( 6.04s ) 12587 run#2 b7448 run#3 Load runs and results The Ivory Client class can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [36] 2020-05-26 22:04:21 ( 66.0ms ) python3 ( 6.10s ) 08752 run#6 05752 run#5 2e86e run#4 b7448 run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [37] 2020-05-26 22:04:21 ( 71.0ms ) python3 ( 6.18s ) Run(id='087528bad60b490f8b8afc96c00bf4e2', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [38] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.18s ) 3 By loading a run, we obtained the trained model. run.model.eval() [39] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.18s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=100, bias=True) (2): Linear(in_features=100, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [40] 2020-05-26 22:04:22 ( 9.00ms ) python3 ( 6.19s ) [output] tensor([[ 7.2992], [ 4.1828], [16.6566], [16.9913], [ 9.5552]]) [target] tensor([[ 5.6297], [ 2.6716], [19.1754], [20.0078], [ 8.1582]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [41] 2020-05-26 22:04:22 ( 24.0ms ) python3 ( 6.22s ) Results('train', 'val', 'test') for mode in ['train', 'val', 'test']: print(mode, results[mode].output.shape) [42] 2020-05-26 22:04:22 ( 7.00ms ) python3 ( 6.22s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. To load multiple run's results, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [43] 2020-05-26 22:04:22 ( 87.0ms ) python3 ( 6.31s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [44] 2020-05-26 22:04:22 ( 6.00ms ) python3 ( 6.32s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [45] 2020-05-26 22:04:22 ( 5.00ms ) python3 ( 6.32s ) (800, 200) Usually, duplicated samples are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode in ['val', 'test']: print(mode, reduced_results[mode].output.shape) [46] 2020-05-26 22:04:22 ( 12.0ms ) python3 ( 6.33s ) val (800, 1) test (200, 1) Compare the results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [47] 2020-05-26 22:04:22 ( 9.00ms ) python3 ( 6.34s ) [results] [[10.980542] [10.443864] [10.408991] [11.111648]] -> mean: 10.736261 [reduced_results] [[10.736261]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [48] 2020-05-26 22:04:22 ( 83.0ms ) python3 ( 6.43s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [49] 2020-05-26 22:04:22 ( 6.00ms ) python3 ( 6.43s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [50] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.44s ) 1.6083773 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [51] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.44s ) array([[10.736261], [ 8.132793], [ 6.867915], [ 4.708208], [12.903788]], dtype=float32) Summary In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Quickstart</span></span></span>"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Install Ivory using pip . $ pip install ivory","title":"Installation"},{"location":"quickstart/#using-a-ivory-client","text":"Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the src directory. import ivory client = ivory.create_client(\"src\") client [2] 2020-05-26 22:04:15 ( 1.03s ) python3 ( 1.08s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [3] 2020-05-26 22:04:16 ( 3.00ms ) python3 ( 1.09s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/docs/src/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [4] 2020-05-26 22:04:16 ( 7.00ms ) python3 ( 1.09s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [5] 2020-05-26 22:04:16 ( 3.00ms ) python3 ( 1.10s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Using a Ivory Client"},{"location":"quickstart/#create-numpy-data","text":"In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function definition and an example output: Code 1 rectangle.data.create_data def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-26 22:04:16 ( 5.00ms ) python3 ( 1.12s ) array([[3.5081396, 3.1979494], [3.2195606, 2.2554057], [4.4544296, 4.439197 ], [4.936046 , 3.3216765]], dtype=float32) z [9] 2020-05-26 22:04:16 ( 4.00ms ) python3 ( 1.13s ) array([11.468119 , 7.1206207, 19.924067 , 16.265718 ], dtype=float32)","title":"Create NumPy data"},{"location":"quickstart/#set-of-data-classes","text":"Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. Code 2 rectangle.data.Data @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Here, kfold_split function creates a fold-array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [11] 2020-05-26 22:04:16 ( 5.00ms ) python3 ( 1.15s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) In Ivory, fold number = -1 means their samples are test data. Now, we can get a Data instance. data = rectangle.data.Data() data [12] 2020-05-26 22:04:16 ( 4.00ms ) python3 ( 1.15s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [13] 2020-05-26 22:04:16 ( 4.00ms ) python3 ( 1.16s ) [0, array([1.8432103, 4.609573 ], dtype=float32), array([8.659351], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from.","title":"Set of Data classes"},{"location":"quickstart/#define-a-model","text":"We use a simple MLP model here. Code 3 rectangle.torch.Model class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x)","title":"Define a model"},{"location":"quickstart/#parameter-file-for-run","text":"Ivory configures a run using a YAML file. Here is a full example. File 2 torch.yaml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [16] 2020-05-26 22:04:17 ( 282ms ) python3 ( 1.72s ) [I 200526 22:04:17 tracker:48] A new experiment created with name: torch Run(id='a3cc1be3e125433985ab93b2cab6697a', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [17] 2020-05-26 22:04:17 ( 7.00ms ) python3 ( 1.73s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 100 - 100 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: criterion: def: torch.nn.functional.mse_loss class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: a3cc1be3e125433985ab93b2cab6697a experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method takes keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [18] 2020-05-26 22:04:17 ( 46.0ms ) python3 ( 1.78s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60","title":"Parameter file for Run"},{"location":"quickstart/#train-a-model","text":"Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [19] 2020-05-26 22:04:17 ( 1.39s ) python3 ( 3.17s ) [epoch#0] loss=13.96 val_loss=7.594 lr=0.001 best [epoch#1] loss=6.593 val_loss=5.974 lr=0.001 best [epoch#2] loss=4.804 val_loss=3.929 lr=0.001 best [epoch#3] loss=3.019 val_loss=2.745 lr=0.001 best [epoch#4] loss=1.902 val_loss=1.838 lr=0.001 best [epoch#5] loss=1.293 val_loss=1.376 lr=0.001 best [epoch#6] loss=0.9551 val_loss=1.139 lr=0.001 best [epoch#7] loss=0.8582 val_loss=0.762 lr=0.001 best [epoch#8] loss=0.7334 val_loss=0.788 lr=0.001 [epoch#9] loss=0.5649 val_loss=0.6173 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [20] 2020-05-26 22:04:18 ( 4.00ms ) python3 ( 3.17s ) Dict('loss', 'val_loss', 'lr') Also the model output and target are automatically collected in a run.results instance. run.results [21] 2020-05-26 22:04:18 ( 4.00ms ) python3 ( 3.18s ) Results('train', 'val') run.results.val.output[:5] [22] 2020-05-26 22:04:18 ( 4.00ms ) python3 ( 3.18s ) array([[ 1.2727845], [ 8.176134 ], [ 3.063041 ], [12.490438 ], [ 2.8674748]], dtype=float32) run.results.val.target[:5] [23] 2020-05-26 22:04:18 ( 5.00ms ) python3 ( 3.19s ) array([[ 2.006633], [ 8.611808], [ 2.996488], [12.279479], [ 2.966431]], dtype=float32)","title":"Train a model"},{"location":"quickstart/#test-a-model","text":"Testing a model is as simple as training. Just call run.start('test') instead of (default) 'train' . run.start('test') run.results [24] 2020-05-26 22:04:18 ( 44.0ms ) python3 ( 3.23s ) Results('train', 'val', 'test') As you can see, test results were added. run.results.test.output[:5] [25] 2020-05-26 22:04:19 ( 4.00ms ) python3 ( 3.23s ) array([[10.046491 ], [ 7.4606986], [ 5.0891666], [ 3.112987 ], [13.940904 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [26] 2020-05-26 22:04:19 ( 4.00ms ) python3 ( 3.24s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32)","title":"Test a model"},{"location":"quickstart/#task-for-multiple-runs","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [27] 2020-05-26 22:04:19 ( 46.0ms ) python3 ( 3.28s ) Task(id='474f9abe23b44d8dabe3c416e59459de', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [28] 2020-05-26 22:04:19 ( 4.00ms ) python3 ( 3.29s ) <generator object Task.product at 0x00000269BB6A1DC8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specified. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [29] 2020-05-26 22:04:19 ( 2.36s ) python3 ( 5.65s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3","title":"Task for multiple runs"},{"location":"quickstart/#collect-runs","text":"Our client has a Tracker instance. It stores the state of runs in background using the MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by the MLFlow Tracking. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [30] 2020-05-26 22:04:21 ( 4.00ms ) python3 ( 5.66s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [31] 2020-05-26 22:04:21 ( 71.0ms ) python3 ( 5.73s ) 08752 run#6 05752 run#5 2e86e run#4 b7448 run#3 474f9 task#0 12587 run#2 73ddc run#1 a3cc1 run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [32] 2020-05-26 22:04:21 ( 154ms ) python3 ( 5.88s ) b7448 run#3 12587 run#2 73ddc run#1 a3cc1 run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [33] 2020-05-26 22:04:21 ( 46.2ms ) python3 ( 5.93s ) 08752 run#6 05752 run#5 2e86e run#4 b7448 run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [34] 2020-05-26 22:04:21 ( 54.4ms ) python3 ( 5.98s ) a3cc1 run#0 474f9 task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [35] 2020-05-26 22:04:21 ( 57.0ms ) python3 ( 6.04s ) 12587 run#2 b7448 run#3","title":"Collect runs"},{"location":"quickstart/#load-runs-and-results","text":"The Ivory Client class can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [36] 2020-05-26 22:04:21 ( 66.0ms ) python3 ( 6.10s ) 08752 run#6 05752 run#5 2e86e run#4 b7448 run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [37] 2020-05-26 22:04:21 ( 71.0ms ) python3 ( 6.18s ) Run(id='087528bad60b490f8b8afc96c00bf4e2', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [38] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.18s ) 3 By loading a run, we obtained the trained model. run.model.eval() [39] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.18s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=100, bias=True) (2): Linear(in_features=100, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [40] 2020-05-26 22:04:22 ( 9.00ms ) python3 ( 6.19s ) [output] tensor([[ 7.2992], [ 4.1828], [16.6566], [16.9913], [ 9.5552]]) [target] tensor([[ 5.6297], [ 2.6716], [19.1754], [20.0078], [ 8.1582]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [41] 2020-05-26 22:04:22 ( 24.0ms ) python3 ( 6.22s ) Results('train', 'val', 'test') for mode in ['train', 'val', 'test']: print(mode, results[mode].output.shape) [42] 2020-05-26 22:04:22 ( 7.00ms ) python3 ( 6.22s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. To load multiple run's results, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [43] 2020-05-26 22:04:22 ( 87.0ms ) python3 ( 6.31s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [44] 2020-05-26 22:04:22 ( 6.00ms ) python3 ( 6.32s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [45] 2020-05-26 22:04:22 ( 5.00ms ) python3 ( 6.32s ) (800, 200) Usually, duplicated samples are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode in ['val', 'test']: print(mode, reduced_results[mode].output.shape) [46] 2020-05-26 22:04:22 ( 12.0ms ) python3 ( 6.33s ) val (800, 1) test (200, 1) Compare the results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [47] 2020-05-26 22:04:22 ( 9.00ms ) python3 ( 6.34s ) [results] [[10.980542] [10.443864] [10.408991] [11.111648]] -> mean: 10.736261 [reduced_results] [[10.736261]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [48] 2020-05-26 22:04:22 ( 83.0ms ) python3 ( 6.43s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [49] 2020-05-26 22:04:22 ( 6.00ms ) python3 ( 6.43s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [50] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.44s ) 1.6083773 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [51] 2020-05-26 22:04:22 ( 4.00ms ) python3 ( 6.44s ) array([[10.736261], [ 8.132793], [ 6.867915], [ 4.708208], [12.903788]], dtype=float32)","title":"Load runs and results"},{"location":"quickstart/#summary","text":"In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"Summary"},{"location":"api/data/","text":"Skipped.","title":"Data"},{"location":"src/rectangle/__init__/","text":"Skipped.","title":"  init  "},{"location":"src/rectangle/data/","text":"Skipped.","title":"Data"},{"location":"src/rectangle/suggest/","text":"Skipped.","title":"Suggest"},{"location":"src/rectangle/torch/","text":"Skipped.","title":"Torch"},{"location":"tutorial/callbacks/","text":"Callbacks Base System Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [1] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 813ms ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have a `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [2] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 816ms ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [3] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 821ms ) CallbackCaller(num_objects=1) The number of registerd objects is 1. list(caller) [4] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 824ms ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [5] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 827ms ) CallbackCaller(num_objects=13) The number of objects increased up to 13. list(caller) [6] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 831ms ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Inspect each callback funtion. caller.on_init_begin [7] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 835ms ) Callback([]) This is an empty callback because the caller has no objects that define the on_init_begin() function. On the other hand, caller.on_fit_begin [8] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 838ms ) Callback(['simple']) The simple object is registerd as a receiver for the on_fit_begin() function. We can call this. caller.on_fit_begin() [9] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 842ms ) on_fit_begin is called from id=2652594861576 id(caller) [10] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 845ms ) 2652594861576 This caller-receiver network among arbitrary object collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below. Example Preparation To work with the callbacks, we create data and model set that we have used. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [11] 2020-05-26 22:05:05 ( 8.00ms ) python3 ( 853ms ) Results The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [12] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 858ms ) Results() import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [13] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 863ms ) Run(num_objects=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [14] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 867ms ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [15] 2020-05-26 22:05:05 ( 10.0ms ) python3 ( 877ms ) Results('train', 'val') We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [16] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 880ms ) Dict('index', 'output', 'target') results.train.index # Shuffled. The length is batch_size (4) x 3. [17] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 884ms ) array([404, 668, 833, 663, 187, 421, 426, 134, 357, 351, 233, 419]) results.val.index # Not shuffled. The length is batch_size (4) x 2. [18] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 889ms ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output # Actually, no learning. [19] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 892ms ) array([[-0.28219154], [-0.29759926], [-0.3147936 ], [-0.401741 ], [-0.3248716 ], [-0.31901133], [-0.46621388], [-0.29447877]], dtype=float32) results.val.target [20] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 896ms ) array([[ 6.149836 ], [ 4.2286034], [ 6.188385 ], [ 7.3709297], [ 6.139093 ], [21.232224 ], [ 9.658582 ], [13.682075 ]], dtype=float32) Other Callback There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callbacks</span></span></span>"},{"location":"tutorial/callbacks/#callbacks","text":"","title":"Callbacks"},{"location":"tutorial/callbacks/#base-system","text":"Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [1] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 813ms ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have a `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [2] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 816ms ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [3] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 821ms ) CallbackCaller(num_objects=1) The number of registerd objects is 1. list(caller) [4] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 824ms ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [5] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 827ms ) CallbackCaller(num_objects=13) The number of objects increased up to 13. list(caller) [6] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 831ms ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Inspect each callback funtion. caller.on_init_begin [7] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 835ms ) Callback([]) This is an empty callback because the caller has no objects that define the on_init_begin() function. On the other hand, caller.on_fit_begin [8] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 838ms ) Callback(['simple']) The simple object is registerd as a receiver for the on_fit_begin() function. We can call this. caller.on_fit_begin() [9] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 842ms ) on_fit_begin is called from id=2652594861576 id(caller) [10] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 845ms ) 2652594861576 This caller-receiver network among arbitrary object collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below.","title":"Base System"},{"location":"tutorial/callbacks/#example-preparation","text":"To work with the callbacks, we create data and model set that we have used. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [11] 2020-05-26 22:05:05 ( 8.00ms ) python3 ( 853ms )","title":"Example Preparation"},{"location":"tutorial/callbacks/#results","text":"The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [12] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 858ms ) Results() import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [13] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 863ms ) Run(num_objects=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [14] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 867ms ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [15] 2020-05-26 22:05:05 ( 10.0ms ) python3 ( 877ms ) Results('train', 'val') We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [16] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 880ms ) Dict('index', 'output', 'target') results.train.index # Shuffled. The length is batch_size (4) x 3. [17] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 884ms ) array([404, 668, 833, 663, 187, 421, 426, 134, 357, 351, 233, 419]) results.val.index # Not shuffled. The length is batch_size (4) x 2. [18] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 889ms ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output # Actually, no learning. [19] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 892ms ) array([[-0.28219154], [-0.29759926], [-0.3147936 ], [-0.401741 ], [-0.3248716 ], [-0.31901133], [-0.46621388], [-0.29447877]], dtype=float32) results.val.target [20] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 896ms ) array([[ 6.149836 ], [ 4.2286034], [ 6.188385 ], [ 7.3709297], [ 6.139093 ], [21.232224 ], [ 9.658582 ], [13.682075 ]], dtype=float32)","title":"Results"},{"location":"tutorial/callbacks/#other-callback","text":"There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"Other Callback"},{"location":"tutorial/data/","text":"Set of Data classes Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain about them. File 3 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Data First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [1] 2020-05-26 22:05:04 ( 352ms ) python3 ( 384ms ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [2] 2020-05-26 22:05:04 ( 5.00ms ) python3 ( 389ms ) [0, array([3.333937 , 2.8304484], dtype=float32), array([9.524789], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [3] 2020-05-26 22:05:04 ( 5.00ms ) python3 ( 394ms ) [array([ 0, 10, 20]), array([[3.333937 , 2.8304484], [2.8490477, 1.3160843], [3.4757633, 3.0629237]], dtype=float32), array([[ 9.524789 ], [ 3.8184404], [10.4788265]], dtype=float32)] Dataset An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [4] 2020-05-26 22:05:04 ( 5.00ms ) python3 ( 399ms ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [5] 2020-05-26 22:05:04 ( 4.00ms ) python3 ( 403ms ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get sample from an dataset. use normal indexing dataset[0] # Integer index. [6] 2020-05-26 22:05:04 ( 4.00ms ) python3 ( 407ms ) [0, array([3.333937 , 2.8304484], dtype=float32), array([9.524789], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [7] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 410ms ) [array([ 0, 16, 33]), array([[3.333937 , 2.8304484], [3.2110853, 4.929148 ], [4.9427867, 2.3064723]], dtype=float32), array([[ 9.524789], [15.559517], [11.711869]], dtype=float32)] index, *_ = dataset[:] print(len(index)) index[:10] [8] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 415ms ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional argument: transform . def transform(mode:str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [9] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 419ms ) [0, array([6.667874, 5.660897], dtype=float32), array([19.049578], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [10] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 423ms ) [array([6.667874, 5.660897], dtype=float32), array([19.049578], dtype=float32)] Usually, we don't instantiate the Dataset object directly. Instead, the next Datasets class manages the dataset. Datasets An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [11] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 428ms ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. A Datasets instance is a dict-like object: for dataset in datasets.items(): print(dataset) [12] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 431ms ) ('train', Dataset(mode='train', num_samples=600)) ('val', Dataset(mode='val', num_samples=200)) ('test', Dataset(mode='test', num_samples=200)) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [13] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 434ms ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset. DataLoaders The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [14] 2020-05-26 22:05:05 ( 265ms ) python3 ( 699ms ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. for dataloader in dataloaders.items(): print(dataloader) [15] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 703ms ) ('train', <torch.utils.data.dataloader.DataLoader object at 0x00000269A0DC3908>) ('val', <torch.utils.data.dataloader.DataLoader object at 0x00000269A0DC3848>) ('test', <torch.utils.data.dataloader.DataLoader object at 0x00000269A0DC8248>) As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [16] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 708ms ) [tensor([721, 4, 49, 301], dtype=torch.int32), tensor([[1.0569, 1.3195], [2.1033, 3.0148], [4.9472, 1.7235], [2.2799, 2.0429]]), tensor([[1.2938], [6.4707], [8.3228], [4.6599]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs of a model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Set of Data classes</span></span></span>"},{"location":"tutorial/data/#set-of-data-classes","text":"Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain about them. File 3 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class)","title":"Set of Data classes"},{"location":"tutorial/data/#data","text":"First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [1] 2020-05-26 22:05:04 ( 352ms ) python3 ( 384ms ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [2] 2020-05-26 22:05:04 ( 5.00ms ) python3 ( 389ms ) [0, array([3.333937 , 2.8304484], dtype=float32), array([9.524789], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [3] 2020-05-26 22:05:04 ( 5.00ms ) python3 ( 394ms ) [array([ 0, 10, 20]), array([[3.333937 , 2.8304484], [2.8490477, 1.3160843], [3.4757633, 3.0629237]], dtype=float32), array([[ 9.524789 ], [ 3.8184404], [10.4788265]], dtype=float32)]","title":"Data"},{"location":"tutorial/data/#dataset","text":"An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [4] 2020-05-26 22:05:04 ( 5.00ms ) python3 ( 399ms ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [5] 2020-05-26 22:05:04 ( 4.00ms ) python3 ( 403ms ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get sample from an dataset. use normal indexing dataset[0] # Integer index. [6] 2020-05-26 22:05:04 ( 4.00ms ) python3 ( 407ms ) [0, array([3.333937 , 2.8304484], dtype=float32), array([9.524789], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [7] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 410ms ) [array([ 0, 16, 33]), array([[3.333937 , 2.8304484], [3.2110853, 4.929148 ], [4.9427867, 2.3064723]], dtype=float32), array([[ 9.524789], [15.559517], [11.711869]], dtype=float32)] index, *_ = dataset[:] print(len(index)) index[:10] [8] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 415ms ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional argument: transform . def transform(mode:str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [9] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 419ms ) [0, array([6.667874, 5.660897], dtype=float32), array([19.049578], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [10] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 423ms ) [array([6.667874, 5.660897], dtype=float32), array([19.049578], dtype=float32)] Usually, we don't instantiate the Dataset object directly. Instead, the next Datasets class manages the dataset.","title":"Dataset"},{"location":"tutorial/data/#datasets","text":"An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [11] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 428ms ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. A Datasets instance is a dict-like object: for dataset in datasets.items(): print(dataset) [12] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 431ms ) ('train', Dataset(mode='train', num_samples=600)) ('val', Dataset(mode='val', num_samples=200)) ('test', Dataset(mode='test', num_samples=200)) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [13] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 434ms ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"Datasets"},{"location":"tutorial/data/#dataloaders","text":"The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [14] 2020-05-26 22:05:05 ( 265ms ) python3 ( 699ms ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. for dataloader in dataloaders.items(): print(dataloader) [15] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 703ms ) ('train', <torch.utils.data.dataloader.DataLoader object at 0x00000269A0DC3908>) ('val', <torch.utils.data.dataloader.DataLoader object at 0x00000269A0DC3848>) ('test', <torch.utils.data.dataloader.DataLoader object at 0x00000269A0DC8248>) As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [16] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 708ms ) [tensor([721, 4, 49, 301], dtype=torch.int32), tensor([[1.0569, 1.3195], [2.1033, 3.0148], [4.9472, 1.7235], [2.2799, 2.0429]]), tensor([[1.2938], [6.4707], [8.3228], [4.6599]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs of a model.","title":"DataLoaders"},{"location":"tutorial/instance/","text":"Creating Instance In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. We creates a DataLoaders described in the previous section . Basic idea A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. We call this dictionary params . from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [1] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 724ms ) Data(train_size=834, test_size=166) Here, create_instance() requires the second parameter name to specify a key because params can have multiple keys. Note that we added n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) [2] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 728ms ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing parmas easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [3] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 734ms ) Data(train_size=834, test_size=166) Hierarchal Structure Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [4] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 740ms ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Furthermore, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [5] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 746ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance. To describe this behavior, you can use a new def key instead of class . (See the previous section ) Default Class In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [6] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 751ms ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataloaders --- ivory.torch.data.DataLoaders dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [7] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 757ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4)","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Creating Instance</span></span></span>"},{"location":"tutorial/instance/#creating-instance","text":"In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. We creates a DataLoaders described in the previous section .","title":"Creating Instance"},{"location":"tutorial/instance/#basic-idea","text":"A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. We call this dictionary params . from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [1] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 724ms ) Data(train_size=834, test_size=166) Here, create_instance() requires the second parameter name to specify a key because params can have multiple keys. Note that we added n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) [2] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 728ms ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing parmas easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [3] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 734ms ) Data(train_size=834, test_size=166)","title":"Basic idea"},{"location":"tutorial/instance/#hierarchal-structure","text":"Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [4] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 740ms ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Furthermore, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [5] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 746ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance. To describe this behavior, you can use a new def key instead of class . (See the previous section )","title":"Hierarchal Structure"},{"location":"tutorial/instance/#default-class","text":"In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [6] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 751ms ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataloaders --- ivory.torch.data.DataLoaders dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [7] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 757ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4)","title":"Default Class"},{"location":"tutorial/model/","text":"Model Structure Model We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 4 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [1] 2020-05-26 22:05:05 ( 9.00ms ) python3 ( 775ms ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [2] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 780ms ) tensor([[1.3698, 2.6424], [2.2141, 2.1162], [3.7934, 2.8792], [3.3975, 4.4286]]) model(input) [3] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 784ms ) tensor([[-0.3551], [-0.3327], [-0.5082], [-0.6298]], grad_fn=<AddmmBackward>) Optimizer To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [4] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 789ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [5] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 795ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in a globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method. Scheduler A Scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [6] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 800ms ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x2699af7cd08> If a $ -notation has no suffix, the value becomes its key itself. The following two example are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Model Structure</span></span></span>"},{"location":"tutorial/model/#model-structure","text":"","title":"Model Structure"},{"location":"tutorial/model/#model","text":"We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 4 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [1] 2020-05-26 22:05:05 ( 9.00ms ) python3 ( 775ms ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [2] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 780ms ) tensor([[1.3698, 2.6424], [2.2141, 2.1162], [3.7934, 2.8792], [3.3975, 4.4286]]) model(input) [3] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 784ms ) tensor([[-0.3551], [-0.3327], [-0.5082], [-0.6298]], grad_fn=<AddmmBackward>)","title":"Model"},{"location":"tutorial/model/#optimizer","text":"To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [4] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 789ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [5] 2020-05-26 22:05:05 ( 6.00ms ) python3 ( 795ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in a globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method.","title":"Optimizer"},{"location":"tutorial/model/#scheduler","text":"A Scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [6] 2020-05-26 22:05:05 ( 5.00ms ) python3 ( 800ms ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x2699af7cd08> If a $ -notation has no suffix, the value becomes its key itself. The following two example are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"Scheduler"},{"location":"tutorial/trainer/","text":"Training a Model Example Preparation First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 \"\"\") params [1] 2020-05-26 22:05:05 ( 7.00ms ) python3 ( 912ms ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}}, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [2] 2020-05-26 22:05:05 ( 236ms ) python3 ( 1.15s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer'] Callbacks Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [3] 2020-05-26 22:05:05 ( 27.0ms ) python3 ( 1.17s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin Metrics The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [4] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.18s ) Metrics() The Metrics class for PyTorch has a criterion callable object to calculate loss. run.metrics.criterion [5] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 1.18s ) <function torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')> Monitor The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.19s ) Monitor(metric='val_loss', mode='min') EarlyStopping The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.19s ) EarlyStopping(patience=10, wait=0) Trainer The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.19s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch') Using a Trainer A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-26 22:05:05 ( 619ms ) python3 ( 1.81s ) [epoch#0] loss=14.41 val_loss=6.586 lr=0.001 best [epoch#1] loss=5.916 val_loss=5.667 lr=0.001 best [epoch#2] loss=4.132 val_loss=3.363 lr=0.001 best [epoch#3] loss=2.836 val_loss=2.707 lr=0.001 best [epoch#4] loss=1.78 val_loss=1.527 lr=0.001 best [epoch#5] loss=1.453 val_loss=1.207 lr=0.001 best [epoch#6] loss=1.146 val_loss=0.9622 lr=0.001 best [epoch#7] loss=0.9499 val_loss=0.9609 lr=0.001 best [epoch#8] loss=0.9232 val_loss=0.7496 lr=0.001 best [epoch#9] loss=0.8835 val_loss=0.694 lr=0.001 best You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-26 22:05:06 ( 286ms ) python3 ( 2.10s ) [epoch#10] loss=0.749 val_loss=0.7348 lr=0.001 [epoch#11] loss=0.723 val_loss=0.7613 lr=0.001 [epoch#12] loss=0.6988 val_loss=0.7191 lr=0.001 [epoch#13] loss=0.6169 val_loss=0.6417 lr=0.001 best [epoch#14] loss=0.6025 val_loss=0.5351 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch. Callbacks after Training After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-26 22:05:06 ( 6.00ms ) python3 ( 2.10s ) Metrics(loss=0.6025, val_loss=0.5351, lr=0.001) run.metrics.history.val_loss # Totally, trained for 15 epochs. [12] 2020-05-26 22:05:06 ( 5.00ms ) python3 ( 2.11s ) {0: 6.586015129089356, 1: 5.66701956987381, 2: 3.3625584065914156, 3: 2.706680233776569, 4: 1.5272553190588951, 5: 1.207243651151657, 6: 0.9622190296649933, 7: 0.9608943574130535, 8: 0.7495502240955829, 9: 0.6940258547663689, 10: 0.7348485790193081, 11: 0.7612715110182762, 12: 0.719103267043829, 13: 0.6417425841093063, 14: 0.5351458385586738} run.monitor # Store the best score and its epoch. [13] 2020-05-26 22:05:06 ( 4.00ms ) python3 ( 2.11s ) Monitor(metric='val_loss', mode='min', best_score=0.535, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-26 22:05:06 ( 4.00ms ) python3 ( 2.12s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-26 22:05:06 ( 5.00ms ) python3 ( 2.12s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Training a Model</span></span></span>"},{"location":"tutorial/trainer/#training-a-model","text":"","title":"Training a Model"},{"location":"tutorial/trainer/#example-preparation","text":"First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 \"\"\") params [1] 2020-05-26 22:05:05 ( 7.00ms ) python3 ( 912ms ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}}, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [2] 2020-05-26 22:05:05 ( 236ms ) python3 ( 1.15s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer']","title":"Example Preparation"},{"location":"tutorial/trainer/#callbacks","text":"Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [3] 2020-05-26 22:05:05 ( 27.0ms ) python3 ( 1.17s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin","title":"Callbacks"},{"location":"tutorial/trainer/#metrics","text":"The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [4] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.18s ) Metrics() The Metrics class for PyTorch has a criterion callable object to calculate loss. run.metrics.criterion [5] 2020-05-26 22:05:05 ( 3.00ms ) python3 ( 1.18s ) <function torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')>","title":"Metrics"},{"location":"tutorial/trainer/#monitor","text":"The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.19s ) Monitor(metric='val_loss', mode='min')","title":"Monitor"},{"location":"tutorial/trainer/#earlystopping","text":"The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.19s ) EarlyStopping(patience=10, wait=0)","title":"EarlyStopping"},{"location":"tutorial/trainer/#trainer","text":"The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-26 22:05:05 ( 4.00ms ) python3 ( 1.19s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Trainer"},{"location":"tutorial/trainer/#using-a-trainer","text":"A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-26 22:05:05 ( 619ms ) python3 ( 1.81s ) [epoch#0] loss=14.41 val_loss=6.586 lr=0.001 best [epoch#1] loss=5.916 val_loss=5.667 lr=0.001 best [epoch#2] loss=4.132 val_loss=3.363 lr=0.001 best [epoch#3] loss=2.836 val_loss=2.707 lr=0.001 best [epoch#4] loss=1.78 val_loss=1.527 lr=0.001 best [epoch#5] loss=1.453 val_loss=1.207 lr=0.001 best [epoch#6] loss=1.146 val_loss=0.9622 lr=0.001 best [epoch#7] loss=0.9499 val_loss=0.9609 lr=0.001 best [epoch#8] loss=0.9232 val_loss=0.7496 lr=0.001 best [epoch#9] loss=0.8835 val_loss=0.694 lr=0.001 best You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-26 22:05:06 ( 286ms ) python3 ( 2.10s ) [epoch#10] loss=0.749 val_loss=0.7348 lr=0.001 [epoch#11] loss=0.723 val_loss=0.7613 lr=0.001 [epoch#12] loss=0.6988 val_loss=0.7191 lr=0.001 [epoch#13] loss=0.6169 val_loss=0.6417 lr=0.001 best [epoch#14] loss=0.6025 val_loss=0.5351 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch.","title":"Using a Trainer"},{"location":"tutorial/trainer/#callbacks-after-training","text":"After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-26 22:05:06 ( 6.00ms ) python3 ( 2.10s ) Metrics(loss=0.6025, val_loss=0.5351, lr=0.001) run.metrics.history.val_loss # Totally, trained for 15 epochs. [12] 2020-05-26 22:05:06 ( 5.00ms ) python3 ( 2.11s ) {0: 6.586015129089356, 1: 5.66701956987381, 2: 3.3625584065914156, 3: 2.706680233776569, 4: 1.5272553190588951, 5: 1.207243651151657, 6: 0.9622190296649933, 7: 0.9608943574130535, 8: 0.7495502240955829, 9: 0.6940258547663689, 10: 0.7348485790193081, 11: 0.7612715110182762, 12: 0.719103267043829, 13: 0.6417425841093063, 14: 0.5351458385586738} run.monitor # Store the best score and its epoch. [13] 2020-05-26 22:05:06 ( 4.00ms ) python3 ( 2.11s ) Monitor(metric='val_loss', mode='min', best_score=0.535, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-26 22:05:06 ( 4.00ms ) python3 ( 2.12s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-26 22:05:06 ( 5.00ms ) python3 ( 2.12s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Callbacks after Training"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ivory Documentation Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Documentation</span></span></span>"},{"location":"#ivory-documentation","text":"Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance.","title":"Ivory Documentation"},{"location":"quickstart/","text":"Quickstart Installation Install Ivory using pip . $ pip install ivory Using an Ivory Client Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [2] 2020-05-27 10:16:05 ( 999ms ) python3 ( 1.03s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [3] 2020-05-27 10:16:06 ( 4.00ms ) python3 ( 1.04s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [4] 2020-05-27 10:16:06 ( 3.00ms ) python3 ( 1.04s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [5] 2020-05-27 10:16:06 ( 3.00ms ) python3 ( 1.04s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\examples\\client.yml Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Create NumPy data In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function definition and an example output: Code 1 rectangle.data.create_data def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-27 10:16:06 ( 5.00ms ) python3 ( 1.07s ) array([[3.9135878, 1.3125025], [2.271808 , 3.2785127], [3.3394046, 3.6182117], [4.9602675, 3.3093865]], dtype=float32) z [9] 2020-05-27 10:16:06 ( 5.00ms ) python3 ( 1.07s ) array([ 4.976586 , 7.4323454, 12.268121 , 16.491957 ], dtype=float32) Set of Data classes Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. Code 2 rectangle.data.Data @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Here, kfold_split function creates a fold-array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [11] 2020-05-27 10:16:06 ( 4.00ms ) python3 ( 1.09s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) In Ivory, fold number = -1 means their samples are test data. Now, we can get a Data instance. data = rectangle.data.Data() data [12] 2020-05-27 10:16:06 ( 3.00ms ) python3 ( 1.10s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [13] 2020-05-27 10:16:06 ( 4.00ms ) python3 ( 1.10s ) [0, array([4.419508 , 2.4814017], dtype=float32), array([11.144291], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from. Define a model We use a simple MLP model here. Code 3 rectangle.torch.Model class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) Parameter file for Run Ivory configures a run using a YAML file. Here is a full example. File 2 torch.yaml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\examples\\torch.yml Let's create a run by Client.create_run() run = client.create_run('torch') run [16] 2020-05-27 10:16:06 ( 278ms ) python3 ( 1.66s ) [I 200527 10:16:06 tracker:48] A new experiment created with name: 'torch' Run(id='ab42bd6e958d4b4d9ff18051c790d14c', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [17] 2020-05-27 10:16:07 ( 6.00ms ) python3 ( 1.66s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 100 - 100 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: criterion: def: torch.nn.functional.mse_loss class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: ab42bd6e958d4b4d9ff18051c790d14c experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method takes keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [18] 2020-05-27 10:16:07 ( 48.0ms ) python3 ( 1.71s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60 Train a model Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [19] 2020-05-27 10:16:07 ( 1.39s ) python3 ( 3.10s ) [epoch#0] loss=12.65 val_loss=6.985 lr=0.001 best [epoch#1] loss=6.824 val_loss=6.173 lr=0.001 best [epoch#2] loss=5.91 val_loss=5.053 lr=0.001 best [epoch#3] loss=4.726 val_loss=4.049 lr=0.001 best [epoch#4] loss=3.851 val_loss=2.998 lr=0.001 best [epoch#5] loss=2.766 val_loss=2.056 lr=0.001 best [epoch#6] loss=1.912 val_loss=1.364 lr=0.001 best [epoch#7] loss=1.414 val_loss=0.8929 lr=0.001 best [epoch#8] loss=0.8839 val_loss=0.634 lr=0.001 best [epoch#9] loss=0.7726 val_loss=0.5226 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [20] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.10s ) Dict('loss', 'val_loss', 'lr') Also the model output and target are automatically collected in a run.results instance. run.results [21] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.11s ) Results('train', 'val') run.results.val.output[:5] [22] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.11s ) array([[15.167277 ], [14.438832 ], [ 5.13502 ], [ 8.816626 ], [15.7119055]], dtype=float32) run.results.val.target[:5] [23] 2020-05-27 10:16:08 ( 6.00ms ) python3 ( 3.12s ) array([[15.181301 ], [15.235485 ], [ 5.1487885], [ 7.657234 ], [15.72939 ]], dtype=float32) Test a model Testing a model is as simple as training. Just call run.start('test') instead of (default) 'train' . run.start('test') run.results [24] 2020-05-27 10:16:08 ( 47.0ms ) python3 ( 3.16s ) Results('train', 'val', 'test') As you can see, test results were added. run.results.test.output[:5] [25] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.17s ) array([[ 7.752834 ], [ 8.6941595], [ 5.767531 ], [13.222177 ], [12.827853 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [26] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.17s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32) Task for multiple runs Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [27] 2020-05-27 10:16:08 ( 53.0ms ) python3 ( 3.23s ) Task(id='6c2ec4a2c7704afca822e054f7b31729', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [28] 2020-05-27 10:16:08 ( 5.00ms ) python3 ( 3.23s ) <generator object Task.product at 0x000001E69F2AF5C8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specified. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [29] 2020-05-27 10:16:08 ( 2.32s ) python3 ( 5.55s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3 Collect runs Our client has a Tracker instance. It stores the state of runs in background using the MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by the MLFlow Tracking. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [30] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 5.56s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [31] 2020-05-27 10:16:11 ( 72.0ms ) python3 ( 5.63s ) d4201 run#6 5ccd7 run#5 fc4ca run#4 d270b run#3 6c2ec task#0 e5673 run#2 017e8 run#1 ab42b run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [32] 2020-05-27 10:16:11 ( 153ms ) python3 ( 5.78s ) d270b run#3 e5673 run#2 017e8 run#1 ab42b run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [33] 2020-05-27 10:16:11 ( 45.0ms ) python3 ( 5.83s ) d4201 run#6 5ccd7 run#5 fc4ca run#4 d270b run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [34] 2020-05-27 10:16:11 ( 54.0ms ) python3 ( 5.88s ) ab42b run#0 6c2ec task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [35] 2020-05-27 10:16:11 ( 59.0ms ) python3 ( 5.94s ) e5673 run#2 d270b run#3 Load runs and results The Ivory Client class can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [36] 2020-05-27 10:16:11 ( 67.0ms ) python3 ( 6.01s ) d4201 run#6 5ccd7 run#5 fc4ca run#4 d270b run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [37] 2020-05-27 10:16:11 ( 48.0ms ) python3 ( 6.06s ) Run(id='d420149a16bd4fd69aa534d985cd426d', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [38] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 6.06s ) 3 By loading a run, we obtained the trained model. run.model.eval() [39] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 6.06s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=100, bias=True) (2): Linear(in_features=100, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [40] 2020-05-27 10:16:11 ( 10.0ms ) python3 ( 6.07s ) [output] tensor([[10.5323], [10.0713], [10.3359], [ 9.1965], [14.9746]]) [target] tensor([[11.4365], [10.5290], [10.9380], [ 8.4180], [19.9436]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [41] 2020-05-27 10:16:11 ( 23.0ms ) python3 ( 6.09s ) Results('train', 'val', 'test') for mode in ['train', 'val', 'test']: print(mode, results[mode].output.shape) [42] 2020-05-27 10:16:11 ( 8.00ms ) python3 ( 6.10s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. To load multiple run's results, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [43] 2020-05-27 10:16:11 ( 92.0ms ) python3 ( 6.19s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [44] 2020-05-27 10:16:11 ( 6.00ms ) python3 ( 6.20s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [45] 2020-05-27 10:16:11 ( 5.00ms ) python3 ( 6.21s ) (800, 200) Usually, duplicated samples are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode in ['val', 'test']: print(mode, reduced_results[mode].output.shape) [46] 2020-05-27 10:16:11 ( 13.0ms ) python3 ( 6.22s ) val (800, 1) test (200, 1) Compare the results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [47] 2020-05-27 10:16:11 ( 8.00ms ) python3 ( 6.23s ) [results] [[7.8735604] [7.6828055] [8.401836 ] [8.550108 ]] -> mean: 8.127077 [reduced_results] [[8.127077]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [48] 2020-05-27 10:16:11 ( 84.0ms ) python3 ( 6.31s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [49] 2020-05-27 10:16:11 ( 7.00ms ) python3 ( 6.32s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [50] 2020-05-27 10:16:11 ( 4.00ms ) python3 ( 6.32s ) 1.6231505 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [51] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 6.32s ) array([[ 8.127077], [ 8.77026 ], [ 6.927714], [11.864476], [11.575894]], dtype=float32) Summary In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Quickstart</span></span></span>"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Install Ivory using pip . $ pip install ivory","title":"Installation"},{"location":"quickstart/#using-an-ivory-client","text":"Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [2] 2020-05-27 10:16:05 ( 999ms ) python3 ( 1.03s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [3] 2020-05-27 10:16:06 ( 4.00ms ) python3 ( 1.04s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [4] 2020-05-27 10:16:06 ( 3.00ms ) python3 ( 1.04s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [5] 2020-05-27 10:16:06 ( 3.00ms ) python3 ( 1.04s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\examples\\client.yml Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Using an Ivory Client"},{"location":"quickstart/#create-numpy-data","text":"In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function definition and an example output: Code 1 rectangle.data.create_data def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-27 10:16:06 ( 5.00ms ) python3 ( 1.07s ) array([[3.9135878, 1.3125025], [2.271808 , 3.2785127], [3.3394046, 3.6182117], [4.9602675, 3.3093865]], dtype=float32) z [9] 2020-05-27 10:16:06 ( 5.00ms ) python3 ( 1.07s ) array([ 4.976586 , 7.4323454, 12.268121 , 16.491957 ], dtype=float32)","title":"Create NumPy data"},{"location":"quickstart/#set-of-data-classes","text":"Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. Code 2 rectangle.data.Data @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Here, kfold_split function creates a fold-array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [11] 2020-05-27 10:16:06 ( 4.00ms ) python3 ( 1.09s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) In Ivory, fold number = -1 means their samples are test data. Now, we can get a Data instance. data = rectangle.data.Data() data [12] 2020-05-27 10:16:06 ( 3.00ms ) python3 ( 1.10s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [13] 2020-05-27 10:16:06 ( 4.00ms ) python3 ( 1.10s ) [0, array([4.419508 , 2.4814017], dtype=float32), array([11.144291], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from.","title":"Set of Data classes"},{"location":"quickstart/#define-a-model","text":"We use a simple MLP model here. Code 3 rectangle.torch.Model class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x)","title":"Define a model"},{"location":"quickstart/#parameter-file-for-run","text":"Ivory configures a run using a YAML file. Here is a full example. File 2 torch.yaml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\examples\\torch.yml Let's create a run by Client.create_run() run = client.create_run('torch') run [16] 2020-05-27 10:16:06 ( 278ms ) python3 ( 1.66s ) [I 200527 10:16:06 tracker:48] A new experiment created with name: 'torch' Run(id='ab42bd6e958d4b4d9ff18051c790d14c', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [17] 2020-05-27 10:16:07 ( 6.00ms ) python3 ( 1.66s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 100 - 100 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: criterion: def: torch.nn.functional.mse_loss class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: ab42bd6e958d4b4d9ff18051c790d14c experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method takes keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [18] 2020-05-27 10:16:07 ( 48.0ms ) python3 ( 1.71s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60","title":"Parameter file for Run"},{"location":"quickstart/#train-a-model","text":"Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [19] 2020-05-27 10:16:07 ( 1.39s ) python3 ( 3.10s ) [epoch#0] loss=12.65 val_loss=6.985 lr=0.001 best [epoch#1] loss=6.824 val_loss=6.173 lr=0.001 best [epoch#2] loss=5.91 val_loss=5.053 lr=0.001 best [epoch#3] loss=4.726 val_loss=4.049 lr=0.001 best [epoch#4] loss=3.851 val_loss=2.998 lr=0.001 best [epoch#5] loss=2.766 val_loss=2.056 lr=0.001 best [epoch#6] loss=1.912 val_loss=1.364 lr=0.001 best [epoch#7] loss=1.414 val_loss=0.8929 lr=0.001 best [epoch#8] loss=0.8839 val_loss=0.634 lr=0.001 best [epoch#9] loss=0.7726 val_loss=0.5226 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [20] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.10s ) Dict('loss', 'val_loss', 'lr') Also the model output and target are automatically collected in a run.results instance. run.results [21] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.11s ) Results('train', 'val') run.results.val.output[:5] [22] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.11s ) array([[15.167277 ], [14.438832 ], [ 5.13502 ], [ 8.816626 ], [15.7119055]], dtype=float32) run.results.val.target[:5] [23] 2020-05-27 10:16:08 ( 6.00ms ) python3 ( 3.12s ) array([[15.181301 ], [15.235485 ], [ 5.1487885], [ 7.657234 ], [15.72939 ]], dtype=float32)","title":"Train a model"},{"location":"quickstart/#test-a-model","text":"Testing a model is as simple as training. Just call run.start('test') instead of (default) 'train' . run.start('test') run.results [24] 2020-05-27 10:16:08 ( 47.0ms ) python3 ( 3.16s ) Results('train', 'val', 'test') As you can see, test results were added. run.results.test.output[:5] [25] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.17s ) array([[ 7.752834 ], [ 8.6941595], [ 5.767531 ], [13.222177 ], [12.827853 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [26] 2020-05-27 10:16:08 ( 4.00ms ) python3 ( 3.17s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32)","title":"Test a model"},{"location":"quickstart/#task-for-multiple-runs","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [27] 2020-05-27 10:16:08 ( 53.0ms ) python3 ( 3.23s ) Task(id='6c2ec4a2c7704afca822e054f7b31729', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [28] 2020-05-27 10:16:08 ( 5.00ms ) python3 ( 3.23s ) <generator object Task.product at 0x000001E69F2AF5C8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specified. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [29] 2020-05-27 10:16:08 ( 2.32s ) python3 ( 5.55s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3","title":"Task for multiple runs"},{"location":"quickstart/#collect-runs","text":"Our client has a Tracker instance. It stores the state of runs in background using the MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by the MLFlow Tracking. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [30] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 5.56s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [31] 2020-05-27 10:16:11 ( 72.0ms ) python3 ( 5.63s ) d4201 run#6 5ccd7 run#5 fc4ca run#4 d270b run#3 6c2ec task#0 e5673 run#2 017e8 run#1 ab42b run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [32] 2020-05-27 10:16:11 ( 153ms ) python3 ( 5.78s ) d270b run#3 e5673 run#2 017e8 run#1 ab42b run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [33] 2020-05-27 10:16:11 ( 45.0ms ) python3 ( 5.83s ) d4201 run#6 5ccd7 run#5 fc4ca run#4 d270b run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [34] 2020-05-27 10:16:11 ( 54.0ms ) python3 ( 5.88s ) ab42b run#0 6c2ec task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [35] 2020-05-27 10:16:11 ( 59.0ms ) python3 ( 5.94s ) e5673 run#2 d270b run#3","title":"Collect runs"},{"location":"quickstart/#load-runs-and-results","text":"The Ivory Client class can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [36] 2020-05-27 10:16:11 ( 67.0ms ) python3 ( 6.01s ) d4201 run#6 5ccd7 run#5 fc4ca run#4 d270b run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [37] 2020-05-27 10:16:11 ( 48.0ms ) python3 ( 6.06s ) Run(id='d420149a16bd4fd69aa534d985cd426d', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [38] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 6.06s ) 3 By loading a run, we obtained the trained model. run.model.eval() [39] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 6.06s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=100, bias=True) (1): Linear(in_features=100, out_features=100, bias=True) (2): Linear(in_features=100, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [40] 2020-05-27 10:16:11 ( 10.0ms ) python3 ( 6.07s ) [output] tensor([[10.5323], [10.0713], [10.3359], [ 9.1965], [14.9746]]) [target] tensor([[11.4365], [10.5290], [10.9380], [ 8.4180], [19.9436]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [41] 2020-05-27 10:16:11 ( 23.0ms ) python3 ( 6.09s ) Results('train', 'val', 'test') for mode in ['train', 'val', 'test']: print(mode, results[mode].output.shape) [42] 2020-05-27 10:16:11 ( 8.00ms ) python3 ( 6.10s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. To load multiple run's results, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [43] 2020-05-27 10:16:11 ( 92.0ms ) python3 ( 6.19s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [44] 2020-05-27 10:16:11 ( 6.00ms ) python3 ( 6.20s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [45] 2020-05-27 10:16:11 ( 5.00ms ) python3 ( 6.21s ) (800, 200) Usually, duplicated samples are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode in ['val', 'test']: print(mode, reduced_results[mode].output.shape) [46] 2020-05-27 10:16:11 ( 13.0ms ) python3 ( 6.22s ) val (800, 1) test (200, 1) Compare the results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [47] 2020-05-27 10:16:11 ( 8.00ms ) python3 ( 6.23s ) [results] [[7.8735604] [7.6828055] [8.401836 ] [8.550108 ]] -> mean: 8.127077 [reduced_results] [[8.127077]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [48] 2020-05-27 10:16:11 ( 84.0ms ) python3 ( 6.31s ) Results('val', 'test') for mode in ['val', 'test']: print(mode, results[mode].output.shape) [49] 2020-05-27 10:16:11 ( 7.00ms ) python3 ( 6.32s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [50] 2020-05-27 10:16:11 ( 4.00ms ) python3 ( 6.32s ) 1.6231505 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [51] 2020-05-27 10:16:11 ( 3.00ms ) python3 ( 6.32s ) array([[ 8.127077], [ 8.77026 ], [ 6.927714], [11.864476], [11.575894]], dtype=float32)","title":"Load runs and results"},{"location":"quickstart/#summary","text":"In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"Summary"},{"location":"api/data/","text":"Skipped.","title":"Data"},{"location":"tutorial/callbacks/","text":"Callbacks Base System Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [1] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 795ms ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have a `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [2] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 798ms ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [3] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 802ms ) CallbackCaller(num_objects=1) The number of registerd objects is 1. list(caller) [4] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 806ms ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [5] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 809ms ) CallbackCaller(num_objects=13) The number of objects increased up to 13. list(caller) [6] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 812ms ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Inspect each callback funtion. caller.on_init_begin [7] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 815ms ) Callback([]) This is an empty callback because the caller has no objects that define the on_init_begin() function. On the other hand, caller.on_fit_begin [8] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 818ms ) Callback(['simple']) The simple object is registerd as a receiver for the on_fit_begin() function. We can call this. caller.on_fit_begin() [9] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 822ms ) on_fit_begin is called from id=1298403967432 id(caller) [10] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 825ms ) 1298403967432 This caller-receiver network among arbitrary object collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below. Example Preparation To work with the callbacks, we create data and model set that we have used. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [11] 2020-05-27 11:20:14 ( 8.00ms ) python3 ( 833ms ) Results The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [12] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 838ms ) Results() import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [13] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 844ms ) Run(num_objects=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [14] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 849ms ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [15] 2020-05-27 11:20:14 ( 10.0ms ) python3 ( 859ms ) Results('train', 'val') We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [16] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 864ms ) Dict('index', 'output', 'target') results.train.index # Shuffled. The length is batch_size (4) x 3. [17] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 868ms ) array([865, 752, 944, 132, 191, 44, 700, 945, 973, 743, 64, 484]) results.val.index # Not shuffled. The length is batch_size (4) x 2. [18] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 871ms ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output # Actually, no learning. [19] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 875ms ) array([[0.21222956], [0.1928317 ], [0.20290865], [0.1803765 ], [0.18458796], [0.18455654], [0.21058798], [0.20718005]], dtype=float32) results.val.target [20] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 878ms ) array([[ 3.8259084], [10.152728 ], [ 6.6943808], [15.837504 ], [13.444315 ], [12.519631 ], [ 4.0379057], [ 5.1663475]], dtype=float32) Other Callback There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callbacks</span></span></span>"},{"location":"tutorial/callbacks/#callbacks","text":"","title":"Callbacks"},{"location":"tutorial/callbacks/#base-system","text":"Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [1] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 795ms ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have a `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [2] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 798ms ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [3] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 802ms ) CallbackCaller(num_objects=1) The number of registerd objects is 1. list(caller) [4] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 806ms ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [5] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 809ms ) CallbackCaller(num_objects=13) The number of objects increased up to 13. list(caller) [6] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 812ms ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Inspect each callback funtion. caller.on_init_begin [7] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 815ms ) Callback([]) This is an empty callback because the caller has no objects that define the on_init_begin() function. On the other hand, caller.on_fit_begin [8] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 818ms ) Callback(['simple']) The simple object is registerd as a receiver for the on_fit_begin() function. We can call this. caller.on_fit_begin() [9] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 822ms ) on_fit_begin is called from id=1298403967432 id(caller) [10] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 825ms ) 1298403967432 This caller-receiver network among arbitrary object collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below.","title":"Base System"},{"location":"tutorial/callbacks/#example-preparation","text":"To work with the callbacks, we create data and model set that we have used. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [11] 2020-05-27 11:20:14 ( 8.00ms ) python3 ( 833ms )","title":"Example Preparation"},{"location":"tutorial/callbacks/#results","text":"The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [12] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 838ms ) Results() import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [13] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 844ms ) Run(num_objects=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [14] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 849ms ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [15] 2020-05-27 11:20:14 ( 10.0ms ) python3 ( 859ms ) Results('train', 'val') We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [16] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 864ms ) Dict('index', 'output', 'target') results.train.index # Shuffled. The length is batch_size (4) x 3. [17] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 868ms ) array([865, 752, 944, 132, 191, 44, 700, 945, 973, 743, 64, 484]) results.val.index # Not shuffled. The length is batch_size (4) x 2. [18] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 871ms ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output # Actually, no learning. [19] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 875ms ) array([[0.21222956], [0.1928317 ], [0.20290865], [0.1803765 ], [0.18458796], [0.18455654], [0.21058798], [0.20718005]], dtype=float32) results.val.target [20] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 878ms ) array([[ 3.8259084], [10.152728 ], [ 6.6943808], [15.837504 ], [13.444315 ], [12.519631 ], [ 4.0379057], [ 5.1663475]], dtype=float32)","title":"Results"},{"location":"tutorial/callbacks/#other-callback","text":"There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"Other Callback"},{"location":"tutorial/core/","text":"Ivory Core Entities Client Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [2] 2020-05-27 11:20:16 ( 482ms ) python3 ( 2.62s ) Client(num_objects=2) list(client) [3] 2020-05-27 11:20:16 ( 3.00ms ) python3 ( 2.62s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . Show the files in the working directory examples . import os os.listdir('examples') [4] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.63s ) ['client.yml', 'mlruns', 'rectangle', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by the MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 5 client.yml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\client.yml Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Experiment The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of the MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [5] 2020-05-27 11:20:16 ( 14.0ms ) python3 ( 2.64s ) [I 200527 11:20:16 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by the MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 6 torch.yml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\torch.yml After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [6] 2020-05-27 11:20:16 ( 5.00ms ) python3 ( 2.64s ) {'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'batch_size': 10, 'fold': 0, 'class': 'ivory.torch.data.DataLoaders'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}, 'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. Run After setting up an Experiment instance, you can create runs with various parameter. Default parameters Calling without arguments creates a run with default parameters. run = experiment.create_run() run [7] 2020-05-27 11:20:16 ( 264ms ) python3 ( 2.91s ) Run(id='26fa789e22d84976a233310b51302a9c', name='run#0', num_objects=12) Here, the ID for this run was given by the MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \". Parameter configuration Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.dataloaders.fold [8] 2020-05-27 11:20:17 ( 41.0ms ) python3 ( 2.95s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.dataloaders.fold [9] 2020-05-27 11:20:17 ( 129ms ) python3 ( 3.08s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-98-689904ca4a89> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.dataloaders.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict): Duplicated parameter Duplicated parameters are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [10] 2020-05-27 11:20:17 ( 136ms ) python3 ( 3.21s ) (5, 5) Scoping by dots To specify an individual parameter, use scoping by dots. In this case, pass a dictionary with string type keys with dots to the first argument. update = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(update) run.scheduler.patience, run.early_stopping.patience [11] 2020-05-27 11:20:17 ( 42.0ms ) python3 ( 3.26s ) (8, 20) Object type Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [12] 2020-05-27 11:20:17 ( 42.0ms ) python3 ( 3.30s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [13] 2020-05-27 11:20:17 ( 46.0ms ) python3 ( 3.34s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort. In the previous examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are qeuivalent. Code 4 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 5 run = client.create_run('torch', fold=3) Task for multiple runs Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. # task = experiment.create_task() # Alternative method. task = client.create_task('torch') task [14] 2020-05-27 11:20:17 ( 50.0ms ) python3 ( 3.39s ) Task(id='6a6334fe50ea488588518418986f83ea', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. runs = task.product(fold=range(2), lr=[1e-4, 1e-3]) runs [15] 2020-05-27 11:20:17 ( 3.00ms ) python3 ( 3.40s ) <generator object Task.product at 0x0000012E5FBE94C8>","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Core Entities</span></span></span>"},{"location":"tutorial/core/#ivory-core-entities","text":"","title":"Ivory Core Entities"},{"location":"tutorial/core/#client","text":"Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [2] 2020-05-27 11:20:16 ( 482ms ) python3 ( 2.62s ) Client(num_objects=2) list(client) [3] 2020-05-27 11:20:16 ( 3.00ms ) python3 ( 2.62s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . Show the files in the working directory examples . import os os.listdir('examples') [4] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.63s ) ['client.yml', 'mlruns', 'rectangle', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by the MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 5 client.yml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\client.yml Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Client"},{"location":"tutorial/core/#experiment","text":"The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of the MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [5] 2020-05-27 11:20:16 ( 14.0ms ) python3 ( 2.64s ) [I 200527 11:20:16 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by the MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 6 torch.yml File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\torch.yml After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [6] 2020-05-27 11:20:16 ( 5.00ms ) python3 ( 2.64s ) {'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'batch_size': 10, 'fold': 0, 'class': 'ivory.torch.data.DataLoaders'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}, 'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by the MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance.","title":"Experiment"},{"location":"tutorial/core/#run","text":"After setting up an Experiment instance, you can create runs with various parameter. Default parameters Calling without arguments creates a run with default parameters. run = experiment.create_run() run [7] 2020-05-27 11:20:16 ( 264ms ) python3 ( 2.91s ) Run(id='26fa789e22d84976a233310b51302a9c', name='run#0', num_objects=12) Here, the ID for this run was given by the MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \". Parameter configuration Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.dataloaders.fold [8] 2020-05-27 11:20:17 ( 41.0ms ) python3 ( 2.95s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.dataloaders.fold [9] 2020-05-27 11:20:17 ( 129ms ) python3 ( 3.08s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-98-689904ca4a89> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.dataloaders.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict): Duplicated parameter Duplicated parameters are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [10] 2020-05-27 11:20:17 ( 136ms ) python3 ( 3.21s ) (5, 5) Scoping by dots To specify an individual parameter, use scoping by dots. In this case, pass a dictionary with string type keys with dots to the first argument. update = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(update) run.scheduler.patience, run.early_stopping.patience [11] 2020-05-27 11:20:17 ( 42.0ms ) python3 ( 3.26s ) (8, 20) Object type Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [12] 2020-05-27 11:20:17 ( 42.0ms ) python3 ( 3.30s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [13] 2020-05-27 11:20:17 ( 46.0ms ) python3 ( 3.34s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort. In the previous examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are qeuivalent. Code 4 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 5 run = client.create_run('torch', fold=3)","title":"Run"},{"location":"tutorial/core/#task-for-multiple-runs","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. # task = experiment.create_task() # Alternative method. task = client.create_task('torch') task [14] 2020-05-27 11:20:17 ( 50.0ms ) python3 ( 3.39s ) Task(id='6a6334fe50ea488588518418986f83ea', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. runs = task.product(fold=range(2), lr=[1e-4, 1e-3]) runs [15] 2020-05-27 11:20:17 ( 3.00ms ) python3 ( 3.40s ) <generator object Task.product at 0x0000012E5FBE94C8>","title":"Task for multiple runs"},{"location":"tutorial/data/","text":"Set of Data classes Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain about them. File 3 rectangle/data.py File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\rectangle\\data.py Data First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [1] 2020-05-27 11:20:13 ( 336ms ) python3 ( 363ms ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [2] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 367ms ) [0, array([2.0505505, 3.946847 ], dtype=float32), array([7.9048285], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [3] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 371ms ) [array([ 0, 10, 20]), array([[2.0505505, 3.946847 ], [2.2117307, 4.5932317], [2.397383 , 3.5667746]], dtype=float32), array([[ 7.9048285], [10.27624 ], [ 8.546301 ]], dtype=float32)] Dataset An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [4] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 376ms ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [5] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 380ms ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get sample from an dataset. use normal indexing dataset[0] # Integer index. [6] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 385ms ) [0, array([2.0505505, 3.946847 ], dtype=float32), array([7.9048285], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [7] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 390ms ) [array([ 0, 16, 33]), array([[2.0505505, 3.946847 ], [1.487727 , 2.145843 ], [4.7800612, 4.4882574]], dtype=float32), array([[ 7.9048285], [ 3.264816 ], [21.494596 ]], dtype=float32)] index, *_ = dataset[:] print(len(index)) index[:10] [8] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 395ms ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional argument: transform . def transform(mode:str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [9] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 400ms ) [0, array([4.101101, 7.893694], dtype=float32), array([15.809657], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [10] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 404ms ) [array([4.101101, 7.893694], dtype=float32), array([15.809657], dtype=float32)] Usually, we don't instantiate the Dataset object directly. Instead, the next Datasets class manages the dataset. Datasets An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [11] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 408ms ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. A Datasets instance is a dict-like object: for dataset in datasets.items(): print(dataset) [12] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 411ms ) ('train', Dataset(mode='train', num_samples=600)) ('val', Dataset(mode='val', num_samples=200)) ('test', Dataset(mode='test', num_samples=200)) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [13] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 414ms ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset. DataLoaders The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [14] 2020-05-27 11:20:14 ( 266ms ) python3 ( 680ms ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. for dataloader in dataloaders.items(): print(dataloader) [15] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 684ms ) ('train', <torch.utils.data.dataloader.DataLoader object at 0x0000012E54B60AC8>) ('val', <torch.utils.data.dataloader.DataLoader object at 0x0000012E54B60E08>) ('test', <torch.utils.data.dataloader.DataLoader object at 0x0000012E54B60F08>) As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [16] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 690ms ) [tensor([ 4, 439, 491, 85], dtype=torch.int32), tensor([[3.7975, 1.9180], [1.5303, 1.8087], [1.9494, 4.8800], [2.1990, 1.9394]]), tensor([[7.2208], [2.7958], [9.4522], [4.3171]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs of a model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Set of Data classes</span></span></span>"},{"location":"tutorial/data/#set-of-data-classes","text":"Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain about them. File 3 rectangle/data.py File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\rectangle\\data.py","title":"Set of Data classes"},{"location":"tutorial/data/#data","text":"First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [1] 2020-05-27 11:20:13 ( 336ms ) python3 ( 363ms ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [2] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 367ms ) [0, array([2.0505505, 3.946847 ], dtype=float32), array([7.9048285], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [3] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 371ms ) [array([ 0, 10, 20]), array([[2.0505505, 3.946847 ], [2.2117307, 4.5932317], [2.397383 , 3.5667746]], dtype=float32), array([[ 7.9048285], [10.27624 ], [ 8.546301 ]], dtype=float32)]","title":"Data"},{"location":"tutorial/data/#dataset","text":"An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [4] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 376ms ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [5] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 380ms ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get sample from an dataset. use normal indexing dataset[0] # Integer index. [6] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 385ms ) [0, array([2.0505505, 3.946847 ], dtype=float32), array([7.9048285], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [7] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 390ms ) [array([ 0, 16, 33]), array([[2.0505505, 3.946847 ], [1.487727 , 2.145843 ], [4.7800612, 4.4882574]], dtype=float32), array([[ 7.9048285], [ 3.264816 ], [21.494596 ]], dtype=float32)] index, *_ = dataset[:] print(len(index)) index[:10] [8] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 395ms ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional argument: transform . def transform(mode:str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [9] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 400ms ) [0, array([4.101101, 7.893694], dtype=float32), array([15.809657], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [10] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 404ms ) [array([4.101101, 7.893694], dtype=float32), array([15.809657], dtype=float32)] Usually, we don't instantiate the Dataset object directly. Instead, the next Datasets class manages the dataset.","title":"Dataset"},{"location":"tutorial/data/#datasets","text":"An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [11] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 408ms ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. A Datasets instance is a dict-like object: for dataset in datasets.items(): print(dataset) [12] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 411ms ) ('train', Dataset(mode='train', num_samples=600)) ('val', Dataset(mode='val', num_samples=200)) ('test', Dataset(mode='test', num_samples=200)) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [13] 2020-05-27 11:20:14 ( 3.00ms ) python3 ( 414ms ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"Datasets"},{"location":"tutorial/data/#dataloaders","text":"The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [14] 2020-05-27 11:20:14 ( 266ms ) python3 ( 680ms ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function. for dataloader in dataloaders.items(): print(dataloader) [15] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 684ms ) ('train', <torch.utils.data.dataloader.DataLoader object at 0x0000012E54B60AC8>) ('val', <torch.utils.data.dataloader.DataLoader object at 0x0000012E54B60E08>) ('test', <torch.utils.data.dataloader.DataLoader object at 0x0000012E54B60F08>) As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [16] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 690ms ) [tensor([ 4, 439, 491, 85], dtype=torch.int32), tensor([[3.7975, 1.9180], [1.5303, 1.8087], [1.9494, 4.8800], [2.1990, 1.9394]]), tensor([[7.2208], [2.7958], [9.4522], [4.3171]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs of a model.","title":"DataLoaders"},{"location":"tutorial/instance/","text":"Creating Instance In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. We creates a DataLoaders described in the previous section . Basic idea A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. We call this dictionary params . from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [1] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 705ms ) Data(train_size=834, test_size=166) Here, create_instance() requires the second parameter name to specify a key because params can have multiple keys. Note that we added n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) [2] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 709ms ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing parmas easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [3] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 715ms ) Data(train_size=834, test_size=166) Hierarchal Structure Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [4] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 721ms ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Furthermore, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [5] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 727ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance. To describe this behavior, you can use a new def key instead of class . (See the previous section ) Default Class In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [6] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 733ms ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataloaders --- ivory.torch.data.DataLoaders dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [7] 2020-05-27 11:20:14 ( 7.00ms ) python3 ( 740ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4)","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Creating Instance</span></span></span>"},{"location":"tutorial/instance/#creating-instance","text":"In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. We creates a DataLoaders described in the previous section .","title":"Creating Instance"},{"location":"tutorial/instance/#basic-idea","text":"A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. We call this dictionary params . from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [1] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 705ms ) Data(train_size=834, test_size=166) Here, create_instance() requires the second parameter name to specify a key because params can have multiple keys. Note that we added n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) [2] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 709ms ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing parmas easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [3] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 715ms ) Data(train_size=834, test_size=166)","title":"Basic idea"},{"location":"tutorial/instance/#hierarchal-structure","text":"Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [4] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 721ms ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Furthermore, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [5] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 727ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance. To describe this behavior, you can use a new def key instead of class . (See the previous section )","title":"Hierarchal Structure"},{"location":"tutorial/instance/#default-class","text":"In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [6] 2020-05-27 11:20:14 ( 6.00ms ) python3 ( 733ms ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataloaders --- ivory.torch.data.DataLoaders dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [7] 2020-05-27 11:20:14 ( 7.00ms ) python3 ( 740ms ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4)","title":"Default Class"},{"location":"tutorial/model/","text":"Model Structure Model We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 4 rectangle/torch.py File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\rectangle\\torch.py We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [1] 2020-05-27 11:20:14 ( 10.0ms ) python3 ( 760ms ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [2] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 764ms ) tensor([[1.8468, 2.8763], [3.7362, 2.3923], [3.4463, 1.5164], [1.2578, 2.3722]]) model(input) [3] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 768ms ) tensor([[0.3755], [0.3938], [0.4127], [0.3660]], grad_fn=<AddmmBackward>) Optimizer To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [4] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 772ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [5] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 777ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in a globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method. Scheduler A Scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [6] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 781ms ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x12e4ee686c8> If a $ -notation has no suffix, the value becomes its key itself. The following two example are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Model Structure</span></span></span>"},{"location":"tutorial/model/#model-structure","text":"","title":"Model Structure"},{"location":"tutorial/model/#model","text":"We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 4 rectangle/torch.py File not found: C:\\Users\\daizu\\Documents\\github\\ivory\\docs\\tutorial\\examples\\rectangle\\torch.py We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [1] 2020-05-27 11:20:14 ( 10.0ms ) python3 ( 760ms ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [2] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 764ms ) tensor([[1.8468, 2.8763], [3.7362, 2.3923], [3.4463, 1.5164], [1.2578, 2.3722]]) model(input) [3] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 768ms ) tensor([[0.3755], [0.3938], [0.4127], [0.3660]], grad_fn=<AddmmBackward>)","title":"Model"},{"location":"tutorial/model/#optimizer","text":"To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [4] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 772ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [5] 2020-05-27 11:20:14 ( 5.00ms ) python3 ( 777ms ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in a globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method.","title":"Optimizer"},{"location":"tutorial/model/#scheduler","text":"A Scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [6] 2020-05-27 11:20:14 ( 4.00ms ) python3 ( 781ms ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x12e4ee686c8> If a $ -notation has no suffix, the value becomes its key itself. The following two example are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"Scheduler"},{"location":"tutorial/task/","text":"Multiple Runs Task Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [2] 2020-05-27 11:20:17 ( 42.0ms ) python3 ( 3.46s ) [I 200527 11:20:17 tracker:48] A new experiment created with name: 'torch' Task(id='8450051d87f9436cac3a08cc7f67cd93', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library. Product The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [3] 2020-05-27 11:20:17 ( 43.0ms ) python3 ( 3.51s ) <generator object Task.product at 0x0000012E5FBE9DC8> for run in runs: pass # Do somthing, for example, run.start() [4] 2020-05-27 11:20:17 ( 413ms ) python3 ( 3.92s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-27 11:20:18 ( 506ms ) python3 ( 4.43s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7 Chain The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [6] 2020-05-27 11:20:18 ( 68.0ms ) python3 ( 4.49s ) <generator object Task.chain at 0x0000012E60BE10C8> for run in runs: pass # Do somthing, for example, run.start() [7] 2020-05-27 11:20:18 ( 764ms ) python3 ( 5.26s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [8] 2020-05-27 11:20:19 ( 932ms ) python3 ( 6.19s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5 Tracking If the Client instace has a Tracker instance, the multiple runs created by the tasks can be tracked. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are some tasks we made above. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [9] 2020-05-27 11:20:20 ( 83.0ms ) python3 ( 6.27s ) 01adb task#4 40d56 task#3 38fa5 task#2 db806 task#1 Note task#0 that we made first hasn't yielded any runs yet, so that the task has not been a parent run. The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(2,4)) print_run_info(run_ids) [10] 2020-05-27 11:20:20 ( 125ms ) python3 ( 6.40s ) 38fa5 task#2 40d56 task#3 The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(3, 5)) print_run_info(run_ids) [11] 2020-05-27 11:20:20 ( 273ms ) python3 ( 6.67s ) a7468 run#13 b473f run#12 564c4 run#11 e2d24 run#10 a7900 run#9 6d027 run#8 9f776 run#19 b5a51 run#18 b6f37 run#17 1d959 run#16 3d41d run#15 85ad6 run#14 On the other hand, the client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=14) print_run_info([run_id]) [12] 2020-05-27 11:20:20 ( 69.0ms ) python3 ( 6.74s ) 01adb task#4 Range Ivory provides the ivory.utils.range.Range class for parameter setting. This class can be used as the standard range , but more flexible, expecially for float type. from ivory.utils.range import Range # Normal usage list(Range(3, 6)) # The stop value is included. [13] 2020-05-27 11:20:20 ( 5.00ms ) python3 ( 6.75s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [14] 2020-05-27 11:20:20 ( 4.00ms ) python3 ( 6.75s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [15] 2020-05-27 11:20:20 ( 5.00ms ) python3 ( 6.75s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [16] 2020-05-27 11:20:20 ( 4.00ms ) python3 ( 6.76s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [17] 2020-05-27 11:20:20 ( 5.00ms ) python3 ( 6.76s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [18] 2020-05-27 11:20:20 ( 4.00ms ) python3 ( 6.77s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Multiple Runs</span></span></span>"},{"location":"tutorial/task/#multiple-runs","text":"","title":"Multiple Runs"},{"location":"tutorial/task/#task","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [2] 2020-05-27 11:20:17 ( 42.0ms ) python3 ( 3.46s ) [I 200527 11:20:17 tracker:48] A new experiment created with name: 'torch' Task(id='8450051d87f9436cac3a08cc7f67cd93', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: prodcut() and chain() . These two methods have the same functionality as itertools of Python starndard library.","title":"Task"},{"location":"tutorial/task/#product","text":"The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [3] 2020-05-27 11:20:17 ( 43.0ms ) python3 ( 3.51s ) <generator object Task.product at 0x0000012E5FBE9DC8> for run in runs: pass # Do somthing, for example, run.start() [4] 2020-05-27 11:20:17 ( 413ms ) python3 ( 3.92s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-27 11:20:18 ( 506ms ) python3 ( 4.43s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7","title":"Product"},{"location":"tutorial/task/#chain","text":"The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [6] 2020-05-27 11:20:18 ( 68.0ms ) python3 ( 4.49s ) <generator object Task.chain at 0x0000012E60BE10C8> for run in runs: pass # Do somthing, for example, run.start() [7] 2020-05-27 11:20:18 ( 764ms ) python3 ( 5.26s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [8] 2020-05-27 11:20:19 ( 932ms ) python3 ( 6.19s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5","title":"Chain"},{"location":"tutorial/task/#tracking","text":"If the Client instace has a Tracker instance, the multiple runs created by the tasks can be tracked. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are some tasks we made above. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [9] 2020-05-27 11:20:20 ( 83.0ms ) python3 ( 6.27s ) 01adb task#4 40d56 task#3 38fa5 task#2 db806 task#1 Note task#0 that we made first hasn't yielded any runs yet, so that the task has not been a parent run. The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(2,4)) print_run_info(run_ids) [10] 2020-05-27 11:20:20 ( 125ms ) python3 ( 6.40s ) 38fa5 task#2 40d56 task#3 The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(3, 5)) print_run_info(run_ids) [11] 2020-05-27 11:20:20 ( 273ms ) python3 ( 6.67s ) a7468 run#13 b473f run#12 564c4 run#11 e2d24 run#10 a7900 run#9 6d027 run#8 9f776 run#19 b5a51 run#18 b6f37 run#17 1d959 run#16 3d41d run#15 85ad6 run#14 On the other hand, the client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=14) print_run_info([run_id]) [12] 2020-05-27 11:20:20 ( 69.0ms ) python3 ( 6.74s ) 01adb task#4","title":"Tracking"},{"location":"tutorial/task/#range","text":"Ivory provides the ivory.utils.range.Range class for parameter setting. This class can be used as the standard range , but more flexible, expecially for float type. from ivory.utils.range import Range # Normal usage list(Range(3, 6)) # The stop value is included. [13] 2020-05-27 11:20:20 ( 5.00ms ) python3 ( 6.75s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [14] 2020-05-27 11:20:20 ( 4.00ms ) python3 ( 6.75s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [15] 2020-05-27 11:20:20 ( 5.00ms ) python3 ( 6.75s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [16] 2020-05-27 11:20:20 ( 4.00ms ) python3 ( 6.76s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [17] 2020-05-27 11:20:20 ( 5.00ms ) python3 ( 6.76s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [18] 2020-05-27 11:20:20 ( 4.00ms ) python3 ( 6.77s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"Range"},{"location":"tutorial/trainer/","text":"Training a Model Example Preparation First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 \"\"\") params [1] 2020-05-27 11:20:14 ( 8.00ms ) python3 ( 895ms ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}}, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [2] 2020-05-27 11:20:14 ( 236ms ) python3 ( 1.13s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer'] Callbacks Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [3] 2020-05-27 11:20:15 ( 28.0ms ) python3 ( 1.16s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin Metrics The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [4] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.16s ) Metrics() The Metrics class for PyTorch has a criterion callable object to calculate loss. run.metrics.criterion [5] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.17s ) <function torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')> Monitor The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-27 11:20:15 ( 4.00ms ) python3 ( 1.17s ) Monitor(metric='val_loss', mode='min') EarlyStopping The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.17s ) EarlyStopping(patience=10, wait=0) Trainer The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.18s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch') Using a Trainer A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-27 11:20:15 ( 605ms ) python3 ( 1.78s ) [epoch#0] loss=11.69 val_loss=8.217 lr=0.001 best [epoch#1] loss=6.089 val_loss=5.673 lr=0.001 best [epoch#2] loss=4.437 val_loss=5.156 lr=0.001 best [epoch#3] loss=3.007 val_loss=2.59 lr=0.001 best [epoch#4] loss=1.881 val_loss=1.837 lr=0.001 best [epoch#5] loss=1.123 val_loss=1.045 lr=0.001 best [epoch#6] loss=0.7874 val_loss=0.8148 lr=0.001 best [epoch#7] loss=0.6396 val_loss=0.774 lr=0.001 best [epoch#8] loss=0.5705 val_loss=0.5891 lr=0.001 best [epoch#9] loss=0.4789 val_loss=0.5824 lr=0.001 best You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-27 11:20:15 ( 264ms ) python3 ( 2.04s ) [epoch#10] loss=0.4572 val_loss=0.5378 lr=0.001 best [epoch#11] loss=0.3911 val_loss=0.4495 lr=0.001 best [epoch#12] loss=0.4219 val_loss=0.4424 lr=0.001 best [epoch#13] loss=0.3715 val_loss=0.4296 lr=0.001 best [epoch#14] loss=0.3246 val_loss=0.351 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch. Callbacks after Training After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-27 11:20:16 ( 5.00ms ) python3 ( 2.05s ) Metrics(loss=0.3246, val_loss=0.351, lr=0.001) run.metrics.history.val_loss # Totally, trained for 15 epochs. [12] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.05s ) {0: 8.217371582984924, 1: 5.6733261227607725, 2: 5.156316578388214, 3: 2.5896784901618957, 4: 1.8370765134692193, 5: 1.045198565721512, 6: 0.8148062765598297, 7: 0.7740256480872632, 8: 0.5890576861798763, 9: 0.5823782179504633, 10: 0.53783745393157, 11: 0.4494582749903202, 12: 0.44244948104023935, 13: 0.4295623578131199, 14: 0.3509661812335253} run.monitor # Store the best score and its epoch. [13] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.06s ) Monitor(metric='val_loss', mode='min', best_score=0.351, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.06s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.07s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Training a Model</span></span></span>"},{"location":"tutorial/trainer/#training-a-model","text":"","title":"Training a Model"},{"location":"tutorial/trainer/#example-preparation","text":"First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: criterion: def: torch.nn.functional.mse_loss monitor: metric: val_loss early_stopping: patience: 10 trainer: epochs: 10 verbose: 2 \"\"\") params [1] 2020-05-27 11:20:14 ( 8.00ms ) python3 ( 895ms ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': {'criterion': {'def': 'torch.nn.functional.mse_loss'}}, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [2] 2020-05-27 11:20:14 ( 236ms ) python3 ( 1.13s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer']","title":"Example Preparation"},{"location":"tutorial/trainer/#callbacks","text":"Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [3] 2020-05-27 11:20:15 ( 28.0ms ) python3 ( 1.16s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin","title":"Callbacks"},{"location":"tutorial/trainer/#metrics","text":"The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [4] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.16s ) Metrics() The Metrics class for PyTorch has a criterion callable object to calculate loss. run.metrics.criterion [5] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.17s ) <function torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')>","title":"Metrics"},{"location":"tutorial/trainer/#monitor","text":"The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-27 11:20:15 ( 4.00ms ) python3 ( 1.17s ) Monitor(metric='val_loss', mode='min')","title":"Monitor"},{"location":"tutorial/trainer/#earlystopping","text":"The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.17s ) EarlyStopping(patience=10, wait=0)","title":"EarlyStopping"},{"location":"tutorial/trainer/#trainer","text":"The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-27 11:20:15 ( 3.00ms ) python3 ( 1.18s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Trainer"},{"location":"tutorial/trainer/#using-a-trainer","text":"A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-27 11:20:15 ( 605ms ) python3 ( 1.78s ) [epoch#0] loss=11.69 val_loss=8.217 lr=0.001 best [epoch#1] loss=6.089 val_loss=5.673 lr=0.001 best [epoch#2] loss=4.437 val_loss=5.156 lr=0.001 best [epoch#3] loss=3.007 val_loss=2.59 lr=0.001 best [epoch#4] loss=1.881 val_loss=1.837 lr=0.001 best [epoch#5] loss=1.123 val_loss=1.045 lr=0.001 best [epoch#6] loss=0.7874 val_loss=0.8148 lr=0.001 best [epoch#7] loss=0.6396 val_loss=0.774 lr=0.001 best [epoch#8] loss=0.5705 val_loss=0.5891 lr=0.001 best [epoch#9] loss=0.4789 val_loss=0.5824 lr=0.001 best You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-27 11:20:15 ( 264ms ) python3 ( 2.04s ) [epoch#10] loss=0.4572 val_loss=0.5378 lr=0.001 best [epoch#11] loss=0.3911 val_loss=0.4495 lr=0.001 best [epoch#12] loss=0.4219 val_loss=0.4424 lr=0.001 best [epoch#13] loss=0.3715 val_loss=0.4296 lr=0.001 best [epoch#14] loss=0.3246 val_loss=0.351 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch.","title":"Using a Trainer"},{"location":"tutorial/trainer/#callbacks-after-training","text":"After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-27 11:20:16 ( 5.00ms ) python3 ( 2.05s ) Metrics(loss=0.3246, val_loss=0.351, lr=0.001) run.metrics.history.val_loss # Totally, trained for 15 epochs. [12] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.05s ) {0: 8.217371582984924, 1: 5.6733261227607725, 2: 5.156316578388214, 3: 2.5896784901618957, 4: 1.8370765134692193, 5: 1.045198565721512, 6: 0.8148062765598297, 7: 0.7740256480872632, 8: 0.5890576861798763, 9: 0.5823782179504633, 10: 0.53783745393157, 11: 0.4494582749903202, 12: 0.44244948104023935, 13: 0.4295623578131199, 14: 0.3509661812335253} run.monitor # Store the best score and its epoch. [13] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.06s ) Monitor(metric='val_loss', mode='min', best_score=0.351, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.06s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-27 11:20:16 ( 4.00ms ) python3 ( 2.07s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Callbacks after Training"}]}
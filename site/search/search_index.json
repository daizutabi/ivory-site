{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ivory Documentation Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Documentation</span></span></span>"},{"location":"#ivory-documentation","text":"Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"Ivory Documentation"},{"location":"quickstart/","text":"Quickstart Installation Install Ivory using pip . $ pip install ivory Using an Ivory Client Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-05-28 23:46:03 ( 1.01s ) python3 ( 1.08s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-05-28 23:46:04 ( 4.00ms ) python3 ( 1.08s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-05-28 23:46:04 ( 5.00ms ) python3 ( 1.08s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-05-28 23:46:04 ( 3.00ms ) python3 ( 1.09s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Create NumPy data In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function defined in rectangle/data.py and an example output: File 2 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-28 23:46:04 ( 3.00ms ) python3 ( 1.10s ) array([[1.5655429, 1.8802347], [4.736606 , 3.629453 ], [3.9237232, 4.552829 ], [3.3335414, 4.917483 ]], dtype=float32) z [9] 2020-05-28 23:46:04 ( 3.00ms ) python3 ( 1.10s ) array([ 2.882068, 17.226807, 17.889614, 16.661234], dtype=float32) Set of Data classes Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. In the above file, the kfold_split() function creates a fold array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [10] 2020-05-28 23:46:04 ( 5.00ms ) python3 ( 1.11s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) Now, we can get a Data instance. data = rectangle.data.Data() data [11] 2020-05-28 23:46:04 ( 4.00ms ) python3 ( 1.11s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [12] 2020-05-28 23:46:04 ( 4.00ms ) python3 ( 1.11s ) [0, array([4.9264817, 2.0171704], dtype=float32), array([9.963464], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from. Define a model We use a simple MLP model here. File 3 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) Parameter file for Run Ivory configures a run using a YAML file. Here is a full example. File 4 torch.yaml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [10, 20] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [14] 2020-05-28 23:46:04 ( 274ms ) python3 ( 1.65s ) [I 200528 23:46:04 tracker:48] A new experiment created with name: 'torch' Run(id='a12feacc70a3457790fa8242cf91e1f6', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [15] 2020-05-28 23:46:05 ( 7.00ms ) python3 ( 1.66s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 10 - 20 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: a12feacc70a3457790fa8242cf91e1f6 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method can take keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [16] 2020-05-28 23:46:05 ( 43.0ms ) python3 ( 1.70s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60 Train a model Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [17] 2020-05-28 23:46:05 ( 1.28s ) python3 ( 2.98s ) [epoch#0] loss=42.05 val_loss=9.138 lr=0.001 best [epoch#1] loss=9.195 val_loss=8.09 lr=0.001 best [epoch#2] loss=8.412 val_loss=7.291 lr=0.001 best [epoch#3] loss=7.591 val_loss=6.618 lr=0.001 best [epoch#4] loss=6.915 val_loss=6.075 lr=0.001 best [epoch#5] loss=6.163 val_loss=5.339 lr=0.001 best [epoch#6] loss=5.386 val_loss=4.999 lr=0.001 best [epoch#7] loss=4.711 val_loss=3.996 lr=0.001 best [epoch#8] loss=3.755 val_loss=3.198 lr=0.001 best [epoch#9] loss=3.156 val_loss=2.534 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [18] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.98s ) Dict(['loss', 'val_loss', 'lr']) run.metrics.history.val_loss [19] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.99s ) {0: 9.138436579704285, 1: 8.089774250984192, 2: 7.29053144454956, 3: 6.617945301532745, 4: 6.075325512886048, 5: 5.338927865028381, 6: 4.998734152317047, 7: 3.9956497967243196, 8: 3.1977656304836275, 9: 2.5335898637771606} Also the model output and target are automatically collected in a run.results instance. run.results [20] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.99s ) Results(['train', 'val']) run.results.val.output[:5] [21] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.99s ) array([[7.716711 ], [6.583075 ], [5.9526825], [6.3380604], [9.988774 ]], dtype=float32) run.results.val.target[:5] [22] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.00s ) array([[6.7694726], [5.517828 ], [4.14811 ], [4.7321935], [9.493988 ]], dtype=float32) Test a model Testing a model is as simple as training. Just call run.start('test') instead of a (default) 'train' argument. run.start('test') run.results [23] 2020-05-28 23:46:06 ( 39.0ms ) python3 ( 3.04s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [24] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.04s ) array([[13.03527 ], [12.340318 ], [ 9.567998 ], [ 7.0135937], [15.136635 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [25] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.05s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32) Task for multiple runs Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [26] 2020-05-28 23:46:06 ( 44.0ms ) python3 ( 3.09s ) Task(id='c253f9b607b746cc983c1bc4c51507e8', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [27] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.09s ) <generator object Task.product at 0x0000027F192753C8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specify. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [28] 2020-05-28 23:46:06 ( 2.12s ) python3 ( 5.21s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3 Collect runs Our client has a Tracker instance. It stores the state of runs in background using MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by MLFlow Tracking. # A helper function. def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [29] 2020-05-28 23:46:08 ( 3.00ms ) python3 ( 5.21s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [30] 2020-05-28 23:46:08 ( 66.0ms ) python3 ( 5.28s ) c5f08 run#6 20843 run#5 fee79 run#4 6a9b1 run#3 c253f task#0 b799f run#2 49a04 run#1 a12fe run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [31] 2020-05-28 23:46:08 ( 152ms ) python3 ( 5.43s ) 6a9b1 run#3 b799f run#2 49a04 run#1 a12fe run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [32] 2020-05-28 23:46:08 ( 43.0ms ) python3 ( 5.47s ) c5f08 run#6 20843 run#5 fee79 run#4 6a9b1 run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [33] 2020-05-28 23:46:08 ( 51.0ms ) python3 ( 5.53s ) a12fe run#0 c253f task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [34] 2020-05-28 23:46:09 ( 55.0ms ) python3 ( 5.58s ) b799f run#2 6a9b1 run#3 Load runs and results An Ivory Client instance can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances now. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [35] 2020-05-28 23:46:09 ( 63.0ms ) python3 ( 5.64s ) c5f08 run#6 20843 run#5 fee79 run#4 6a9b1 run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [36] 2020-05-28 23:46:09 ( 43.0ms ) python3 ( 5.69s ) Run(id='c5f0861dcdb84166a46207b440df2b31', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [37] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 5.69s ) 3 By loading a run, we obtained the pretrained model. run.model.eval() [38] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 5.69s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [39] 2020-05-28 23:46:09 ( 11.0ms ) python3 ( 5.70s ) [output] tensor([[8.5230], [7.1706], [5.6422], [5.4672], [7.2996]]) [target] tensor([[6.2850], [4.2799], [2.9693], [3.2102], [4.5392]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [40] 2020-05-28 23:46:09 ( 25.0ms ) python3 ( 5.73s ) Results(['train', 'val', 'test']) for mode in results: # Yield a mode. print(mode, results[mode].output.shape) [41] 2020-05-28 23:46:09 ( 9.00ms ) python3 ( 5.74s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. In order to load multiple run's results at the same time, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [42] 2020-05-28 23:46:09 ( 96.0ms ) python3 ( 5.83s ) Results(['val', 'test']) for mode, result in results.items(): # Yield a (mode, result). print(mode, result.output.shape) [43] 2020-05-28 23:46:09 ( 8.00ms ) python3 ( 5.84s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [44] 2020-05-28 23:46:09 ( 5.00ms ) python3 ( 5.85s ) (800, 200) Usually, duplicated samples in test data are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode, result in reduced_results.items(): print(mode, result.output.shape) [45] 2020-05-28 23:46:09 ( 15.0ms ) python3 ( 5.86s ) val (800, 1) test (200, 1) Compare these results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [46] 2020-05-28 23:46:09 ( 10.0ms ) python3 ( 5.87s ) [results] [[12.303018 ] [13.1441765] [12.293578 ] [11.912803 ]] -> mean: 12.413394 [reduced_results] [[12.413394]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [47] 2020-05-28 23:46:09 ( 88.0ms ) python3 ( 5.96s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [48] 2020-05-28 23:46:09 ( 8.00ms ) python3 ( 5.97s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [49] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 5.97s ) 2.1271484 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [50] 2020-05-28 23:46:09 ( 5.00ms ) python3 ( 5.98s ) array([[12.413394 ], [11.636637 ], [10.016627 ], [ 7.2061424], [13.685492 ]], dtype=float32) Summary In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Quickstart</span></span></span>"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Install Ivory using pip . $ pip install ivory","title":"Installation"},{"location":"quickstart/#using-an-ivory-client","text":"Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-05-28 23:46:03 ( 1.01s ) python3 ( 1.08s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-05-28 23:46:04 ( 4.00ms ) python3 ( 1.08s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-05-28 23:46:04 ( 5.00ms ) python3 ( 1.08s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-05-28 23:46:04 ( 3.00ms ) python3 ( 1.09s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Using an Ivory Client"},{"location":"quickstart/#create-numpy-data","text":"In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function defined in rectangle/data.py and an example output: File 2 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-28 23:46:04 ( 3.00ms ) python3 ( 1.10s ) array([[1.5655429, 1.8802347], [4.736606 , 3.629453 ], [3.9237232, 4.552829 ], [3.3335414, 4.917483 ]], dtype=float32) z [9] 2020-05-28 23:46:04 ( 3.00ms ) python3 ( 1.10s ) array([ 2.882068, 17.226807, 17.889614, 16.661234], dtype=float32)","title":"Create NumPy data"},{"location":"quickstart/#set-of-data-classes","text":"Ivory defines a set of Data classes ( Data , Dataset , Datasets , DataLoaders ). But now, we use the Data class only. In the above file, the kfold_split() function creates a fold array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [10] 2020-05-28 23:46:04 ( 5.00ms ) python3 ( 1.11s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) Now, we can get a Data instance. data = rectangle.data.Data() data [11] 2020-05-28 23:46:04 ( 4.00ms ) python3 ( 1.11s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [12] 2020-05-28 23:46:04 ( 4.00ms ) python3 ( 1.11s ) [0, array([4.9264817, 2.0171704], dtype=float32), array([9.963464], dtype=float32)] This returned value is a list of [index, input, target]. Ivory always keeps data index so that we can know where a sample comes from.","title":"Set of Data classes"},{"location":"quickstart/#define-a-model","text":"We use a simple MLP model here. File 3 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x)","title":"Define a model"},{"location":"quickstart/#parameter-file-for-run","text":"Ivory configures a run using a YAML file. Here is a full example. File 4 torch.yaml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [10, 20] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [14] 2020-05-28 23:46:04 ( 274ms ) python3 ( 1.65s ) [I 200528 23:46:04 tracker:48] A new experiment created with name: 'torch' Run(id='a12feacc70a3457790fa8242cf91e1f6', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [15] 2020-05-28 23:46:05 ( 7.00ms ) python3 ( 1.66s ) run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 10 fold: 0 class: ivory.torch.data.DataLoaders model: class: rectangle.torch.Model hidden_sizes: - 10 - 20 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: a12feacc70a3457790fa8242cf91e1f6 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method can take keyword arguments to modify these parameters: run = client.create_run( 'torch', batch_size=20, hidden_sizes=[40, 50, 60], ) print('[dataloaders]') print(yaml.dump(run.params['run']['dataloaders'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [16] 2020-05-28 23:46:05 ( 43.0ms ) python3 ( 1.70s ) [dataloaders] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset batch_size: 20 fold: 0 class: ivory.torch.data.DataLoaders [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60","title":"Parameter file for Run"},{"location":"quickstart/#train-a-model","text":"Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [17] 2020-05-28 23:46:05 ( 1.28s ) python3 ( 2.98s ) [epoch#0] loss=42.05 val_loss=9.138 lr=0.001 best [epoch#1] loss=9.195 val_loss=8.09 lr=0.001 best [epoch#2] loss=8.412 val_loss=7.291 lr=0.001 best [epoch#3] loss=7.591 val_loss=6.618 lr=0.001 best [epoch#4] loss=6.915 val_loss=6.075 lr=0.001 best [epoch#5] loss=6.163 val_loss=5.339 lr=0.001 best [epoch#6] loss=5.386 val_loss=4.999 lr=0.001 best [epoch#7] loss=4.711 val_loss=3.996 lr=0.001 best [epoch#8] loss=3.755 val_loss=3.198 lr=0.001 best [epoch#9] loss=3.156 val_loss=2.534 lr=0.001 best The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [18] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.98s ) Dict(['loss', 'val_loss', 'lr']) run.metrics.history.val_loss [19] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.99s ) {0: 9.138436579704285, 1: 8.089774250984192, 2: 7.29053144454956, 3: 6.617945301532745, 4: 6.075325512886048, 5: 5.338927865028381, 6: 4.998734152317047, 7: 3.9956497967243196, 8: 3.1977656304836275, 9: 2.5335898637771606} Also the model output and target are automatically collected in a run.results instance. run.results [20] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.99s ) Results(['train', 'val']) run.results.val.output[:5] [21] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 2.99s ) array([[7.716711 ], [6.583075 ], [5.9526825], [6.3380604], [9.988774 ]], dtype=float32) run.results.val.target[:5] [22] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.00s ) array([[6.7694726], [5.517828 ], [4.14811 ], [4.7321935], [9.493988 ]], dtype=float32)","title":"Train a model"},{"location":"quickstart/#test-a-model","text":"Testing a model is as simple as training. Just call run.start('test') instead of a (default) 'train' argument. run.start('test') run.results [23] 2020-05-28 23:46:06 ( 39.0ms ) python3 ( 3.04s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [24] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.04s ) array([[13.03527 ], [12.340318 ], [ 9.567998 ], [ 7.0135937], [15.136635 ]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [25] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.05s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32)","title":"Test a model"},{"location":"quickstart/#task-for-multiple-runs","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [26] 2020-05-28 23:46:06 ( 44.0ms ) python3 ( 3.09s ) Task(id='c253f9b607b746cc983c1bc4c51507e8', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [27] 2020-05-28 23:46:06 ( 4.00ms ) python3 ( 3.09s ) <generator object Task.product at 0x0000027F192753C8> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specify. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [28] 2020-05-28 23:46:06 ( 2.12s ) python3 ( 5.21s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3","title":"Task for multiple runs"},{"location":"quickstart/#collect-runs","text":"Our client has a Tracker instance. It stores the state of runs in background using MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by MLFlow Tracking. # A helper function. def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [29] 2020-05-28 23:46:08 ( 3.00ms ) python3 ( 5.21s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [30] 2020-05-28 23:46:08 ( 66.0ms ) python3 ( 5.28s ) c5f08 run#6 20843 run#5 fee79 run#4 6a9b1 run#3 c253f task#0 b799f run#2 49a04 run#1 a12fe run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [31] 2020-05-28 23:46:08 ( 152ms ) python3 ( 5.43s ) 6a9b1 run#3 b799f run#2 49a04 run#1 a12fe run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [32] 2020-05-28 23:46:08 ( 43.0ms ) python3 ( 5.47s ) c5f08 run#6 20843 run#5 fee79 run#4 6a9b1 run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [33] 2020-05-28 23:46:08 ( 51.0ms ) python3 ( 5.53s ) a12fe run#0 c253f task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [34] 2020-05-28 23:46:09 ( 55.0ms ) python3 ( 5.58s ) b799f run#2 6a9b1 run#3","title":"Collect runs"},{"location":"quickstart/#load-runs-and-results","text":"An Ivory Client instance can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances now. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [35] 2020-05-28 23:46:09 ( 63.0ms ) python3 ( 5.64s ) c5f08 run#6 20843 run#5 fee79 run#4 6a9b1 run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [36] 2020-05-28 23:46:09 ( 43.0ms ) python3 ( 5.69s ) Run(id='c5f0861dcdb84166a46207b440df2b31', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.dataloaders.fold [37] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 5.69s ) 3 By loading a run, we obtained the pretrained model. run.model.eval() [38] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 5.69s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=1, bias=True) ) ) import torch index, input, target = next(iter(run.dataloaders.val)) with torch.no_grad(): output = run.model(input) print('[output]') print(output[:5]) print('[target]') print(target[:5]) [39] 2020-05-28 23:46:09 ( 11.0ms ) python3 ( 5.70s ) [output] tensor([[8.5230], [7.1706], [5.6422], [5.4672], [7.2996]]) [target] tensor([[6.2850], [4.2799], [2.9693], [3.2102], [4.5392]]) If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [40] 2020-05-28 23:46:09 ( 25.0ms ) python3 ( 5.73s ) Results(['train', 'val', 'test']) for mode in results: # Yield a mode. print(mode, results[mode].output.shape) [41] 2020-05-28 23:46:09 ( 9.00ms ) python3 ( 5.74s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. In order to load multiple run's results at the same time, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [42] 2020-05-28 23:46:09 ( 96.0ms ) python3 ( 5.83s ) Results(['val', 'test']) for mode, result in results.items(): # Yield a (mode, result). print(mode, result.output.shape) [43] 2020-05-28 23:46:09 ( 8.00ms ) python3 ( 5.84s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [44] 2020-05-28 23:46:09 ( 5.00ms ) python3 ( 5.85s ) (800, 200) Usually, duplicated samples in test data are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode, result in reduced_results.items(): print(mode, result.output.shape) [45] 2020-05-28 23:46:09 ( 15.0ms ) python3 ( 5.86s ) val (800, 1) test (200, 1) Compare these results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [46] 2020-05-28 23:46:09 ( 10.0ms ) python3 ( 5.87s ) [results] [[12.303018 ] [13.1441765] [12.293578 ] [11.912803 ]] -> mean: 12.413394 [reduced_results] [[12.413394]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [47] 2020-05-28 23:46:09 ( 88.0ms ) python3 ( 5.96s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [48] 2020-05-28 23:46:09 ( 8.00ms ) python3 ( 5.97s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [49] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 5.97s ) 2.1271484 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [50] 2020-05-28 23:46:09 ( 5.00ms ) python3 ( 5.98s ) array([[12.413394 ], [11.636637 ], [10.016627 ], [ 7.2061424], [13.685492 ]], dtype=float32)","title":"Load runs and results"},{"location":"quickstart/#summary","text":"In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"Summary"},{"location":"api/data/","text":"Skipped.","title":"Data"},{"location":"tutorial/callbacks/","text":"Callback System Basics Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-05-28 23:46:09 ( 5.00ms ) python3 ( 6.00s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have an only `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.01s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.01s ) CallbackCaller(num_objects=1) The number of registered instances is 1. list(caller) [5] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.02s ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [6] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.02s ) CallbackCaller(num_objects=13) The number of instances increased up to 13. list(caller) [7] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.02s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Let's inspect some callback funtions. caller.on_init_begin [8] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.03s ) Callback([]) This is an empty callback because the caller has no instances that define the on_init_begin() function. On the other hand, caller.on_fit_begin [9] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.03s ) Callback(['simple']) The simple instance is registered as a receiver of the on_fit_begin() function. We can call this. caller.on_fit_begin() [10] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.03s ) on_fit_begin is called from id=2745024214792 id(caller) [11] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.04s ) 2745024214792 This caller-receiver network among arbitrary instance collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below. Example Callback: Results To work with the Results callback, we create data and model set. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [12] 2020-05-28 23:46:09 ( 129ms ) python3 ( 6.16s ) NameError: name 'create_instance' is not defined NameError Traceback (most recent call last) <ipython-input-75-5d546837fa48> in <module> 19 hidden_sizes: [3, 4, 5] 20 \"\"\" ---> 21 dataloaders = create(doc, 'dataloaders') 22 model = create(doc, 'model') <ipython-input-75-5d546837fa48> in create(doc, name, **kwargs) 4 def create(doc, name, **kwargs): 5 params = yaml.safe_load(doc) ----> 6 return create_instance(params, name, **kwargs) 7 8 doc = \"\"\" The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-05-28 23:46:09 ( 88.0ms ) python3 ( 6.25s ) Results([]) import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [14] 2020-05-28 23:46:09 ( 9.00ms ) python3 ( 6.26s ) NameError: name 'dataloaders' is not defined NameError Traceback (most recent call last) <ipython-input-77-7b24c9848ff9> in <module> 2 3 run = ivory.core.run.Run( ----> 4 dataloaders=dataloaders, 5 model=model, 6 results=results # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-05-28 23:46:09 ( 107ms ) python3 ( 6.37s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-05-28 23:46:09 ( 10.0ms ) python3 ( 6.38s ) TypeError: 'Missing' object is not callable TypeError Traceback (most recent call last) <ipython-input-79-e9614b345816> in <module> 1 # For simplicity, just one epoch with some batches. ----> 2 run.on_train_begin() 3 data_iter = iter(run.dataloaders.train) 4 for _ in range(3): 5 index, input, target = next(data_iter) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [17] 2020-05-28 23:46:09 ( 103ms ) python3 ( 6.48s ) <ivory.core.collections.Missing at 0x27f20317488> results.train.index # Shuffled. The length is batch_size (4) x 3. [18] 2020-05-28 23:46:10 ( 10.0ms ) python3 ( 6.49s ) AttributeError: Results([]) has not attribute 'train' AttributeError Traceback (most recent call last) <ipython-input-81-bbb2dc847f8b> in <module> ----> 1 results.train.index # Shuffled. The length is batch_size (4) x 3. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.index # Not shuffled. The length is batch_size (4) x 2. [19] 2020-05-28 23:46:10 ( 109ms ) python3 ( 6.60s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-82-d9471d6d9605> in <module> ----> 1 results.val.index # Not shuffled. The length is batch_size (4) x 2. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.output # Actually, no learning. [20] 2020-05-28 23:46:10 ( 109ms ) python3 ( 6.71s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-83-38d4535a26b2> in <module> ----> 1 results.val.output # Actually, no learning. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.target [21] 2020-05-28 23:46:10 ( 108ms ) python3 ( 6.82s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-84-0c5bc72ef6f6> in <module> ----> 1 results.val.target ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") Other Callback There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callback System</span></span></span>"},{"location":"tutorial/callbacks/#callback-system","text":"","title":"Callback System"},{"location":"tutorial/callbacks/#basics","text":"Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-05-28 23:46:09 ( 5.00ms ) python3 ( 6.00s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have an only `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.01s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.01s ) CallbackCaller(num_objects=1) The number of registered instances is 1. list(caller) [5] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.02s ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [6] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.02s ) CallbackCaller(num_objects=13) The number of instances increased up to 13. list(caller) [7] 2020-05-28 23:46:09 ( 4.00ms ) python3 ( 6.02s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Let's inspect some callback funtions. caller.on_init_begin [8] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.03s ) Callback([]) This is an empty callback because the caller has no instances that define the on_init_begin() function. On the other hand, caller.on_fit_begin [9] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.03s ) Callback(['simple']) The simple instance is registered as a receiver of the on_fit_begin() function. We can call this. caller.on_fit_begin() [10] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.03s ) on_fit_begin is called from id=2745024214792 id(caller) [11] 2020-05-28 23:46:09 ( 3.00ms ) python3 ( 6.04s ) 2745024214792 This caller-receiver network among arbitrary instance collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below.","title":"Basics"},{"location":"tutorial/callbacks/#example-callback-results","text":"To work with the Results callback, we create data and model set. For more details about the following code, see Creating Instance section. import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') [12] 2020-05-28 23:46:09 ( 129ms ) python3 ( 6.16s ) NameError: name 'create_instance' is not defined NameError Traceback (most recent call last) <ipython-input-75-5d546837fa48> in <module> 19 hidden_sizes: [3, 4, 5] 20 \"\"\" ---> 21 dataloaders = create(doc, 'dataloaders') 22 model = create(doc, 'model') <ipython-input-75-5d546837fa48> in create(doc, name, **kwargs) 4 def create(doc, name, **kwargs): 5 params = yaml.safe_load(doc) ----> 6 return create_instance(params, name, **kwargs) 7 8 doc = \"\"\" The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-05-28 23:46:09 ( 88.0ms ) python3 ( 6.25s ) Results([]) import ivory.core.run run = ivory.core.run.Run( dataloaders=dataloaders, model=model, results=results ) run.create_callbacks() run [14] 2020-05-28 23:46:09 ( 9.00ms ) python3 ( 6.26s ) NameError: name 'dataloaders' is not defined NameError Traceback (most recent call last) <ipython-input-77-7b24c9848ff9> in <module> 2 3 run = ivory.core.run.Run( ----> 4 dataloaders=dataloaders, 5 model=model, 6 results=results # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-05-28 23:46:09 ( 107ms ) python3 ( 6.37s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. # For simplicity, just one epoch with some batches. run.on_train_begin() data_iter = iter(run.dataloaders.train) for _ in range(3): index, input, target = next(data_iter) output = model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. data_iter = iter(run.dataloaders.val) for _ in range(2): index, input, target = next(data_iter) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-05-28 23:46:09 ( 10.0ms ) python3 ( 6.38s ) TypeError: 'Missing' object is not callable TypeError Traceback (most recent call last) <ipython-input-79-e9614b345816> in <module> 1 # For simplicity, just one epoch with some batches. ----> 2 run.on_train_begin() 3 data_iter = iter(run.dataloaders.train) 4 for _ in range(3): 5 index, input, target = next(data_iter) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [17] 2020-05-28 23:46:09 ( 103ms ) python3 ( 6.48s ) <ivory.core.collections.Missing at 0x27f20317488> results.train.index # Shuffled. The length is batch_size (4) x 3. [18] 2020-05-28 23:46:10 ( 10.0ms ) python3 ( 6.49s ) AttributeError: Results([]) has not attribute 'train' AttributeError Traceback (most recent call last) <ipython-input-81-bbb2dc847f8b> in <module> ----> 1 results.train.index # Shuffled. The length is batch_size (4) x 3. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.index # Not shuffled. The length is batch_size (4) x 2. [19] 2020-05-28 23:46:10 ( 109ms ) python3 ( 6.60s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-82-d9471d6d9605> in <module> ----> 1 results.val.index # Not shuffled. The length is batch_size (4) x 2. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.output # Actually, no learning. [20] 2020-05-28 23:46:10 ( 109ms ) python3 ( 6.71s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-83-38d4535a26b2> in <module> ----> 1 results.val.output # Actually, no learning. ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\") results.val.target [21] 2020-05-28 23:46:10 ( 108ms ) python3 ( 6.82s ) AttributeError: Results([]) has not attribute 'val' AttributeError Traceback (most recent call last) <ipython-input-84-0c5bc72ef6f6> in <module> ----> 1 results.val.target ~\\Documents\\github\\ivory\\ivory\\core\\collections.py in __getattr__(self, index) 118 119 def __getattr__(self, index): --> 120 raise AttributeError(f\"{self.obj} has not attribute '{self.key}'\")","title":"Example Callback: Results"},{"location":"tutorial/callbacks/#other-callback","text":"There are several callback such as Metrics , Monitor , etc . We will learn about them in next 'Training a Model' section.","title":"Other Callback"},{"location":"tutorial/core/","text":"Ivory Core Entities Client Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [2] 2020-05-28 23:49:21 ( 1.01s ) python3 ( 1.16s ) Client(num_objects=2) list(client) [3] 2020-05-28 23:49:22 ( 4.51ms ) python3 ( 1.17s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna . Show files in the working directory examples . import os os.listdir('examples') [4] 2020-05-28 23:49:22 ( 4.00ms ) python3 ( 1.17s ) ['client.yml', 'mlruns', 'rectangle', 'study.yml', 'tf.yml', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 7 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Experiment The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [5] 2020-05-28 23:49:22 ( 292ms ) python3 ( 1.46s ) [I 200528 23:49:22 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 8 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [10, 20] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [6] 2020-05-28 23:49:22 ( 5.00ms ) python3 ( 1.47s ) {'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'batch_size': 10, 'fold': 0, 'class': 'ivory.torch.data.DataLoaders'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [10, 20]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. Run After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below. Default parameters Calling without arguments creates a run with default parameters. run = experiment.create_run() run [7] 2020-05-28 23:49:22 ( 265ms ) python3 ( 1.73s ) Run(id='0f134fbba8cc4342802a08c9d757e75d', name='run#0', num_objects=12) Here, the ID for this run is given by MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \". Simple literal (int, float, str) Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.dataloaders.fold [8] 2020-05-28 23:49:23 ( 40.0ms ) python3 ( 1.77s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.dataloaders.fold [9] 2020-05-28 23:49:23 ( 128ms ) python3 ( 1.90s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-34-689904ca4a89> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.dataloaders.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict): List A list parameter can be overwritten by passing a new list. Off course you can change the lengh of the list. The original hidden_sizes was [10, 20] . run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [10] 2020-05-28 23:49:23 ( 142ms ) python3 ( 2.04s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [11] 2020-05-28 23:49:23 ( 47.0ms ) python3 ( 2.09s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this method is unnecessary? This method is prepared for hyperparameter tuning . In some case, you may want to change a part of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [12] 2020-05-28 23:49:23 ( 48.0ms ) python3 ( 2.14s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) ) Duplicated parameter name Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [13] 2020-05-28 23:49:23 ( 46.0ms ) python3 ( 2.18s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all. Scoping by dots To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [14] 2020-05-28 23:49:23 ( 48.0ms ) python3 ( 2.23s ) (8, 20) Object type Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [15] 2020-05-28 23:49:23 ( 52.0ms ) python3 ( 2.28s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [16] 2020-05-28 23:49:23 ( 51.0ms ) python3 ( 2.34s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort. Creating a run from a client In the above examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 1 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 2 run = client.create_run('torch', fold=3)","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Core Entities</span></span></span>"},{"location":"tutorial/core/#ivory-core-entities","text":"","title":"Ivory Core Entities"},{"location":"tutorial/core/#client","text":"Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [2] 2020-05-28 23:49:21 ( 1.01s ) python3 ( 1.16s ) Client(num_objects=2) list(client) [3] 2020-05-28 23:49:22 ( 4.51ms ) python3 ( 1.17s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna . Show files in the working directory examples . import os os.listdir('examples') [4] 2020-05-28 23:49:22 ( 4.00ms ) python3 ( 1.17s ) ['client.yml', 'mlruns', 'rectangle', 'study.yml', 'tf.yml', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 7 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Client"},{"location":"tutorial/core/#experiment","text":"The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [5] 2020-05-28 23:49:22 ( 292ms ) python3 ( 1.46s ) [I 200528 23:49:22 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 8 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [10, 20] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [6] 2020-05-28 23:49:22 ( 5.00ms ) python3 ( 1.47s ) {'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'batch_size': 10, 'fold': 0, 'class': 'ivory.torch.data.DataLoaders'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [10, 20]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance.","title":"Experiment"},{"location":"tutorial/core/#run","text":"After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below.","title":"Run"},{"location":"tutorial/core/#default-parameters","text":"Calling without arguments creates a run with default parameters. run = experiment.create_run() run [7] 2020-05-28 23:49:22 ( 265ms ) python3 ( 1.73s ) Run(id='0f134fbba8cc4342802a08c9d757e75d', name='run#0', num_objects=12) Here, the ID for this run is given by MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \".","title":"Default parameters"},{"location":"tutorial/core/#simple-literal-int-float-str","text":"Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.dataloaders.fold [8] 2020-05-28 23:49:23 ( 40.0ms ) python3 ( 1.77s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.dataloaders.fold [9] 2020-05-28 23:49:23 ( 128ms ) python3 ( 1.90s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-34-689904ca4a89> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.dataloaders.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict):","title":"Simple literal (int, float, str)"},{"location":"tutorial/core/#list","text":"A list parameter can be overwritten by passing a new list. Off course you can change the lengh of the list. The original hidden_sizes was [10, 20] . run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [10] 2020-05-28 23:49:23 ( 142ms ) python3 ( 2.04s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [11] 2020-05-28 23:49:23 ( 47.0ms ) python3 ( 2.09s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this method is unnecessary? This method is prepared for hyperparameter tuning . In some case, you may want to change a part of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [12] 2020-05-28 23:49:23 ( 48.0ms ) python3 ( 2.14s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) )","title":"List"},{"location":"tutorial/core/#duplicated-parameter-name","text":"Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [13] 2020-05-28 23:49:23 ( 46.0ms ) python3 ( 2.18s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all.","title":"Duplicated parameter name"},{"location":"tutorial/core/#scoping-by-dots","text":"To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [14] 2020-05-28 23:49:23 ( 48.0ms ) python3 ( 2.23s ) (8, 20)","title":"Scoping by dots"},{"location":"tutorial/core/#object-type","text":"Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [15] 2020-05-28 23:49:23 ( 52.0ms ) python3 ( 2.28s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [16] 2020-05-28 23:49:23 ( 51.0ms ) python3 ( 2.34s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort.","title":"Object type"},{"location":"tutorial/core/#creating-a-run-from-a-client","text":"In the above examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 1 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 2 run = client.create_run('torch', fold=3)","title":"Creating a run from a client"},{"location":"tutorial/data/","text":"Set of Data classes Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain them. File 5 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) Data Class First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.50s ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [3] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.50s ) [0, array([4.9264817, 2.0171704], dtype=float32), array([9.963464], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.51s ) [array([ 0, 10, 20]), array([[4.9264817, 2.0171704], [2.2635322, 4.2031884], [4.6011696, 1.5117688]], dtype=float32), array([[9.963464], [9.655288], [6.983461]], dtype=float32)] Dataset An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.51s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.52s ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get data from an dataset. use normal indexing dataset[0] # Integer index. [7] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.52s ) [0, array([4.9264817, 2.0171704], dtype=float32), array([9.963464], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.53s ) [array([ 0, 16, 33]), array([[4.9264817, 2.0171704], [1.1265596, 2.717045 ], [2.5349507, 3.2155902]], dtype=float32), array([[9.963464 ], [2.9693139], [8.232191 ]], dtype=float32)] index, *_ = dataset[:] # Get all data. print(len(index)) index[:10] [9] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.53s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional and callable argument: transform . def transform(mode: str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.54s ) [0, array([9.852963, 4.034341], dtype=float32), array([19.926928], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [11] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.54s ) [array([9.852963, 4.034341], dtype=float32), array([19.926928], dtype=float32)] Usually, we don't instantiate the Dataset class directly. Instead, the Datasets class create dataset instances. Datasets An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.54s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function that returns a Dataset instance. for mode, dataset in datasets.items(): print(mode, dataset) [13] 2020-05-28 23:46:11 ( 7.00ms ) python3 ( 7.55s ) train Dataset(mode='train', num_samples=600) val Dataset(mode='val', num_samples=200) test Dataset(mode='test', num_samples=200) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-05-28 23:46:11 ( 3.00ms ) python3 ( 7.55s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset. DataLoaders The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [15] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.56s ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function that returns a Dataset instance. for mode, dataloader in dataloaders.items(): print(mode, dataloader) [16] 2020-05-28 23:46:11 ( 8.00ms ) python3 ( 7.57s ) train <torch.utils.data.dataloader.DataLoader object at 0x0000027F2031B0C8> val <torch.utils.data.dataloader.DataLoader object at 0x0000027F2031BC48> test <torch.utils.data.dataloader.DataLoader object at 0x0000027F2031BEC8> As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [17] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.57s ) [tensor([ 96, 439, 670, 17], dtype=torch.int32), tensor([[2.2005, 1.4683], [3.2108, 4.3724], [2.0037, 3.7226], [4.7798, 4.0843]]), tensor([[ 3.1530], [13.9969], [ 7.4320], [19.5409]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs for a PyTorch model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Set of Data classes</span></span></span>"},{"location":"tutorial/data/#set-of-data-classes","text":"Ivory uses four classes for data presentation: Data , Dataset , Datasets , and DataLoaders . In this tutorial, we use the following Python module to explain them. File 5 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class)","title":"Set of Data classes"},{"location":"tutorial/data/#data-class","text":"First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.50s ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a list of [ index , input , target ]. This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [3] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.50s ) [0, array([4.9264817, 2.0171704], dtype=float32), array([9.963464], dtype=float32)] data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.51s ) [array([ 0, 10, 20]), array([[4.9264817, 2.0171704], [2.2635322, 4.2031884], [4.6011696, 1.5117688]], dtype=float32), array([[9.963464], [9.655288], [6.983461]], dtype=float32)]","title":"Data Class"},{"location":"tutorial/data/#dataset","text":"An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.51s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.52s ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get data from an dataset. use normal indexing dataset[0] # Integer index. [7] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.52s ) [0, array([4.9264817, 2.0171704], dtype=float32), array([9.963464], dtype=float32)] dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.53s ) [array([ 0, 16, 33]), array([[4.9264817, 2.0171704], [1.1265596, 2.717045 ], [2.5349507, 3.2155902]], dtype=float32), array([[9.963464 ], [2.9693139], [8.232191 ]], dtype=float32)] index, *_ = dataset[:] # Get all data. print(len(index)) index[:10] [9] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.53s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional and callable argument: transform . def transform(mode: str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.54s ) [0, array([9.852963, 4.034341], dtype=float32), array([19.926928], dtype=float32)] [2 * dataset[0][1], 2 * dataset[0][2]] [11] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.54s ) [array([9.852963, 4.034341], dtype=float32), array([19.926928], dtype=float32)] Usually, we don't instantiate the Dataset class directly. Instead, the Datasets class create dataset instances.","title":"Dataset"},{"location":"tutorial/data/#datasets","text":"An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.54s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function that returns a Dataset instance. for mode, dataset in datasets.items(): print(mode, dataset) [13] 2020-05-28 23:46:11 ( 7.00ms ) python3 ( 7.55s ) train Dataset(mode='train', num_samples=600) val Dataset(mode='val', num_samples=200) test Dataset(mode='test', num_samples=200) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-05-28 23:46:11 ( 3.00ms ) python3 ( 7.55s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"Datasets"},{"location":"tutorial/data/#dataloaders","text":"The last class is the DataLoaders . This class is prepared for loading batches from a dataset. For example, assume that we are going to use PyTorch. from ivory.torch.data import DataLoaders dataloaders = DataLoaders(data, Dataset, fold=0, batch_size=4) dataloaders [15] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.56s ) DataLoaders(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function that returns a Dataset instance. for mode, dataloader in dataloaders.items(): print(mode, dataloader) [16] 2020-05-28 23:46:11 ( 8.00ms ) python3 ( 7.57s ) train <torch.utils.data.dataloader.DataLoader object at 0x0000027F2031B0C8> val <torch.utils.data.dataloader.DataLoader object at 0x0000027F2031BC48> test <torch.utils.data.dataloader.DataLoader object at 0x0000027F2031BEC8> As you can see an ivory.torch.data.DataLoaders instance creates PyTorch's DataLoader. Check the samples. next(iter(dataloaders.train)) [17] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.57s ) [tensor([ 96, 439, 670, 17], dtype=torch.int32), tensor([[2.2005, 1.4683], [3.2108, 4.3724], [2.0037, 3.7226], [4.7798, 4.0843]]), tensor([[ 3.1530], [13.9969], [ 7.4320], [19.5409]])] Returned samples are torch.Tensor instead of np.ndarray . We can use these tensors as inputs for a PyTorch model.","title":"DataLoaders"},{"location":"tutorial/instance/","text":"Creating Instances In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. Basic idea A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.59s ) Data(train_size=834, test_size=166) Here, the create_instance() function requires the second parameter name to specify a key because the first argument params can have multiple keys. Note that we added a n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) # 5-fold for train and 1-fold for test. [3] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.60s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing a dictionary easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.60s ) Data(train_size=834, test_size=166) Hierarchal Structure Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.61s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Next, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [6] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.62s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance (See the previous section ). To describe this behavior, we use a new def key instead of class to create a callable. Default Class In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-05-28 23:46:11 ( 81.0ms ) python3 ( 7.70s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataset --- ivory.torch.data.Dataset dataloaders --- ivory.torch.data.DataLoaders results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run dataset --- ivory.tensorflow.data.Dataset datasets --- ivory.tensorflow.data.Datasets trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [8] 2020-05-28 23:46:11 ( 7.00ms ) python3 ( 7.70s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4) Default Value If a callable has parameters with default value, you can use __default__ to get default values from the callable signature. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 batch_size: 15 \"\"\" dataloaders = create(doc, 'dataloaders') dataloaders.data.n_splits [9] 2020-05-28 23:46:11 ( 7.00ms ) python3 ( 7.71s ) 4","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Creating Instances</span></span></span>"},{"location":"tutorial/instance/#creating-instances","text":"In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning.","title":"Creating Instances"},{"location":"tutorial/instance/#basic-idea","text":"A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.59s ) Data(train_size=834, test_size=166) Here, the create_instance() function requires the second parameter name to specify a key because the first argument params can have multiple keys. Note that we added a n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) # 5-fold for train and 1-fold for test. [3] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.60s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing a dictionary easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.60s ) Data(train_size=834, test_size=166)","title":"Basic idea"},{"location":"tutorial/instance/#hierarchal-structure","text":"Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.61s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Next, create a DataLoaders instance for PyTorch. doc = \"\"\" dataloaders: class: ivory.torch.data.DataLoaders data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [6] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.62s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0, batch_size=4) Remember that the argument dataset for the DataLoaders class is not an instance but a callable that returns a Dataset instance (See the previous section ). To describe this behavior, we use a new def key instead of class to create a callable.","title":"Hierarchal Structure"},{"location":"tutorial/instance/#default-class","text":"In the above example, the two lines using a class of Ivory seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-05-28 23:46:11 ( 81.0ms ) python3 ( 7.70s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets dataloaders --- ivory.core.data.DataLoaders results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataset --- ivory.torch.data.Dataset dataloaders --- ivory.torch.data.DataLoaders results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run dataset --- ivory.tensorflow.data.Dataset datasets --- ivory.tensorflow.data.Datasets trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 \"\"\" create(doc, 'dataloaders') [8] 2020-05-28 23:46:11 ( 7.00ms ) python3 ( 7.70s ) DataLoaders(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.torch.data.Dataset'>, fold=0, batch_size=4)","title":"Default Class"},{"location":"tutorial/instance/#default-value","text":"If a callable has parameters with default value, you can use __default__ to get default values from the callable signature. doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 batch_size: 15 \"\"\" dataloaders = create(doc, 'dataloaders') dataloaders.data.n_splits [9] 2020-05-28 23:46:11 ( 7.00ms ) python3 ( 7.71s ) 4","title":"Default Value"},{"location":"tutorial/model/","text":"Model Structure Model We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 6 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [2] 2020-05-28 23:46:11 ( 11.0ms ) python3 ( 7.73s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [3] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.74s ) tensor([[4.1154, 3.5333], [2.0037, 3.7226], [3.3716, 3.1244], [3.3246, 3.6926]]) model(input) [4] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.74s ) tensor([[-0.0706], [-0.0098], [-0.0255], [-0.0202]], grad_fn=<AddmmBackward>) Optimizer To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.75s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the first argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.75s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in the globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method. Scheduler A scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.76s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x27f203113c8> If a $ -notation has no suffix, the value becomes its key itself. The following two examples are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Model Structure</span></span></span>"},{"location":"tutorial/model/#model-structure","text":"","title":"Model Structure"},{"location":"tutorial/model/#model","text":"We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 6 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch dataloaders: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 batch_size: 4 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" dataloaders = create(doc, 'dataloaders') model = create(doc, 'model') model [2] 2020-05-28 23:46:11 ( 11.0ms ) python3 ( 7.73s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. index, input, target = next(iter(dataloaders.train)) input [3] 2020-05-28 23:46:11 ( 4.00ms ) python3 ( 7.74s ) tensor([[4.1154, 3.5333], [2.0037, 3.7226], [3.3716, 3.1244], [3.3246, 3.6926]]) model(input) [4] 2020-05-28 23:46:11 ( 6.00ms ) python3 ( 7.74s ) tensor([[-0.0706], [-0.0098], [-0.0255], [-0.0202]], grad_fn=<AddmmBackward>)","title":"Model"},{"location":"tutorial/model/#optimizer","text":"To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.75s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the first argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.75s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in the globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method.","title":"Optimizer"},{"location":"tutorial/model/#scheduler","text":"A scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-05-28 23:46:11 ( 5.00ms ) python3 ( 7.76s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x27f203113c8> If a $ -notation has no suffix, the value becomes its key itself. The following two examples are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"Scheduler"},{"location":"tutorial/task/","text":"Multiple Runs Task Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-05-28 23:46:11 ( 44.0ms ) python3 ( 7.83s ) [I 200528 23:46:11 tracker:48] A new experiment created with name: 'torch' Task(id='f45c987d381f41e7b0fcb3ef39129d8d', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library. Product The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-05-28 23:46:11 ( 36.0ms ) python3 ( 7.87s ) <generator object Task.product at 0x0000027F20464348> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-28 23:46:11 ( 407ms ) python3 ( 8.27s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-05-28 23:46:12 ( 511ms ) python3 ( 8.79s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7 Chain The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-05-28 23:46:12 ( 65.0ms ) python3 ( 8.85s ) <generator object Task.chain at 0x0000027F20464848> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-05-28 23:46:12 ( 754ms ) python3 ( 9.60s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-05-28 23:46:13 ( 921ms ) python3 ( 10.5s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5 Range Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-28 23:46:14 ( 3.00ms ) python3 ( 10.5s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-28 23:46:14 ( 4.00ms ) python3 ( 10.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-05-28 23:46:14 ( 3.00ms ) python3 ( 10.6s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-28 23:46:14 ( 4.00ms ) python3 ( 10.6s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Multiple Runs</span></span></span>"},{"location":"tutorial/task/#multiple-runs","text":"","title":"Multiple Runs"},{"location":"tutorial/task/#task","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-05-28 23:46:11 ( 44.0ms ) python3 ( 7.83s ) [I 200528 23:46:11 tracker:48] A new experiment created with name: 'torch' Task(id='f45c987d381f41e7b0fcb3ef39129d8d', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library.","title":"Task"},{"location":"tutorial/task/#product","text":"The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-05-28 23:46:11 ( 36.0ms ) python3 ( 7.87s ) <generator object Task.product at 0x0000027F20464348> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-28 23:46:11 ( 407ms ) python3 ( 8.27s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-05-28 23:46:12 ( 511ms ) python3 ( 8.79s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7","title":"Product"},{"location":"tutorial/task/#chain","text":"The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-05-28 23:46:12 ( 65.0ms ) python3 ( 8.85s ) <generator object Task.chain at 0x0000027F20464848> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-05-28 23:46:12 ( 754ms ) python3 ( 9.60s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-05-28 23:46:13 ( 921ms ) python3 ( 10.5s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5","title":"Chain"},{"location":"tutorial/task/#range","text":"Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.5s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-28 23:46:14 ( 3.00ms ) python3 ( 10.5s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-28 23:46:14 ( 4.00ms ) python3 ( 10.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-05-28 23:46:14 ( 3.00ms ) python3 ( 10.6s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-28 23:46:14 ( 4.00ms ) python3 ( 10.6s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.6s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-28 23:46:14 ( 5.00ms ) python3 ( 10.6s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"Range"},{"location":"tutorial/tracking/","text":"Tracking Runs with Ivory First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch', fold=2) run.start() [2] 2020-05-28 23:49:23 ( 1.32s ) python3 ( 3.71s ) [I 200528 23:49:23 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=67.74 val_loss=11.65 lr=0.001 best [epoch#1] loss=10.49 val_loss=10.84 lr=0.001 best [epoch#2] loss=9.45 val_loss=10.11 lr=0.001 best [epoch#3] loss=8.465 val_loss=8.745 lr=0.001 best [epoch#4] loss=7.595 val_loss=7.842 lr=0.001 best [epoch#5] loss=6.626 val_loss=7.388 lr=0.001 best [epoch#6] loss=5.611 val_loss=5.105 lr=0.001 best [epoch#7] loss=4.186 val_loss=3.939 lr=0.001 best [epoch#8] loss=3.06 val_loss=2.799 lr=0.001 best [epoch#9] loss=2.129 val_loss=2.024 lr=0.001 best run = client.create_run('torch', fold=3) run.start('both') [3] 2020-05-28 23:49:25 ( 1.29s ) python3 ( 5.00s ) [epoch#0] loss=23.47 val_loss=8.933 lr=0.001 best [epoch#1] loss=11.23 val_loss=8.336 lr=0.001 best [epoch#2] loss=10.3 val_loss=9.066 lr=0.001 [epoch#3] loss=9.513 val_loss=7.645 lr=0.001 best [epoch#4] loss=8.726 val_loss=6.485 lr=0.001 best [epoch#5] loss=7.75 val_loss=5.807 lr=0.001 best [epoch#6] loss=7.04 val_loss=5.072 lr=0.001 best [epoch#7] loss=6.037 val_loss=4.07 lr=0.001 best [epoch#8] loss=5.008 val_loss=3.247 lr=0.001 best [epoch#9] loss=4.115 val_loss=2.556 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: pass # Do something [4] 2020-05-28 23:49:26 ( 365ms ) python3 ( 5.37s ) [run#2] fold=0 [run#3] fold=1 [run#4] fold=2 task = client.create_task('torch') runs = task.product(n_splits=[3, 4], verbose=0) for run in runs: pass # Do something [5] 2020-05-28 23:49:26 ( 277ms ) python3 ( 5.64s ) [run#5] n_splits=3 [run#6] n_splits=4 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: pass # Do something [6] 2020-05-28 23:49:27 ( 548ms ) python3 ( 6.19s ) [run#7] lr=0.0001 [run#8] lr=0.001 [run#9] batch_size=16 lr=0.0001 [run#10] batch_size=32 lr=0.0001 Tracking Interface Search methods The client.search_run_ids() method makes an iterator that returns RunIDs of runs. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_run_ids('torch') print_run_info(run_ids) [7] 2020-05-28 23:49:27 ( 101ms ) python3 ( 6.29s ) 776a8 run#10 a3efd run#9 7de45 run#8 fd03d run#7 f0363 task#2 d5c42 run#6 5b99a run#5 eb1ef task#1 bc9c2 run#4 3ec70 run#3 95f50 run#2 84a21 task#0 38df2 run#1 ece7a run#0 You can filtering runs by passing keyword arguments. run_ids = client.search_run_ids('torch', lr=1e-4, batch_size=32) print_run_info(run_ids) [8] 2020-05-28 23:49:27 ( 195ms ) python3 ( 6.49s ) 776a8 run#10 The client.search_nested_run_ids() method makes an iterator that returns RunIDs of runs that have a parent run. Optionally, you can filter runs. run_ids = client.search_nested_run_ids('torch') print_run_info(run_ids) [9] 2020-05-28 23:49:27 ( 71.0ms ) python3 ( 6.56s ) 776a8 run#10 a3efd run#9 7de45 run#8 fd03d run#7 d5c42 run#6 5b99a run#5 bc9c2 run#4 3ec70 run#3 95f50 run#2 Note that the run#0 isn't returned because it was created by client.create_run() directly. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are three tasks we made above. run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [10] 2020-05-28 23:49:28 ( 50.0ms ) python3 ( 6.61s ) f0363 task#2 eb1ef task#1 84a21 task#0 Get methods The client.get_run_id() returns a RunID of runs you select by run name. run_id = client.get_run_id('torch', run=0) print_run_info([run_id]) [11] 2020-05-28 23:49:28 ( 41.0ms ) python3 ( 6.65s ) ece7a run#0 The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(1, 3)) print_run_info(run_ids) [12] 2020-05-28 23:49:28 ( 76.0ms ) python3 ( 6.73s ) eb1ef task#1 f0363 task#2 The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(2)) print_run_info(run_ids) [13] 2020-05-28 23:49:28 ( 148ms ) python3 ( 6.88s ) bc9c2 run#4 3ec70 run#3 95f50 run#2 d5c42 run#6 5b99a run#5 The client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=5) print_run_info([run_id]) [14] 2020-05-28 23:49:28 ( 40.0ms ) python3 ( 6.92s ) eb1ef task#1 Once you got RunID(s), you can load a run, a member of a run, or results collection. See the quickstart .","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking Runs with Ivory</span></span></span>"},{"location":"tutorial/tracking/#tracking-runs-with-ivory","text":"First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch', fold=2) run.start() [2] 2020-05-28 23:49:23 ( 1.32s ) python3 ( 3.71s ) [I 200528 23:49:23 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=67.74 val_loss=11.65 lr=0.001 best [epoch#1] loss=10.49 val_loss=10.84 lr=0.001 best [epoch#2] loss=9.45 val_loss=10.11 lr=0.001 best [epoch#3] loss=8.465 val_loss=8.745 lr=0.001 best [epoch#4] loss=7.595 val_loss=7.842 lr=0.001 best [epoch#5] loss=6.626 val_loss=7.388 lr=0.001 best [epoch#6] loss=5.611 val_loss=5.105 lr=0.001 best [epoch#7] loss=4.186 val_loss=3.939 lr=0.001 best [epoch#8] loss=3.06 val_loss=2.799 lr=0.001 best [epoch#9] loss=2.129 val_loss=2.024 lr=0.001 best run = client.create_run('torch', fold=3) run.start('both') [3] 2020-05-28 23:49:25 ( 1.29s ) python3 ( 5.00s ) [epoch#0] loss=23.47 val_loss=8.933 lr=0.001 best [epoch#1] loss=11.23 val_loss=8.336 lr=0.001 best [epoch#2] loss=10.3 val_loss=9.066 lr=0.001 [epoch#3] loss=9.513 val_loss=7.645 lr=0.001 best [epoch#4] loss=8.726 val_loss=6.485 lr=0.001 best [epoch#5] loss=7.75 val_loss=5.807 lr=0.001 best [epoch#6] loss=7.04 val_loss=5.072 lr=0.001 best [epoch#7] loss=6.037 val_loss=4.07 lr=0.001 best [epoch#8] loss=5.008 val_loss=3.247 lr=0.001 best [epoch#9] loss=4.115 val_loss=2.556 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: pass # Do something [4] 2020-05-28 23:49:26 ( 365ms ) python3 ( 5.37s ) [run#2] fold=0 [run#3] fold=1 [run#4] fold=2 task = client.create_task('torch') runs = task.product(n_splits=[3, 4], verbose=0) for run in runs: pass # Do something [5] 2020-05-28 23:49:26 ( 277ms ) python3 ( 5.64s ) [run#5] n_splits=3 [run#6] n_splits=4 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: pass # Do something [6] 2020-05-28 23:49:27 ( 548ms ) python3 ( 6.19s ) [run#7] lr=0.0001 [run#8] lr=0.001 [run#9] batch_size=16 lr=0.0001 [run#10] batch_size=32 lr=0.0001","title":"Tracking Runs with Ivory"},{"location":"tutorial/tracking/#tracking-interface","text":"","title":"Tracking Interface"},{"location":"tutorial/tracking/#search-methods","text":"The client.search_run_ids() method makes an iterator that returns RunIDs of runs. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_run_ids('torch') print_run_info(run_ids) [7] 2020-05-28 23:49:27 ( 101ms ) python3 ( 6.29s ) 776a8 run#10 a3efd run#9 7de45 run#8 fd03d run#7 f0363 task#2 d5c42 run#6 5b99a run#5 eb1ef task#1 bc9c2 run#4 3ec70 run#3 95f50 run#2 84a21 task#0 38df2 run#1 ece7a run#0 You can filtering runs by passing keyword arguments. run_ids = client.search_run_ids('torch', lr=1e-4, batch_size=32) print_run_info(run_ids) [8] 2020-05-28 23:49:27 ( 195ms ) python3 ( 6.49s ) 776a8 run#10 The client.search_nested_run_ids() method makes an iterator that returns RunIDs of runs that have a parent run. Optionally, you can filter runs. run_ids = client.search_nested_run_ids('torch') print_run_info(run_ids) [9] 2020-05-28 23:49:27 ( 71.0ms ) python3 ( 6.56s ) 776a8 run#10 a3efd run#9 7de45 run#8 fd03d run#7 d5c42 run#6 5b99a run#5 bc9c2 run#4 3ec70 run#3 95f50 run#2 Note that the run#0 isn't returned because it was created by client.create_run() directly. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are three tasks we made above. run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [10] 2020-05-28 23:49:28 ( 50.0ms ) python3 ( 6.61s ) f0363 task#2 eb1ef task#1 84a21 task#0","title":"Search methods"},{"location":"tutorial/tracking/#get-methods","text":"The client.get_run_id() returns a RunID of runs you select by run name. run_id = client.get_run_id('torch', run=0) print_run_info([run_id]) [11] 2020-05-28 23:49:28 ( 41.0ms ) python3 ( 6.65s ) ece7a run#0 The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(1, 3)) print_run_info(run_ids) [12] 2020-05-28 23:49:28 ( 76.0ms ) python3 ( 6.73s ) eb1ef task#1 f0363 task#2 The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(2)) print_run_info(run_ids) [13] 2020-05-28 23:49:28 ( 148ms ) python3 ( 6.88s ) bc9c2 run#4 3ec70 run#3 95f50 run#2 d5c42 run#6 5b99a run#5 The client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=5) print_run_info([run_id]) [14] 2020-05-28 23:49:28 ( 40.0ms ) python3 ( 6.92s ) eb1ef task#1 Once you got RunID(s), you can load a run, a member of a run, or results collection. See the quickstart .","title":"Get methods"},{"location":"tutorial/trainer/","text":"Training a Model First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 \"\"\") params [2] 2020-05-28 23:46:18 ( 8.00ms ) python3 ( 15.0s ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': None, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-05-28 23:46:18 ( 7.00ms ) python3 ( 15.1s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer'] Callbacks Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-05-28 23:46:18 ( 40.0ms ) python3 ( 15.1s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin Metrics The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-05-28 23:46:18 ( 3.00ms ) python3 ( 15.1s ) Metrics() Monitor The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-28 23:46:18 ( 3.00ms ) python3 ( 15.1s ) Monitor(metric='val_loss', mode='min') EarlyStopping The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-28 23:46:18 ( 3.00ms ) python3 ( 15.1s ) EarlyStopping(patience=10, wait=0) Trainer The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-28 23:46:18 ( 4.00ms ) python3 ( 15.1s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, loss=<function mse_loss at 0x0000027F1884DB88>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch') Using a Trainer A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-28 23:46:18 ( 520ms ) python3 ( 15.6s ) [epoch#0] loss=12.14 val_loss=6.028 lr=0.001 best [epoch#1] loss=6.054 val_loss=5.056 lr=0.001 best [epoch#2] loss=4.764 val_loss=3.941 lr=0.001 best [epoch#3] loss=3.562 val_loss=2.845 lr=0.001 best [epoch#4] loss=2.451 val_loss=2.135 lr=0.001 best [epoch#5] loss=1.638 val_loss=1.432 lr=0.001 best [epoch#6] loss=1.206 val_loss=1.04 lr=0.001 best [epoch#7] loss=0.8772 val_loss=0.8271 lr=0.001 best [epoch#8] loss=0.6884 val_loss=0.6936 lr=0.001 best [epoch#9] loss=0.6436 val_loss=0.711 lr=0.001 You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-28 23:46:19 ( 297ms ) python3 ( 15.9s ) [epoch#10] loss=0.6088 val_loss=0.6226 lr=0.001 best [epoch#11] loss=0.5222 val_loss=0.5113 lr=0.001 best [epoch#12] loss=0.4574 val_loss=0.5031 lr=0.001 best [epoch#13] loss=0.4629 val_loss=0.4479 lr=0.001 best [epoch#14] loss=0.5292 val_loss=0.4307 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch. Callbacks after Training After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) Metrics(loss=0.5292, val_loss=0.4307, lr=0.001) run.metrics.history.val_loss # Metrics history. [12] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) {0: 6.028385388851166, 1: 5.055525135993958, 2: 3.941043126583099, 3: 2.8451858460903168, 4: 2.135300502181053, 5: 1.4316702216863633, 6: 1.039621928334236, 7: 0.827081373333931, 8: 0.6935694560408592, 9: 0.7109985113143921, 10: 0.6225778669118881, 11: 0.5112514346837997, 12: 0.5031086146831513, 13: 0.4478843420743942, 14: 0.4307152785360813} run.monitor # Store the best score and its epoch. [13] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) Monitor(metric='val_loss', mode='min', best_score=0.431, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-28 23:46:19 ( 5.00ms ) python3 ( 15.9s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, loss=<function mse_loss at 0x0000027F1884DB88>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Training a Model</span></span></span>"},{"location":"tutorial/trainer/#training-a-model","text":"First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 \"\"\") params [2] 2020-05-28 23:46:18 ( 8.00ms ) python3 ( 15.0s ) {'library': 'torch', 'run': {'dataloaders': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'batch_size': 10, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': None, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-05-28 23:46:18 ( 7.00ms ) python3 ( 15.1s ) ['dataloaders', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer']","title":"Training a Model"},{"location":"tutorial/trainer/#callbacks","text":"Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-05-28 23:46:18 ( 40.0ms ) python3 ( 15.1s ) [dataloaders] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin","title":"Callbacks"},{"location":"tutorial/trainer/#metrics","text":"The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-05-28 23:46:18 ( 3.00ms ) python3 ( 15.1s ) Metrics()","title":"Metrics"},{"location":"tutorial/trainer/#monitor","text":"The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-28 23:46:18 ( 3.00ms ) python3 ( 15.1s ) Monitor(metric='val_loss', mode='min')","title":"Monitor"},{"location":"tutorial/trainer/#earlystopping","text":"The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-28 23:46:18 ( 3.00ms ) python3 ( 15.1s ) EarlyStopping(patience=10, wait=0)","title":"EarlyStopping"},{"location":"tutorial/trainer/#trainer","text":"The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-28 23:46:18 ( 4.00ms ) python3 ( 15.1s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, loss=<function mse_loss at 0x0000027F1884DB88>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Trainer"},{"location":"tutorial/trainer/#using-a-trainer","text":"A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-28 23:46:18 ( 520ms ) python3 ( 15.6s ) [epoch#0] loss=12.14 val_loss=6.028 lr=0.001 best [epoch#1] loss=6.054 val_loss=5.056 lr=0.001 best [epoch#2] loss=4.764 val_loss=3.941 lr=0.001 best [epoch#3] loss=3.562 val_loss=2.845 lr=0.001 best [epoch#4] loss=2.451 val_loss=2.135 lr=0.001 best [epoch#5] loss=1.638 val_loss=1.432 lr=0.001 best [epoch#6] loss=1.206 val_loss=1.04 lr=0.001 best [epoch#7] loss=0.8772 val_loss=0.8271 lr=0.001 best [epoch#8] loss=0.6884 val_loss=0.6936 lr=0.001 best [epoch#9] loss=0.6436 val_loss=0.711 lr=0.001 You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-28 23:46:19 ( 297ms ) python3 ( 15.9s ) [epoch#10] loss=0.6088 val_loss=0.6226 lr=0.001 best [epoch#11] loss=0.5222 val_loss=0.5113 lr=0.001 best [epoch#12] loss=0.4574 val_loss=0.5031 lr=0.001 best [epoch#13] loss=0.4629 val_loss=0.4479 lr=0.001 best [epoch#14] loss=0.5292 val_loss=0.4307 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch.","title":"Using a Trainer"},{"location":"tutorial/trainer/#callbacks-after-training","text":"After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) Metrics(loss=0.5292, val_loss=0.4307, lr=0.001) run.metrics.history.val_loss # Metrics history. [12] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) {0: 6.028385388851166, 1: 5.055525135993958, 2: 3.941043126583099, 3: 2.8451858460903168, 4: 2.135300502181053, 5: 1.4316702216863633, 6: 1.039621928334236, 7: 0.827081373333931, 8: 0.6935694560408592, 9: 0.7109985113143921, 10: 0.6225778669118881, 11: 0.5112514346837997, 12: 0.5031086146831513, 13: 0.4478843420743942, 14: 0.4307152785360813} run.monitor # Store the best score and its epoch. [13] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) Monitor(metric='val_loss', mode='min', best_score=0.431, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 15.9s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-28 23:46:19 ( 5.00ms ) python3 ( 15.9s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, loss=<function mse_loss at 0x0000027F1884DB88>, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Callbacks after Training"},{"location":"tutorial/tuning/","text":"Hyperparameter Tuning Suggest Function To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the offical Optuna documentation . Note In the suggest_hidden_sizes() function, we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() function to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 16.0s ) Study Ivory implements a special run type called Study which controls hyperparameter tuning using Optuna. import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-05-28 23:46:19 ( 94.0ms ) python3 ( 16.1s ) [I 200528 23:46:19 tracker:48] A new experiment created with name: 'torch' Study(id='c3f60cf97da84fc791a3de3f8372a129', name='study#0', num_objects=5) In the client.create_study() function, you can pass a keyword argument in which the key is a suggest name and the value is a pure suggest function. Objective The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and sends it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 16.1s ) Objective(['lr']) study_hs.objective [6] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 16.1s ) Objective(['hidden_sizes']) Optimization Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-05-28 23:46:19 ( 1.77s ) python3 ( 17.9s ) [I 2020-05-28 23:46:19,993] A new study created with name: torch.lr.study#0 [run#0] lr=0.005194 fold=3 epochs=3 [epoch#0] loss=15.43 val_loss=5.562 lr=0.005194 best [epoch#1] loss=13.35 val_loss=5.036 lr=0.005194 best [epoch#2] loss=12 val_loss=5.179 lr=0.005194 [I 2020-05-28 23:46:20,557] Finished trial#0 with value: 5.0358130693435665 with parameters: {'lr': 0.005194466595695567}. Best is trial#0 with value: 5.0358130693435665. [run#1] lr=2.086e-05 fold=3 epochs=3 [epoch#0] loss=104.7 val_loss=89.83 lr=2.086e-05 best [epoch#1] loss=100.7 val_loss=86.39 lr=2.086e-05 best [epoch#2] loss=96.98 val_loss=82.98 lr=2.086e-05 best [I 2020-05-28 23:46:21,140] Finished trial#1 with value: 82.97911491394044 with parameters: {'lr': 2.0856762872202717e-05}. Best is trial#0 with value: 5.0358130693435665. [run#2] lr=0.003232 fold=3 epochs=3 [epoch#0] loss=15.22 val_loss=6.339 lr=0.003232 best [epoch#1] loss=7.073 val_loss=3.972 lr=0.003232 best [epoch#2] loss=4.115 val_loss=1.776 lr=0.003232 best [I 2020-05-28 23:46:21,718] Finished trial#2 with value: 1.7756432503461839 with parameters: {'lr': 0.003231900637889071}. Best is trial#2 with value: 1.7756432503461839. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-05-28 23:46:21 ( 1.90s ) python3 ( 19.8s ) [I 2020-05-28 23:46:21,749] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=19 hidden_sizes:1=16 hidden_sizes:2=21 num_layers=3 epochs=3 [epoch#0] loss=31.1 val_loss=9.325 lr=0.001 best [epoch#1] loss=8.487 val_loss=7.247 lr=0.001 best [epoch#2] loss=6.825 val_loss=5.478 lr=0.001 best [I 2020-05-28 23:46:22,395] Finished trial#0 with value: 5.478004050254822 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 16, 'hidden_sizes:2': 21, 'num_layers': 3}. Best is trial#0 with value: 5.478004050254822. [run#4] hidden_sizes:0=17 hidden_sizes:1=17 num_layers=2 epochs=3 [epoch#0] loss=20.41 val_loss=7.095 lr=0.001 best [epoch#1] loss=7.373 val_loss=6.544 lr=0.001 best [epoch#2] loss=6.791 val_loss=5.817 lr=0.001 best [I 2020-05-28 23:46:22,980] Finished trial#1 with value: 5.816688930988311 with parameters: {'hidden_sizes:0': 17, 'hidden_sizes:1': 17, 'num_layers': 2}. Best is trial#0 with value: 5.478004050254822. [run#5] hidden_sizes:0=14 hidden_sizes:1=24 hidden_sizes:2=14 num_layers=3 epochs=3 [epoch#0] loss=34.25 val_loss=7.857 lr=0.001 best [epoch#1] loss=7.602 val_loss=6.221 lr=0.001 best [epoch#2] loss=6.165 val_loss=5.591 lr=0.001 best [I 2020-05-28 23:46:23,620] Finished trial#2 with value: 5.5912551283836365 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 24, 'hidden_sizes:2': 14, 'num_layers': 3}. Best is trial#0 with value: 5.478004050254822. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) <optuna.study.Study at 0x27f2158d9c8> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-05-28 23:46:23 ( 3.00ms ) python3 ( 19.8s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, RunID is saved. optuna_study_lr.user_attrs [11] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) {'run_id': 'c3f60cf97da84fc791a3de3f8372a129'} optuna_study_lr.trials[0].user_attrs [12] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) {'run_id': 'aabc07fd02a845bb99772afce91d634b'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) <mlflow.tracking.client.MlflowClient at 0x27f204a20c8> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-05-28 23:46:23 ( 7.00ms ) python3 ( 19.8s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-05-28 23:46:23 ( 11.0ms ) python3 ( 19.8s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 10 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [10, 20] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 The Monitor instance monitors val_loss (actually this is the default value, so that you can delete this line) and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max Parametric Optimization Again read the suggest functions. File 11 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() function has some logic but the suggest_lr() function is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass key-iterable pairs to the client.create_study() function instead of key-callable pairs. tuple, range, Range A tuple, range, or Range instance represent parameter ranges. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-05-28 23:46:23 ( 1.88s ) python3 ( 21.7s ) [I 2020-05-28 23:46:23,760] A new study created with name: torch.lr.study#2 [run#6] lr=0.003897 epochs=1 [I 2020-05-28 23:46:24,120] Finished trial#0 with value: 5.564012479782105 with parameters: {'lr': 0.0038968481704175118}. Best is trial#0 with value: 5.564012479782105. [run#7] lr=0.006028 epochs=1 [I 2020-05-28 23:46:24,469] Finished trial#1 with value: 16.655317759513856 with parameters: {'lr': 0.00602766006981855}. Best is trial#0 with value: 5.564012479782105. [run#8] lr=0.003465 epochs=1 [I 2020-05-28 23:46:24,828] Finished trial#2 with value: 7.40464186668396 with parameters: {'lr': 0.003465065450546867}. Best is trial#0 with value: 5.564012479782105. [run#9] lr=0.007108 epochs=1 [I 2020-05-28 23:46:25,192] Finished trial#3 with value: 8.237301933765412 with parameters: {'lr': 0.007107500005975995}. Best is trial#0 with value: 5.564012479782105. [run#10] lr=0.008414 epochs=1 [I 2020-05-28 23:46:25,555] Finished trial#4 with value: 39.057876634597775 with parameters: {'lr': 0.008413637982373542}. Best is trial#0 with value: 5.564012479782105. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 20)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-05-28 23:46:25 ( 1.98s ) python3 ( 23.7s ) [I 2020-05-28 23:46:25,660] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:26,045] Finished trial#0 with value: 8.93752281665802 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 8.93752281665802. [run#12] hidden_sizes.0=18 epochs=1 [I 2020-05-28 23:46:26,408] Finished trial#1 with value: 7.373192298412323 with parameters: {'hidden_sizes.0': 18}. Best is trial#1 with value: 7.373192298412323. [run#13] hidden_sizes.0=18 epochs=1 [I 2020-05-28 23:46:26,778] Finished trial#2 with value: 6.97048305273056 with parameters: {'hidden_sizes.0': 18}. Best is trial#2 with value: 6.97048305273056. [run#14] hidden_sizes.0=17 epochs=1 [I 2020-05-28 23:46:27,156] Finished trial#3 with value: 7.062327575683594 with parameters: {'hidden_sizes.0': 17}. Best is trial#2 with value: 6.97048305273056. [run#15] hidden_sizes.0=11 epochs=1 [I 2020-05-28 23:46:27,535] Finished trial#4 with value: 7.365246510505676 with parameters: {'hidden_sizes.0': 11}. Best is trial#2 with value: 6.97048305273056. You can specify a step params = {'hidden_sizes.0': range(10, 20, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-05-28 23:46:27 ( 2.07s ) python3 ( 25.7s ) [I 2020-05-28 23:46:27,656] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:28,050] Finished trial#0 with value: 8.381470620632172 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 8.381470620632172. [run#17] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:28,431] Finished trial#1 with value: 7.425333392620087 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 7.425333392620087. [run#18] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:28,821] Finished trial#2 with value: 8.1587468624115 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 7.425333392620087. [run#19] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:29,210] Finished trial#3 with value: 8.73443545103073 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 7.425333392620087. [run#20] hidden_sizes.0=10 epochs=1 [I 2020-05-28 23:46:29,610] Finished trial#4 with value: 8.085492253303528 with parameters: {'hidden_sizes.0': 10}. Best is trial#1 with value: 7.425333392620087. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-05-28 23:46:29 ( 2.16s ) python3 ( 27.9s ) [I 2020-05-28 23:46:29,747] A new study created with name: torch.lr.study#5 [run#21] lr=0.006363 epochs=1 [I 2020-05-28 23:46:30,153] Finished trial#0 with value: 6.123318982124329 with parameters: {'lr': 0.00636257147018688}. Best is trial#0 with value: 6.123318982124329. [run#22] lr=0.001038 epochs=1 [I 2020-05-28 23:46:30,558] Finished trial#1 with value: 6.713453078269959 with parameters: {'lr': 0.0010381095009589496}. Best is trial#0 with value: 6.123318982124329. [run#23] lr=0.00922 epochs=1 [I 2020-05-28 23:46:30,961] Finished trial#2 with value: 14.55729923248291 with parameters: {'lr': 0.009219870376543331}. Best is trial#0 with value: 6.123318982124329. [run#24] lr=0.001972 epochs=1 [I 2020-05-28 23:46:31,365] Finished trial#3 with value: 7.628524327278138 with parameters: {'lr': 0.001971939491861153}. Best is trial#0 with value: 6.123318982124329. [run#25] lr=0.001588 epochs=1 [I 2020-05-28 23:46:31,773] Finished trial#4 with value: 9.122584760189056 with parameters: {'lr': 0.0015878345742164352}. Best is trial#0 with value: 6.123318982124329. list A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-05-28 23:46:31 ( 2.27s ) python3 ( 30.2s ) [I 2020-05-28 23:46:31,926] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:32,359] Finished trial#0 with value: 7.470162141323089 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 7.470162141323089. [run#27] hidden_sizes.0=10 epochs=1 [I 2020-05-28 23:46:32,772] Finished trial#1 with value: 6.954097592830658 with parameters: {'hidden_sizes.0': 10}. Best is trial#1 with value: 6.954097592830658. [run#28] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:33,194] Finished trial#2 with value: 7.650672686100006 with parameters: {'hidden_sizes.0': 20}. Best is trial#1 with value: 6.954097592830658. [run#29] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:33,614] Finished trial#3 with value: 7.715379524230957 with parameters: {'hidden_sizes.0': 20}. Best is trial#1 with value: 6.954097592830658. [run#30] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:34,042] Finished trial#4 with value: 8.896236252784728 with parameters: {'hidden_sizes.0': 20}. Best is trial#1 with value: 6.954097592830658. Product If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-05-28 23:46:34 ( 5.05s ) python3 ( 35.2s ) [I 2020-05-28 23:46:34,211] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=20 hidden_sizes:1=17 lr=0.0008048 num_layers=2 epochs=1 [I 2020-05-28 23:46:34,684] Finished trial#0 with value: 8.242799758911133 with parameters: {'hidden_sizes:0': 20, 'hidden_sizes:1': 17, 'lr': 0.000804777479530587, 'num_layers': 2}. Best is trial#0 with value: 8.242799758911133. [run#32] hidden_sizes:0=14 hidden_sizes:1=28 lr=0.0006883 num_layers=2 epochs=1 [I 2020-05-28 23:46:35,151] Finished trial#1 with value: 7.228139710426331 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 28, 'lr': 0.0006883445396672199, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#33] hidden_sizes:0=28 hidden_sizes:1=10 hidden_sizes:2=23 lr=0.0008212 num_layers=3 epochs=1 [I 2020-05-28 23:46:35,638] Finished trial#2 with value: 78.25893650054931 with parameters: {'hidden_sizes:0': 28, 'hidden_sizes:1': 10, 'hidden_sizes:2': 23, 'lr': 0.0008211534618914595, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#34] hidden_sizes:0=26 hidden_sizes:1=18 lr=0.0002201 num_layers=2 epochs=1 [I 2020-05-28 23:46:36,117] Finished trial#3 with value: 12.129535555839539 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 18, 'lr': 0.00022012664414972365, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#35] hidden_sizes:0=18 hidden_sizes:1=12 hidden_sizes:2=13 lr=0.0008277 num_layers=3 epochs=1 [I 2020-05-28 23:46:36,606] Finished trial#4 with value: 8.850380980968476 with parameters: {'hidden_sizes:0': 18, 'hidden_sizes:1': 12, 'hidden_sizes:2': 13, 'lr': 0.0008276751047406439, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#36] hidden_sizes:0=22 hidden_sizes:1=19 hidden_sizes:2=23 lr=0.000518 num_layers=3 epochs=1 [I 2020-05-28 23:46:37,111] Finished trial#5 with value: 8.674307537078857 with parameters: {'hidden_sizes:0': 22, 'hidden_sizes:1': 19, 'hidden_sizes:2': 23, 'lr': 0.0005179921155957258, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#37] hidden_sizes:0=26 hidden_sizes:1=16 lr=0.0003911 num_layers=2 epochs=1 [I 2020-05-28 23:46:37,589] Finished trial#6 with value: 9.011315846443177 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 16, 'lr': 0.00039111540965691374, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#38] hidden_sizes:0=21 hidden_sizes:1=24 hidden_sizes:2=29 lr=0.0006105 num_layers=3 epochs=1 [I 2020-05-28 23:46:38,085] Finished trial#7 with value: 7.624202597141266 with parameters: {'hidden_sizes:0': 21, 'hidden_sizes:1': 24, 'hidden_sizes:2': 29, 'lr': 0.0006104671473771957, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#39] hidden_sizes:0=21 hidden_sizes:1=21 lr=0.0008265 num_layers=2 epochs=1 [I 2020-05-28 23:46:38,583] Finished trial#8 with value: 7.89803649187088 with parameters: {'hidden_sizes:0': 21, 'hidden_sizes:1': 21, 'lr': 0.0008264614273293893, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#40] hidden_sizes:0=24 hidden_sizes:1=15 hidden_sizes:2=13 lr=0.0005692 num_layers=3 epochs=1 [I 2020-05-28 23:46:39,090] Finished trial#9 with value: 8.323257803916931 with parameters: {'hidden_sizes:0': 24, 'hidden_sizes:1': 15, 'hidden_sizes:2': 13, 'lr': 0.0005692212510631943, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" must be better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-05-28 23:46:39 ( 4.00ms ) python3 ( 35.2s ) 'torch.hidden_sizes.lr.study#7' Study from YAML file As a normal Run , a Study instance also can be created from a YAML file. Pass an extra keyword argument to the client.create_experiment() function. The key is the instance name (in this case study ) and value is a YAML file name without its extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-05-28 23:46:39 ( 11.0ms ) python3 ( 35.2s ) Experiment(id='1', name='torch', num_objects=1) Here is the contents of study.yml file. File 12 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses def keyword to create a callable. On the other hand, lr is just one line. If a suggest funtion can be called without additional parameters, you can omit the def keyword. Using this experiment, we can create Study instances with a suggest function. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-05-28 23:46:39 ( 178ms ) python3 ( 35.4s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-05-28 23:46:39 ( 171ms ) python3 ( 35.6s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-05-28 23:46:39 ( 4.00ms ) python3 ( 35.6s ) functools.partial(<function suggest_hidden_sizes at 0x0000027F1928B708>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-05-28 23:46:39 ( 2.12s ) python3 ( 37.7s ) [I 2020-05-28 23:46:39,500] A new study created with name: torch.lr.study#8 [run#41] lr=1.053e-05 epochs=3 [I 2020-05-28 23:46:40,211] Finished trial#0 with value: 104.4784309387207 with parameters: {'lr': 1.0532650000436869e-05}. Best is trial#0 with value: 104.4784309387207. [run#42] lr=4.108e-05 epochs=3 [I 2020-05-28 23:46:40,901] Finished trial#1 with value: 26.72133207321167 with parameters: {'lr': 4.107856471290739e-05}. Best is trial#1 with value: 26.72133207321167. [run#43] lr=1.952e-05 epochs=3 [I 2020-05-28 23:46:41,588] Finished trial#2 with value: 101.80704765319824 with parameters: {'lr': 1.9515331907395328e-05}. Best is trial#1 with value: 26.72133207321167. <optuna.study.Study at 0x27f216a5948> Pruning Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is the updated contents of study.yml file. File 13 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna in order to determine pruning. Note Pruning is supported for PyTorch and TensorFlow now.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Hyperparameter Tuning</span></span></span>"},{"location":"tutorial/tuning/#hyperparameter-tuning","text":"","title":"Hyperparameter Tuning"},{"location":"tutorial/tuning/#suggest-function","text":"To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the offical Optuna documentation . Note In the suggest_hidden_sizes() function, we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() function to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 16.0s )","title":"Suggest Function"},{"location":"tutorial/tuning/#study","text":"Ivory implements a special run type called Study which controls hyperparameter tuning using Optuna. import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-05-28 23:46:19 ( 94.0ms ) python3 ( 16.1s ) [I 200528 23:46:19 tracker:48] A new experiment created with name: 'torch' Study(id='c3f60cf97da84fc791a3de3f8372a129', name='study#0', num_objects=5) In the client.create_study() function, you can pass a keyword argument in which the key is a suggest name and the value is a pure suggest function.","title":"Study"},{"location":"tutorial/tuning/#objective","text":"The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and sends it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 16.1s ) Objective(['lr']) study_hs.objective [6] 2020-05-28 23:46:19 ( 4.00ms ) python3 ( 16.1s ) Objective(['hidden_sizes'])","title":"Objective"},{"location":"tutorial/tuning/#optimization","text":"Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-05-28 23:46:19 ( 1.77s ) python3 ( 17.9s ) [I 2020-05-28 23:46:19,993] A new study created with name: torch.lr.study#0 [run#0] lr=0.005194 fold=3 epochs=3 [epoch#0] loss=15.43 val_loss=5.562 lr=0.005194 best [epoch#1] loss=13.35 val_loss=5.036 lr=0.005194 best [epoch#2] loss=12 val_loss=5.179 lr=0.005194 [I 2020-05-28 23:46:20,557] Finished trial#0 with value: 5.0358130693435665 with parameters: {'lr': 0.005194466595695567}. Best is trial#0 with value: 5.0358130693435665. [run#1] lr=2.086e-05 fold=3 epochs=3 [epoch#0] loss=104.7 val_loss=89.83 lr=2.086e-05 best [epoch#1] loss=100.7 val_loss=86.39 lr=2.086e-05 best [epoch#2] loss=96.98 val_loss=82.98 lr=2.086e-05 best [I 2020-05-28 23:46:21,140] Finished trial#1 with value: 82.97911491394044 with parameters: {'lr': 2.0856762872202717e-05}. Best is trial#0 with value: 5.0358130693435665. [run#2] lr=0.003232 fold=3 epochs=3 [epoch#0] loss=15.22 val_loss=6.339 lr=0.003232 best [epoch#1] loss=7.073 val_loss=3.972 lr=0.003232 best [epoch#2] loss=4.115 val_loss=1.776 lr=0.003232 best [I 2020-05-28 23:46:21,718] Finished trial#2 with value: 1.7756432503461839 with parameters: {'lr': 0.003231900637889071}. Best is trial#2 with value: 1.7756432503461839. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-05-28 23:46:21 ( 1.90s ) python3 ( 19.8s ) [I 2020-05-28 23:46:21,749] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=19 hidden_sizes:1=16 hidden_sizes:2=21 num_layers=3 epochs=3 [epoch#0] loss=31.1 val_loss=9.325 lr=0.001 best [epoch#1] loss=8.487 val_loss=7.247 lr=0.001 best [epoch#2] loss=6.825 val_loss=5.478 lr=0.001 best [I 2020-05-28 23:46:22,395] Finished trial#0 with value: 5.478004050254822 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 16, 'hidden_sizes:2': 21, 'num_layers': 3}. Best is trial#0 with value: 5.478004050254822. [run#4] hidden_sizes:0=17 hidden_sizes:1=17 num_layers=2 epochs=3 [epoch#0] loss=20.41 val_loss=7.095 lr=0.001 best [epoch#1] loss=7.373 val_loss=6.544 lr=0.001 best [epoch#2] loss=6.791 val_loss=5.817 lr=0.001 best [I 2020-05-28 23:46:22,980] Finished trial#1 with value: 5.816688930988311 with parameters: {'hidden_sizes:0': 17, 'hidden_sizes:1': 17, 'num_layers': 2}. Best is trial#0 with value: 5.478004050254822. [run#5] hidden_sizes:0=14 hidden_sizes:1=24 hidden_sizes:2=14 num_layers=3 epochs=3 [epoch#0] loss=34.25 val_loss=7.857 lr=0.001 best [epoch#1] loss=7.602 val_loss=6.221 lr=0.001 best [epoch#2] loss=6.165 val_loss=5.591 lr=0.001 best [I 2020-05-28 23:46:23,620] Finished trial#2 with value: 5.5912551283836365 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 24, 'hidden_sizes:2': 14, 'num_layers': 3}. Best is trial#0 with value: 5.478004050254822. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) <optuna.study.Study at 0x27f2158d9c8> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-05-28 23:46:23 ( 3.00ms ) python3 ( 19.8s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, RunID is saved. optuna_study_lr.user_attrs [11] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) {'run_id': 'c3f60cf97da84fc791a3de3f8372a129'} optuna_study_lr.trials[0].user_attrs [12] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) {'run_id': 'aabc07fd02a845bb99772afce91d634b'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-05-28 23:46:23 ( 4.00ms ) python3 ( 19.8s ) <mlflow.tracking.client.MlflowClient at 0x27f204a20c8> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-05-28 23:46:23 ( 7.00ms ) python3 ( 19.8s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-05-28 23:46:23 ( 11.0ms ) python3 ( 19.8s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 10 torch.yml library: torch dataloaders: data: class: rectangle.data.Data n_splits: 4 dataset: batch_size: 10 fold: 0 model: class: rectangle.torch.Model hidden_sizes: [10, 20] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss epochs: 10 verbose: 2 The Monitor instance monitors val_loss (actually this is the default value, so that you can delete this line) and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max","title":"Optimization"},{"location":"tutorial/tuning/#parametric-optimization","text":"Again read the suggest functions. File 11 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() function has some logic but the suggest_lr() function is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass key-iterable pairs to the client.create_study() function instead of key-callable pairs.","title":"Parametric Optimization"},{"location":"tutorial/tuning/#tuple-range-range","text":"A tuple, range, or Range instance represent parameter ranges. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-05-28 23:46:23 ( 1.88s ) python3 ( 21.7s ) [I 2020-05-28 23:46:23,760] A new study created with name: torch.lr.study#2 [run#6] lr=0.003897 epochs=1 [I 2020-05-28 23:46:24,120] Finished trial#0 with value: 5.564012479782105 with parameters: {'lr': 0.0038968481704175118}. Best is trial#0 with value: 5.564012479782105. [run#7] lr=0.006028 epochs=1 [I 2020-05-28 23:46:24,469] Finished trial#1 with value: 16.655317759513856 with parameters: {'lr': 0.00602766006981855}. Best is trial#0 with value: 5.564012479782105. [run#8] lr=0.003465 epochs=1 [I 2020-05-28 23:46:24,828] Finished trial#2 with value: 7.40464186668396 with parameters: {'lr': 0.003465065450546867}. Best is trial#0 with value: 5.564012479782105. [run#9] lr=0.007108 epochs=1 [I 2020-05-28 23:46:25,192] Finished trial#3 with value: 8.237301933765412 with parameters: {'lr': 0.007107500005975995}. Best is trial#0 with value: 5.564012479782105. [run#10] lr=0.008414 epochs=1 [I 2020-05-28 23:46:25,555] Finished trial#4 with value: 39.057876634597775 with parameters: {'lr': 0.008413637982373542}. Best is trial#0 with value: 5.564012479782105. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 20)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-05-28 23:46:25 ( 1.98s ) python3 ( 23.7s ) [I 2020-05-28 23:46:25,660] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:26,045] Finished trial#0 with value: 8.93752281665802 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 8.93752281665802. [run#12] hidden_sizes.0=18 epochs=1 [I 2020-05-28 23:46:26,408] Finished trial#1 with value: 7.373192298412323 with parameters: {'hidden_sizes.0': 18}. Best is trial#1 with value: 7.373192298412323. [run#13] hidden_sizes.0=18 epochs=1 [I 2020-05-28 23:46:26,778] Finished trial#2 with value: 6.97048305273056 with parameters: {'hidden_sizes.0': 18}. Best is trial#2 with value: 6.97048305273056. [run#14] hidden_sizes.0=17 epochs=1 [I 2020-05-28 23:46:27,156] Finished trial#3 with value: 7.062327575683594 with parameters: {'hidden_sizes.0': 17}. Best is trial#2 with value: 6.97048305273056. [run#15] hidden_sizes.0=11 epochs=1 [I 2020-05-28 23:46:27,535] Finished trial#4 with value: 7.365246510505676 with parameters: {'hidden_sizes.0': 11}. Best is trial#2 with value: 6.97048305273056. You can specify a step params = {'hidden_sizes.0': range(10, 20, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-05-28 23:46:27 ( 2.07s ) python3 ( 25.7s ) [I 2020-05-28 23:46:27,656] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:28,050] Finished trial#0 with value: 8.381470620632172 with parameters: {'hidden_sizes.0': 13}. Best is trial#0 with value: 8.381470620632172. [run#17] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:28,431] Finished trial#1 with value: 7.425333392620087 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 7.425333392620087. [run#18] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:28,821] Finished trial#2 with value: 8.1587468624115 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 7.425333392620087. [run#19] hidden_sizes.0=13 epochs=1 [I 2020-05-28 23:46:29,210] Finished trial#3 with value: 8.73443545103073 with parameters: {'hidden_sizes.0': 13}. Best is trial#1 with value: 7.425333392620087. [run#20] hidden_sizes.0=10 epochs=1 [I 2020-05-28 23:46:29,610] Finished trial#4 with value: 8.085492253303528 with parameters: {'hidden_sizes.0': 10}. Best is trial#1 with value: 7.425333392620087. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-05-28 23:46:29 ( 2.16s ) python3 ( 27.9s ) [I 2020-05-28 23:46:29,747] A new study created with name: torch.lr.study#5 [run#21] lr=0.006363 epochs=1 [I 2020-05-28 23:46:30,153] Finished trial#0 with value: 6.123318982124329 with parameters: {'lr': 0.00636257147018688}. Best is trial#0 with value: 6.123318982124329. [run#22] lr=0.001038 epochs=1 [I 2020-05-28 23:46:30,558] Finished trial#1 with value: 6.713453078269959 with parameters: {'lr': 0.0010381095009589496}. Best is trial#0 with value: 6.123318982124329. [run#23] lr=0.00922 epochs=1 [I 2020-05-28 23:46:30,961] Finished trial#2 with value: 14.55729923248291 with parameters: {'lr': 0.009219870376543331}. Best is trial#0 with value: 6.123318982124329. [run#24] lr=0.001972 epochs=1 [I 2020-05-28 23:46:31,365] Finished trial#3 with value: 7.628524327278138 with parameters: {'lr': 0.001971939491861153}. Best is trial#0 with value: 6.123318982124329. [run#25] lr=0.001588 epochs=1 [I 2020-05-28 23:46:31,773] Finished trial#4 with value: 9.122584760189056 with parameters: {'lr': 0.0015878345742164352}. Best is trial#0 with value: 6.123318982124329.","title":"tuple, range, Range"},{"location":"tutorial/tuning/#list","text":"A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-05-28 23:46:31 ( 2.27s ) python3 ( 30.2s ) [I 2020-05-28 23:46:31,926] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:32,359] Finished trial#0 with value: 7.470162141323089 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 7.470162141323089. [run#27] hidden_sizes.0=10 epochs=1 [I 2020-05-28 23:46:32,772] Finished trial#1 with value: 6.954097592830658 with parameters: {'hidden_sizes.0': 10}. Best is trial#1 with value: 6.954097592830658. [run#28] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:33,194] Finished trial#2 with value: 7.650672686100006 with parameters: {'hidden_sizes.0': 20}. Best is trial#1 with value: 6.954097592830658. [run#29] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:33,614] Finished trial#3 with value: 7.715379524230957 with parameters: {'hidden_sizes.0': 20}. Best is trial#1 with value: 6.954097592830658. [run#30] hidden_sizes.0=20 epochs=1 [I 2020-05-28 23:46:34,042] Finished trial#4 with value: 8.896236252784728 with parameters: {'hidden_sizes.0': 20}. Best is trial#1 with value: 6.954097592830658.","title":"list"},{"location":"tutorial/tuning/#product","text":"If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-05-28 23:46:34 ( 5.05s ) python3 ( 35.2s ) [I 2020-05-28 23:46:34,211] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=20 hidden_sizes:1=17 lr=0.0008048 num_layers=2 epochs=1 [I 2020-05-28 23:46:34,684] Finished trial#0 with value: 8.242799758911133 with parameters: {'hidden_sizes:0': 20, 'hidden_sizes:1': 17, 'lr': 0.000804777479530587, 'num_layers': 2}. Best is trial#0 with value: 8.242799758911133. [run#32] hidden_sizes:0=14 hidden_sizes:1=28 lr=0.0006883 num_layers=2 epochs=1 [I 2020-05-28 23:46:35,151] Finished trial#1 with value: 7.228139710426331 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 28, 'lr': 0.0006883445396672199, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#33] hidden_sizes:0=28 hidden_sizes:1=10 hidden_sizes:2=23 lr=0.0008212 num_layers=3 epochs=1 [I 2020-05-28 23:46:35,638] Finished trial#2 with value: 78.25893650054931 with parameters: {'hidden_sizes:0': 28, 'hidden_sizes:1': 10, 'hidden_sizes:2': 23, 'lr': 0.0008211534618914595, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#34] hidden_sizes:0=26 hidden_sizes:1=18 lr=0.0002201 num_layers=2 epochs=1 [I 2020-05-28 23:46:36,117] Finished trial#3 with value: 12.129535555839539 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 18, 'lr': 0.00022012664414972365, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#35] hidden_sizes:0=18 hidden_sizes:1=12 hidden_sizes:2=13 lr=0.0008277 num_layers=3 epochs=1 [I 2020-05-28 23:46:36,606] Finished trial#4 with value: 8.850380980968476 with parameters: {'hidden_sizes:0': 18, 'hidden_sizes:1': 12, 'hidden_sizes:2': 13, 'lr': 0.0008276751047406439, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#36] hidden_sizes:0=22 hidden_sizes:1=19 hidden_sizes:2=23 lr=0.000518 num_layers=3 epochs=1 [I 2020-05-28 23:46:37,111] Finished trial#5 with value: 8.674307537078857 with parameters: {'hidden_sizes:0': 22, 'hidden_sizes:1': 19, 'hidden_sizes:2': 23, 'lr': 0.0005179921155957258, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#37] hidden_sizes:0=26 hidden_sizes:1=16 lr=0.0003911 num_layers=2 epochs=1 [I 2020-05-28 23:46:37,589] Finished trial#6 with value: 9.011315846443177 with parameters: {'hidden_sizes:0': 26, 'hidden_sizes:1': 16, 'lr': 0.00039111540965691374, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#38] hidden_sizes:0=21 hidden_sizes:1=24 hidden_sizes:2=29 lr=0.0006105 num_layers=3 epochs=1 [I 2020-05-28 23:46:38,085] Finished trial#7 with value: 7.624202597141266 with parameters: {'hidden_sizes:0': 21, 'hidden_sizes:1': 24, 'hidden_sizes:2': 29, 'lr': 0.0006104671473771957, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. [run#39] hidden_sizes:0=21 hidden_sizes:1=21 lr=0.0008265 num_layers=2 epochs=1 [I 2020-05-28 23:46:38,583] Finished trial#8 with value: 7.89803649187088 with parameters: {'hidden_sizes:0': 21, 'hidden_sizes:1': 21, 'lr': 0.0008264614273293893, 'num_layers': 2}. Best is trial#1 with value: 7.228139710426331. [run#40] hidden_sizes:0=24 hidden_sizes:1=15 hidden_sizes:2=13 lr=0.0005692 num_layers=3 epochs=1 [I 2020-05-28 23:46:39,090] Finished trial#9 with value: 8.323257803916931 with parameters: {'hidden_sizes:0': 24, 'hidden_sizes:1': 15, 'hidden_sizes:2': 13, 'lr': 0.0005692212510631943, 'num_layers': 3}. Best is trial#1 with value: 7.228139710426331. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" must be better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-05-28 23:46:39 ( 4.00ms ) python3 ( 35.2s ) 'torch.hidden_sizes.lr.study#7'","title":"Product"},{"location":"tutorial/tuning/#study-from-yaml-file","text":"As a normal Run , a Study instance also can be created from a YAML file. Pass an extra keyword argument to the client.create_experiment() function. The key is the instance name (in this case study ) and value is a YAML file name without its extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-05-28 23:46:39 ( 11.0ms ) python3 ( 35.2s ) Experiment(id='1', name='torch', num_objects=1) Here is the contents of study.yml file. File 12 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses def keyword to create a callable. On the other hand, lr is just one line. If a suggest funtion can be called without additional parameters, you can omit the def keyword. Using this experiment, we can create Study instances with a suggest function. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-05-28 23:46:39 ( 178ms ) python3 ( 35.4s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-05-28 23:46:39 ( 171ms ) python3 ( 35.6s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-05-28 23:46:39 ( 4.00ms ) python3 ( 35.6s ) functools.partial(<function suggest_hidden_sizes at 0x0000027F1928B708>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-05-28 23:46:39 ( 2.12s ) python3 ( 37.7s ) [I 2020-05-28 23:46:39,500] A new study created with name: torch.lr.study#8 [run#41] lr=1.053e-05 epochs=3 [I 2020-05-28 23:46:40,211] Finished trial#0 with value: 104.4784309387207 with parameters: {'lr': 1.0532650000436869e-05}. Best is trial#0 with value: 104.4784309387207. [run#42] lr=4.108e-05 epochs=3 [I 2020-05-28 23:46:40,901] Finished trial#1 with value: 26.72133207321167 with parameters: {'lr': 4.107856471290739e-05}. Best is trial#1 with value: 26.72133207321167. [run#43] lr=1.952e-05 epochs=3 [I 2020-05-28 23:46:41,588] Finished trial#2 with value: 101.80704765319824 with parameters: {'lr': 1.9515331907395328e-05}. Best is trial#1 with value: 26.72133207321167. <optuna.study.Study at 0x27f216a5948>","title":"Study from YAML file"},{"location":"tutorial/tuning/#pruning","text":"Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is the updated contents of study.yml file. File 13 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna in order to determine pruning. Note Pruning is supported for PyTorch and TensorFlow now.","title":"Pruning"},{"location":"tutorial/ui/","text":"Tracking UI Ivory uses MLFlow Tracking for the workflow tracking and model saving. For this feature, the Client instace has to have a Tracker instance. First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-05-28 23:46:41 ( 1.26s ) python3 ( 39.2s ) [I 200528 23:46:41 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=30.05 val_loss=6.77 lr=0.001 best [epoch#1] loss=7.079 val_loss=6.307 lr=0.001 best [epoch#2] loss=6.431 val_loss=5.825 lr=0.001 best [epoch#3] loss=5.776 val_loss=5.254 lr=0.001 best [epoch#4] loss=5.117 val_loss=4.432 lr=0.001 best [epoch#5] loss=4.356 val_loss=3.67 lr=0.001 best [epoch#6] loss=3.749 val_loss=3.01 lr=0.001 best [epoch#7] loss=2.952 val_loss=2.371 lr=0.001 best [epoch#8] loss=2.354 val_loss=1.825 lr=0.001 best [epoch#9] loss=1.808 val_loss=1.384 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-05-28 23:46:43 ( 3.98s ) python3 ( 43.2s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-05-28 23:46:47 ( 5.03s ) python3 ( 48.2s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-05-28 23:46:52 ( 6.98s ) python3 ( 55.2s ) [I 2020-05-28 23:46:52,209] A new study created with name: torch.lr.study#0 [run#8] lr=1.364e-05 [I 2020-05-28 23:46:53,589] Finished trial#0 with value: 70.26964445114136 with parameters: {'lr': 1.3636404047956838e-05}. Best is trial#0 with value: 70.26964445114136. [run#9] lr=1.266e-05 [I 2020-05-28 23:46:54,971] Finished trial#1 with value: 42.05571928024292 with parameters: {'lr': 1.2661633931324009e-05}. Best is trial#1 with value: 42.05571928024292. [run#10] lr=4.468e-05 [I 2020-05-28 23:46:56,334] Finished trial#2 with value: 9.032695889472961 with parameters: {'lr': 4.467564664450915e-05}. Best is trial#2 with value: 9.032695889472961. [run#11] lr=2.794e-05 [I 2020-05-28 23:46:57,715] Finished trial#3 with value: 29.401192450523375 with parameters: {'lr': 2.7942551973225483e-05}. Best is trial#2 with value: 9.032695889472961. [run#12] lr=0.0001887 [I 2020-05-28 23:46:59,096] Finished trial#4 with value: 8.175034308433533 with parameters: {'lr': 0.000188731505585742}. Best is trial#4 with value: 8.175034308433533. <optuna.study.Study at 0x27f21650308> Tracking UI Optionally, you can update missing parameters: client.update_params('torch') [7] 2020-05-28 23:46:59 ( 356ms ) python3 ( 55.5s ) In a terminal, move to the working directory ( examples ), then run $ ivory ui [8] ( ) ( ) You can view the UI using URL http://localhost:5000 in your browser. Table 1 A collection of runs. Parameters, metrics, tags are logged. You can compare the training results among runs. Figure 1 Comparison of training curves See also the official MLFlow documentation .","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking UI</span></span></span>"},{"location":"tutorial/ui/#tracking-ui","text":"Ivory uses MLFlow Tracking for the workflow tracking and model saving. For this feature, the Client instace has to have a Tracker instance. First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-05-28 23:46:41 ( 1.26s ) python3 ( 39.2s ) [I 200528 23:46:41 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=30.05 val_loss=6.77 lr=0.001 best [epoch#1] loss=7.079 val_loss=6.307 lr=0.001 best [epoch#2] loss=6.431 val_loss=5.825 lr=0.001 best [epoch#3] loss=5.776 val_loss=5.254 lr=0.001 best [epoch#4] loss=5.117 val_loss=4.432 lr=0.001 best [epoch#5] loss=4.356 val_loss=3.67 lr=0.001 best [epoch#6] loss=3.749 val_loss=3.01 lr=0.001 best [epoch#7] loss=2.952 val_loss=2.371 lr=0.001 best [epoch#8] loss=2.354 val_loss=1.825 lr=0.001 best [epoch#9] loss=1.808 val_loss=1.384 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-05-28 23:46:43 ( 3.98s ) python3 ( 43.2s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-05-28 23:46:47 ( 5.03s ) python3 ( 48.2s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-05-28 23:46:52 ( 6.98s ) python3 ( 55.2s ) [I 2020-05-28 23:46:52,209] A new study created with name: torch.lr.study#0 [run#8] lr=1.364e-05 [I 2020-05-28 23:46:53,589] Finished trial#0 with value: 70.26964445114136 with parameters: {'lr': 1.3636404047956838e-05}. Best is trial#0 with value: 70.26964445114136. [run#9] lr=1.266e-05 [I 2020-05-28 23:46:54,971] Finished trial#1 with value: 42.05571928024292 with parameters: {'lr': 1.2661633931324009e-05}. Best is trial#1 with value: 42.05571928024292. [run#10] lr=4.468e-05 [I 2020-05-28 23:46:56,334] Finished trial#2 with value: 9.032695889472961 with parameters: {'lr': 4.467564664450915e-05}. Best is trial#2 with value: 9.032695889472961. [run#11] lr=2.794e-05 [I 2020-05-28 23:46:57,715] Finished trial#3 with value: 29.401192450523375 with parameters: {'lr': 2.7942551973225483e-05}. Best is trial#2 with value: 9.032695889472961. [run#12] lr=0.0001887 [I 2020-05-28 23:46:59,096] Finished trial#4 with value: 8.175034308433533 with parameters: {'lr': 0.000188731505585742}. Best is trial#4 with value: 8.175034308433533. <optuna.study.Study at 0x27f21650308>","title":"Tracking UI"},{"location":"tutorial/ui/#tracking-ui_1","text":"Optionally, you can update missing parameters: client.update_params('torch') [7] 2020-05-28 23:46:59 ( 356ms ) python3 ( 55.5s ) In a terminal, move to the working directory ( examples ), then run $ ivory ui [8] ( ) ( ) You can view the UI using URL http://localhost:5000 in your browser. Table 1 A collection of runs. Parameters, metrics, tags are logged. You can compare the training results among runs. Figure 1 Comparison of training curves See also the official MLFlow documentation .","title":"Tracking UI"}]}
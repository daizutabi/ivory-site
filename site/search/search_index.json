{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ivory Documentation Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Documentation</span></span></span>"},{"location":"#ivory-documentation","text":"Ivory is a lightweight framework for machine learning. It integrates model design, tracking, and hyperparmeter tuning. Ivory uses MLflow Tracking for tracking and Optuna for hyperparmeter tuning. Using Ivory, you can tackle both tracking and tuning workflow at one place. Another key feature of Ivory is its workflow design. You can write down all of your workflow such as model structure or tracking/tuning process in one YAML file. It allows us to understand the whole process at a glance. Ivory is library-agnostic. You can use it with any machine learning library. Get started using the Quickstart. Quickstart","title":"Ivory Documentation"},{"location":"quickstart/","text":"Quickstart Installation Install Ivory using pip . $ pip install ivory Using an Ivory Client Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-05-29 20:43:35 ( 1.04s ) python3 ( 1.09s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-05-29 20:43:36 ( 3.00ms ) python3 ( 1.10s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.10s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-05-29 20:43:36 ( 3.00ms ) python3 ( 1.10s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Create NumPy data In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function defined in rectangle/data.py and an example output: File 2 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1) import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.11s ) array([[4.977355 , 2.321204 ], [1.3631983, 3.4537864], [2.0164387, 2.5384922], [4.604581 , 3.6446903]], dtype=float32) z [9] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.12s ) array([11.441835 , 4.672565 , 5.2723985, 16.983814 ], dtype=float32) Set of Data classes Ivory defines a set of Data classes ( Data , Dataset , Datasets ). But now, we use the Data class only. In the above file, the kfold_split() function creates a fold array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [10] 2020-05-29 20:43:36 ( 5.00ms ) python3 ( 1.12s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) Now, we can get a Data instance. data = rectangle.data.Data() data [11] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.13s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [12] 2020-05-29 20:43:36 ( 3.00ms ) python3 ( 1.13s ) (0, array([3.666907 , 4.3155937], dtype=float32), array([15.907957], dtype=float32)) This returned value is a tuple of (index, input, target). Ivory always keeps data index so that we can know where a sample comes from. Define a model We use a simple MLP model here. File 3 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) Parameter file for Run Ivory configures a run using a YAML file. Here is a full example. File 4 torch.yaml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [14] 2020-05-29 20:43:37 ( 279ms ) python3 ( 1.67s ) [I 200529 20:43:37 tracker:48] A new experiment created with name: 'torch' Run(id='3d58f70e4841443588f40c315cd96601', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [15] 2020-05-29 20:43:37 ( 7.00ms ) python3 ( 1.68s ) run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 0 class: ivory.core.data.Datasets model: class: rectangle.torch.Model hidden_sizes: - 20 - 30 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: 3d58f70e4841443588f40c315cd96601 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method can take keyword arguments to modify these parameters: run = client.create_run( 'torch', fold=3, hidden_sizes=[40, 50, 60], ) print('[datasets]') print(yaml.dump(run.params['run']['datasets'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [16] 2020-05-29 20:43:37 ( 45.0ms ) python3 ( 1.72s ) [datasets] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 3 class: ivory.core.data.Datasets [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60 Train a model Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [17] 2020-05-29 20:43:37 ( 1.27s ) python3 ( 2.99s ) [epoch#0] loss=16.89 val_loss=7.464 lr=0.001 best [epoch#1] loss=7.04 val_loss=6.489 lr=0.001 best [epoch#2] loss=6.039 val_loss=5.985 lr=0.001 best [epoch#3] loss=5.137 val_loss=5.2 lr=0.001 best [epoch#4] loss=4.265 val_loss=3.714 lr=0.001 best [epoch#5] loss=3.339 val_loss=2.793 lr=0.001 best [epoch#6] loss=2.414 val_loss=1.956 lr=0.001 best [epoch#7] loss=1.809 val_loss=1.37 lr=0.001 best [epoch#8] loss=1.341 val_loss=1.075 lr=0.001 best [epoch#9] loss=1.013 val_loss=1.097 lr=0.001 The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [18] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 2.99s ) Dict(['loss', 'val_loss', 'lr']) run.metrics.history.val_loss [19] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.00s ) {0: 7.46440600156784, 1: 6.488541460037231, 2: 5.985298383235931, 3: 5.19961701631546, 4: 3.7139261603355407, 5: 2.7928032279014587, 6: 1.9557181417942047, 7: 1.370109525322914, 8: 1.0753291547298431, 9: 1.0965633936226369} Also the model output and target are automatically collected in a run.results instance. run.results [20] 2020-05-29 20:43:38 ( 5.00ms ) python3 ( 3.00s ) Results(['train', 'val']) run.results.val.output[:5] [21] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.00s ) array([[0.9481825], [5.8781013], [2.6844478], [7.34856 ], [0.7787067]], dtype=float32) run.results.val.target[:5] [22] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.01s ) array([[1.4090346], [6.0836716], [2.8664975], [6.6200657], [1.3988259]], dtype=float32) Test a model Testing a model is as simple as training. Just call run.start('test') instead of a (default) 'train' argument. run.start('test') run.results [23] 2020-05-29 20:43:38 ( 38.0ms ) python3 ( 3.05s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [24] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.05s ) array([[16.335096 ], [ 7.6532407], [13.580347 ], [ 6.03147 ], [ 1.4141152]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [25] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.05s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32) Task for multiple runs Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [26] 2020-05-29 20:43:38 ( 50.0ms ) python3 ( 3.10s ) Task(id='594cf8f756674c3db2054d8d005d5680', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [27] 2020-05-29 20:43:39 ( 4.00ms ) python3 ( 3.11s ) <generator object Task.product at 0x0000023AF8B7F248> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specify. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [28] 2020-05-29 20:43:39 ( 2.09s ) python3 ( 5.20s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3 Collect runs Our client has a Tracker instance. It stores the state of runs in background using MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by MLFlow Tracking. # A helper function. def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [29] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.20s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [30] 2020-05-29 20:43:41 ( 65.0ms ) python3 ( 5.26s ) b3476 run#6 4d032 run#5 23051 run#4 33c41 run#3 594cf task#0 e56e5 run#2 86bac run#1 3d58f run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [31] 2020-05-29 20:43:41 ( 161ms ) python3 ( 5.42s ) 33c41 run#3 e56e5 run#2 3d58f run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [32] 2020-05-29 20:43:41 ( 44.0ms ) python3 ( 5.47s ) b3476 run#6 4d032 run#5 23051 run#4 33c41 run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [33] 2020-05-29 20:43:41 ( 52.0ms ) python3 ( 5.52s ) 3d58f run#0 594cf task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [34] 2020-05-29 20:43:41 ( 57.0ms ) python3 ( 5.58s ) e56e5 run#2 33c41 run#3 Load runs and results An Ivory Client instance can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances now. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [35] 2020-05-29 20:43:41 ( 65.0ms ) python3 ( 5.64s ) b3476 run#6 4d032 run#5 23051 run#4 33c41 run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [36] 2020-05-29 20:43:41 ( 47.0ms ) python3 ( 5.69s ) Run(id='b3476557a6d04fb4acca89b06cd6f644', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.datasets.fold [37] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.69s ) 3 By loading a run, we obtained the pretrained model. run.model.eval() [38] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.70s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=30, bias=True) (2): Linear(in_features=30, out_features=1, bias=True) ) ) import torch index, input, target = run.datasets.val[:5] with torch.no_grad(): output = run.model(torch.tensor(input)) print('[output]') print(output.numpy()) print('[target]') print(target) [39] 2020-05-29 20:43:41 ( 8.00ms ) python3 ( 5.70s ) [output] [[ 9.431354 ] [ 8.270427 ] [ 9.181276 ] [11.422132 ] [11.7492695]] [target] [[ 5.609081 ] [ 5.1275864] [ 7.8278456] [11.21648 ] [12.267953 ]] If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [40] 2020-05-29 20:43:41 ( 25.0ms ) python3 ( 5.73s ) Results(['train', 'val', 'test']) for mode in results: # Yield a mode. print(mode, results[mode].output.shape) [41] 2020-05-29 20:43:41 ( 8.00ms ) python3 ( 5.74s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. In order to load multiple run's results at the same time, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [42] 2020-05-29 20:43:41 ( 88.0ms ) python3 ( 5.83s ) Results(['val', 'test']) for mode, result in results.items(): # Yield a (mode, result). print(mode, result.output.shape) [43] 2020-05-29 20:43:41 ( 7.00ms ) python3 ( 5.83s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [44] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.84s ) (800, 200) Usually, duplicated samples in test data are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode, result in reduced_results.items(): print(mode, result.output.shape) [45] 2020-05-29 20:43:41 ( 13.0ms ) python3 ( 5.85s ) val (800, 1) test (200, 1) Compare these results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [46] 2020-05-29 20:43:41 ( 9.00ms ) python3 ( 5.86s ) [results] [[14.388384] [13.964242] [13.739509] [14.085634]] -> mean: 14.044443 [reduced_results] [[14.044442]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [47] 2020-05-29 20:43:41 ( 88.0ms ) python3 ( 5.95s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [48] 2020-05-29 20:43:41 ( 6.00ms ) python3 ( 5.95s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [49] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.96s ) 2.111811 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [50] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.96s ) array([[14.044442 ], [ 9.945196 ], [12.880562 ], [ 7.2718115], [ 4.1000986]], dtype=float32) Summary In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Quickstart</span></span></span>"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Install Ivory using pip . $ pip install ivory","title":"Installation"},{"location":"quickstart/#using-an-ivory-client","text":"Ivory has the Client class that manages the workflow of machine learning. Let's create your first Client instance. In this quickstart, we are working with examples under the examples directory. import ivory client = ivory.create_client(\"examples\") client [3] 2020-05-29 20:43:35 ( 1.04s ) python3 ( 1.09s ) Client(num_objects=2) The representation of the client shows that it has two objects. These objects can be accessed by index notation or dot notation . client[0] # or client['tracker'], or client.tracker [4] 2020-05-29 20:43:36 ( 3.00ms ) python3 ( 1.10s ) Tracker(tracking_uri='file:///C:/Users/daizu/Documents/github/ivory/examples/mlruns', artifact_location=None) The first object is a Tracker instance which connects Ivory to MLFlow Tracking . Because a Client instance is an iterable, you can get all of the objects by applying list() to it. list(client) [5] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.10s ) ['tracker', 'tuner'] The second objects is named tuner . client.tuner [6] 2020-05-29 20:43:36 ( 3.00ms ) python3 ( 1.10s ) Tuner(storage='sqlite://', sampler=None, pruner=None, load_if_exists=True) A Tuner instance connects Ivory to Optuna: A hyperparameter optimization framework . We can customize these objects with a YAML file named client.yml under the woking directory. In our case, the file just contains the minimum settings. File 1 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Using an Ivory Client"},{"location":"quickstart/#create-numpy-data","text":"In this quickstart, we try to predict rectangles area from thier width and height using PyTorch . First, prepare the data as NumPy arrays. In rectangle/data.py under the working directory, a create_data() function is defined. The ivory.create_client() function automatically inserts the working directory to sys.path , so that we can import the module regardless of the current directory. Let's check the create_data() function defined in rectangle/data.py and an example output: File 2 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1) import rectangle.data xy, z = rectangle.data.create_data(4) xy [8] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.11s ) array([[4.977355 , 2.321204 ], [1.3631983, 3.4537864], [2.0164387, 2.5384922], [4.604581 , 3.6446903]], dtype=float32) z [9] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.12s ) array([11.441835 , 4.672565 , 5.2723985, 16.983814 ], dtype=float32)","title":"Create NumPy data"},{"location":"quickstart/#set-of-data-classes","text":"Ivory defines a set of Data classes ( Data , Dataset , Datasets ). But now, we use the Data class only. In the above file, the kfold_split() function creates a fold array. import numpy as np from ivory.utils.fold import kfold_split kfold_split(np.arange(10), n_splits=3) [10] 2020-05-29 20:43:36 ( 5.00ms ) python3 ( 1.12s ) array([2, 1, 0, 2, 0, 2, 1, 1, 0, 0], dtype=int8) Now, we can get a Data instance. data = rectangle.data.Data() data [11] 2020-05-29 20:43:36 ( 4.00ms ) python3 ( 1.13s ) Data(train_size=800, test_size=200) data.get(0) # get data of index = 0. [12] 2020-05-29 20:43:36 ( 3.00ms ) python3 ( 1.13s ) (0, array([3.666907 , 4.3155937], dtype=float32), array([15.907957], dtype=float32)) This returned value is a tuple of (index, input, target). Ivory always keeps data index so that we can know where a sample comes from.","title":"Set of Data classes"},{"location":"quickstart/#define-a-model","text":"We use a simple MLP model here. File 3 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x)","title":"Define a model"},{"location":"quickstart/#parameter-file-for-run","text":"Ivory configures a run using a YAML file. Here is a full example. File 4 torch.yaml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 Let's create a run by Client.create_run() run = client.create_run('torch') run [14] 2020-05-29 20:43:37 ( 279ms ) python3 ( 1.67s ) [I 200529 20:43:37 tracker:48] A new experiment created with name: 'torch' Run(id='3d58f70e4841443588f40c315cd96601', name='run#0', num_objects=12) Note Client.create_run(<name>) creates an experiment named <name> if it hasn't existed yet. By cliking an icon ( ) in the above cell, you can see the log. Or you can directly create an experiment then make the experiment create a run: experiment = client . create_experiment ( 'torch' ) run = experiment . create_run () A Run instance have a params attribute that holds the parameters for the run. import yaml print(yaml.dump(run.params, sort_keys=False)) [15] 2020-05-29 20:43:37 ( 7.00ms ) python3 ( 1.68s ) run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 0 class: ivory.core.data.Datasets model: class: rectangle.torch.Model hidden_sizes: - 20 - 30 optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: class: ivory.torch.results.Results metrics: class: ivory.torch.metrics.Metrics monitor: metric: val_loss class: ivory.callbacks.monitor.Monitor early_stopping: patience: 10 class: ivory.callbacks.early_stopping.EarlyStopping trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 class: ivory.torch.trainer.Trainer class: ivory.torch.run.Run name: run#0 id: 3d58f70e4841443588f40c315cd96601 experiment: name: torch class: ivory.core.base.Experiment id: '1' This is similar to the YAML file we read before, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. The Client.create_run() method can take keyword arguments to modify these parameters: run = client.create_run( 'torch', fold=3, hidden_sizes=[40, 50, 60], ) print('[datasets]') print(yaml.dump(run.params['run']['datasets'], sort_keys=False)) print('[model]') print(yaml.dump(run.params['run']['model'], sort_keys=False)) [16] 2020-05-29 20:43:37 ( 45.0ms ) python3 ( 1.72s ) [datasets] data: class: rectangle.data.Data n_splits: 4 dataset: def: ivory.torch.data.Dataset fold: 3 class: ivory.core.data.Datasets [model] class: rectangle.torch.Model hidden_sizes: - 40 - 50 - 60","title":"Parameter file for Run"},{"location":"quickstart/#train-a-model","text":"Once you got a run instance, then all you need is to start it. run = client.create_run('torch') # Back to the default settings. run.start() [17] 2020-05-29 20:43:37 ( 1.27s ) python3 ( 2.99s ) [epoch#0] loss=16.89 val_loss=7.464 lr=0.001 best [epoch#1] loss=7.04 val_loss=6.489 lr=0.001 best [epoch#2] loss=6.039 val_loss=5.985 lr=0.001 best [epoch#3] loss=5.137 val_loss=5.2 lr=0.001 best [epoch#4] loss=4.265 val_loss=3.714 lr=0.001 best [epoch#5] loss=3.339 val_loss=2.793 lr=0.001 best [epoch#6] loss=2.414 val_loss=1.956 lr=0.001 best [epoch#7] loss=1.809 val_loss=1.37 lr=0.001 best [epoch#8] loss=1.341 val_loss=1.075 lr=0.001 best [epoch#9] loss=1.013 val_loss=1.097 lr=0.001 The history of metrics is saved as the history attribute of a run.metrics instance. run.metrics.history [18] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 2.99s ) Dict(['loss', 'val_loss', 'lr']) run.metrics.history.val_loss [19] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.00s ) {0: 7.46440600156784, 1: 6.488541460037231, 2: 5.985298383235931, 3: 5.19961701631546, 4: 3.7139261603355407, 5: 2.7928032279014587, 6: 1.9557181417942047, 7: 1.370109525322914, 8: 1.0753291547298431, 9: 1.0965633936226369} Also the model output and target are automatically collected in a run.results instance. run.results [20] 2020-05-29 20:43:38 ( 5.00ms ) python3 ( 3.00s ) Results(['train', 'val']) run.results.val.output[:5] [21] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.00s ) array([[0.9481825], [5.8781013], [2.6844478], [7.34856 ], [0.7787067]], dtype=float32) run.results.val.target[:5] [22] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.01s ) array([[1.4090346], [6.0836716], [2.8664975], [6.6200657], [1.3988259]], dtype=float32)","title":"Train a model"},{"location":"quickstart/#test-a-model","text":"Testing a model is as simple as training. Just call run.start('test') instead of a (default) 'train' argument. run.start('test') run.results [23] 2020-05-29 20:43:38 ( 38.0ms ) python3 ( 3.05s ) Results(['train', 'val', 'test']) As you can see, test results were added. run.results.test.output[:5] [24] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.05s ) array([[16.335096 ], [ 7.6532407], [13.580347 ], [ 6.03147 ], [ 1.4141152]], dtype=float32) Off course the target values for the test data are np.nan . run.results.test.target[:5] [25] 2020-05-29 20:43:38 ( 4.00ms ) python3 ( 3.05s ) array([[nan], [nan], [nan], [nan], [nan]], dtype=float32)","title":"Test a model"},{"location":"quickstart/#task-for-multiple-runs","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. task = client.create_task('torch') task [26] 2020-05-29 20:43:38 ( 50.0ms ) python3 ( 3.10s ) Task(id='594cf8f756674c3db2054d8d005d5680', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library. Let's try to perform cross validation. runs = task.product(fold=range(4), verbose=0, epochs=3) runs [27] 2020-05-29 20:43:39 ( 4.00ms ) python3 ( 3.11s ) <generator object Task.product at 0x0000023AF8B7F248> Like itertools 's functions, Task.prodcut() and Task.chain() return a generator, which yields runs that are configured by different parameters you specify. In this case, this generator will yield 4 runs with a fold number ranging from 0 to 4 for each. A task instance doesn't start any training by itself. In addtion, you can pass fixed parameters to update the original parameters in the YAML file. Then start 4 runs by a for loop including run.start('both') . Here 'both' means execution of test after training. for run in runs: run.start('both') [28] 2020-05-29 20:43:39 ( 2.09s ) python3 ( 5.20s ) [run#3] epochs=3 fold=0 [run#4] epochs=3 fold=1 [run#5] epochs=3 fold=2 [run#6] epochs=3 fold=3","title":"Task for multiple runs"},{"location":"quickstart/#collect-runs","text":"Our client has a Tracker instance. It stores the state of runs in background using MLFlow Tracking. The Client class provides several methods to access the stored runs. For example, Client.search_run_ids() returns a generator which yields RunID created by MLFlow Tracking. # A helper function. def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) [29] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.20s ) run_ids = client.search_run_ids('torch') # Yields all runs of `torch`. print_run_info(run_ids) [30] 2020-05-29 20:43:41 ( 65.0ms ) python3 ( 5.26s ) b3476 run#6 4d032 run#5 23051 run#4 33c41 run#3 594cf task#0 e56e5 run#2 86bac run#1 3d58f run#0 For filtering, add key-value pairs. # If `exclude_parent` is True, parent runs are excluded. run_ids = client.search_run_ids('torch', fold=0, exclude_parent=True) print_run_info(run_ids) [31] 2020-05-29 20:43:41 ( 161ms ) python3 ( 5.42s ) 33c41 run#3 e56e5 run#2 3d58f run#0 # If `parent_run_id` is specified, nested runs having the parent are returned. run_ids = client.search_run_ids('torch', parent_run_id=task.id) print_run_info(run_ids) [32] 2020-05-29 20:43:41 ( 44.0ms ) python3 ( 5.47s ) b3476 run#6 4d032 run#5 23051 run#4 33c41 run#3 Client.get_run_id() and Client.get_run_ids() fetch RunID from run name, more strictly, (run class name in lower case) plus (run number). run_ids = [client.get_run_id('torch', run=0), client.get_run_id('torch', task=0)] print_run_info(run_ids) [33] 2020-05-29 20:43:41 ( 52.0ms ) python3 ( 5.52s ) 3d58f run#0 594cf task#0 run_ids = client.get_run_ids('torch', run=range(2, 4)) print_run_info(run_ids) [34] 2020-05-29 20:43:41 ( 57.0ms ) python3 ( 5.58s ) e56e5 run#2 33c41 run#3","title":"Collect runs"},{"location":"quickstart/#load-runs-and-results","text":"An Ivory Client instance can load runs. First select RunID(s) to load. We want to perform cross validation here, so that we need a run collection created by the task#0 . In this case, we can use Client.get_nested_run_ids() . Why don't we use Client.search_run_ids() as we did above? Because we don't have an easy way to get a very long RunID after we restart a Python session and lose the Task instance. On the ohter hand, a run name is easy to manage and write. # Assume that we restart a session so we have no run instances now. run_ids = list(client.get_nested_run_ids('torch', task=0)) print_run_info(run_ids) [35] 2020-05-29 20:43:41 ( 65.0ms ) python3 ( 5.64s ) b3476 run#6 4d032 run#5 23051 run#4 33c41 run#3 Let's load the latest run. run = client.load_run(run_ids[0]) run [36] 2020-05-29 20:43:41 ( 47.0ms ) python3 ( 5.69s ) Run(id='b3476557a6d04fb4acca89b06cd6f644', name='run#6', num_objects=11) Note that the Client.load_run() function doesn't require an experiment name because RunID is UUID . As you expected, the fold number is 3. run.datasets.fold [37] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.69s ) 3 By loading a run, we obtained the pretrained model. run.model.eval() [38] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.70s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=30, bias=True) (2): Linear(in_features=30, out_features=1, bias=True) ) ) import torch index, input, target = run.datasets.val[:5] with torch.no_grad(): output = run.model(torch.tensor(input)) print('[output]') print(output.numpy()) print('[target]') print(target) [39] 2020-05-29 20:43:41 ( 8.00ms ) python3 ( 5.70s ) [output] [[ 9.431354 ] [ 8.270427 ] [ 9.181276 ] [11.422132 ] [11.7492695]] [target] [[ 5.609081 ] [ 5.1275864] [ 7.8278456] [11.21648 ] [12.267953 ]] If you don't need a whole run instance, Client.load_instance() is a better choice to save time and memory. results = client.load_instance(run_ids[0], 'results') results [40] 2020-05-29 20:43:41 ( 25.0ms ) python3 ( 5.73s ) Results(['train', 'val', 'test']) for mode in results: # Yield a mode. print(mode, results[mode].output.shape) [41] 2020-05-29 20:43:41 ( 8.00ms ) python3 ( 5.74s ) train (600, 1) val (200, 1) test (200, 1) For cross validation, we need 4 runs. In order to load multiple run's results at the same time, the Ivory Client provides a convenient method. results = client.load_results(run_ids, verbose=False) # No progress bar. results [42] 2020-05-29 20:43:41 ( 88.0ms ) python3 ( 5.83s ) Results(['val', 'test']) for mode, result in results.items(): # Yield a (mode, result). print(mode, result.output.shape) [43] 2020-05-29 20:43:41 ( 7.00ms ) python3 ( 5.83s ) val (800, 1) test (800, 1) Note Client.load_results() drops train data for saving memory. The lengths of validation data and test data are both 800 (200 times 4). But be careful about the test data. The length of unique samples is 200 (one fold size). import numpy as np len(np.unique(results.val.index)), len(np.unique(results.test.index)) [44] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.84s ) (800, 200) Usually, duplicated samples in test data are averaged for ensembling. Results.mean() method performs this mean reduction and returns a newly created Rusults instance. reduced_results = results.mean() for mode, result in reduced_results.items(): print(mode, result.output.shape) [45] 2020-05-29 20:43:41 ( 13.0ms ) python3 ( 5.85s ) val (800, 1) test (200, 1) Compare these results. index = results.test.index index_0 = index[0] x = results.test.output[index == index_0] print('[results]') print(x) print(\"-> mean:\", np.mean(x)) index = reduced_results.test.index x = reduced_results.test.output[index == index_0] print('[reduced_results]') print(x) [46] 2020-05-29 20:43:41 ( 9.00ms ) python3 ( 5.86s ) [results] [[14.388384] [13.964242] [13.739509] [14.085634]] -> mean: 14.044443 [reduced_results] [[14.044442]] For convenience, Client.load_results() has a reduction keyword argument. results = client.load_results(run_ids, reduction='mean', verbose=False) results [47] 2020-05-29 20:43:41 ( 88.0ms ) python3 ( 5.95s ) Results(['val', 'test']) for mode, result in results.items(): print(mode, result.output.shape) [48] 2020-05-29 20:43:41 ( 6.00ms ) python3 ( 5.95s ) val (800, 1) test (200, 1) A cross validation (CV) score can be calculated as follows: pred = results.val.output true = results.val.target np.mean(np.sqrt((pred - true) ** 2)) # Use any function for your metric. [49] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.96s ) 2.111811 And we got a prediction for the test data using 4 MLP models. results.test.output[:5] [50] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.96s ) array([[14.044442 ], [ 9.945196 ], [12.880562 ], [ 7.2718115], [ 4.1000986]], dtype=float32)","title":"Load runs and results"},{"location":"quickstart/#summary","text":"In this quickstart, we learned how to use the Ivory library to perform machine learning workflow. For more details see the tutorial section.","title":"Summary"},{"location":"api/data/","text":"Skipped.","title":"Data"},{"location":"tutorial/callback/","text":"Callback System Basics Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-05-29 20:43:41 ( 5.00ms ) python3 ( 5.98s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have an only `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.99s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.99s ) CallbackCaller(num_objects=1) The number of registered instances is 1. list(caller) [5] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.99s ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [6] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 6.00s ) CallbackCaller(num_objects=13) The number of instances increased up to 13. list(caller) [7] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 6.00s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Let's inspect some callback funtions. caller.on_init_begin [8] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 6.01s ) Callback([]) This is an empty callback because the caller has no instances that define the on_init_begin() function. On the other hand, caller.on_fit_begin [9] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 6.01s ) Callback(['simple']) The simple instance is registered as a receiver of the on_fit_begin() function. We can call this. caller.on_fit_begin() [10] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 6.01s ) on_fit_begin is called from id=2452405484424 id(caller) [11] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 6.02s ) 2452405484424 This caller-receiver network among arbitrary instance collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below. Example Callback: Results To work with the Results callback, we create data and model set. For more details about the following code, see Creating Instance section. import yaml from ivory.core.instance import create_instance # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') [12] 2020-05-29 20:43:41 ( 8.00ms ) python3 ( 6.02s ) The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.03s ) Results([]) import ivory.core.run run = ivory.core.run.Run( datasets=datasets, model=model, results=results ) run.create_callbacks() run [14] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.03s ) Run(num_objects=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-05-29 20:43:42 ( 7.00ms ) python3 ( 6.04s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. import torch # For simplicity, just one epoch with some batches. run.on_train_begin() dataset = run.datasets.train for k in range(3): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. dataset = run.datasets.val for k in range(2): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-05-29 20:43:42 ( 8.00ms ) python3 ( 6.05s ) Results(['train', 'val']) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [17] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.05s ) Dict(['index', 'output', 'target']) results.train.index # The length is 4 x 3. [18] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.06s ) array([ 0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16]) results.val.index # The length is 4 x 2. [19] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.06s ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output [20] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.06s ) array([[-0.40913743], [-0.4611321 ], [-0.48785785], [-0.40574434], [-0.5382135 ], [-0.44107404], [-0.4691312 ], [-0.5534857 ]], dtype=float32) results.val.target [21] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.07s ) array([[ 1.4090346], [ 2.8664975], [ 6.6200657], [ 1.3988259], [13.410969 ], [ 3.8164513], [ 6.379659 ], [ 9.787515 ]], dtype=float32) Other Callback There are several callback such as Metrics , Monitor , etc . We will learn about them in next Training a Model tutorial.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Callback System</span></span></span>"},{"location":"tutorial/callback/#callback-system","text":"","title":"Callback System"},{"location":"tutorial/callback/#basics","text":"Ivory implements a simple but powerful callback system. Here is the list of callback functions: import ivory.core.base ivory.core.base.Callback.METHODS [2] 2020-05-29 20:43:41 ( 5.00ms ) python3 ( 5.98s ) ['on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Any class that defines these functions can be a callback instance. class SimpleCallback: # No base class is needed. # You don't have to define all of the callback functions def on_fit_begin(self, run): # Must have an only `run` argument. print(f'on_fit_begin is called from id={id(run)}') # Do something with `run`. [3] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.99s ) To invoke callback functions, create a CallbackCaller instance. caller = ivory.core.base.CallbackCaller(simple=SimpleCallback()) caller [4] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 5.99s ) CallbackCaller(num_objects=1) The number of registered instances is 1. list(caller) [5] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 5.99s ) ['simple'] Then call the CallbackCaller.create_callbacks() method to build a callback network. caller.create_callbacks() caller [6] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 6.00s ) CallbackCaller(num_objects=13) The number of instances increased up to 13. list(caller) [7] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 6.00s ) ['simple', 'on_init_begin', 'on_init_end', 'on_fit_begin', 'on_epoch_begin', 'on_train_begin', 'on_train_end', 'on_val_begin', 'on_val_end', 'on_epoch_end', 'on_fit_end', 'on_test_begin', 'on_test_end'] Callback functions are added to the caller instance. Let's inspect some callback funtions. caller.on_init_begin [8] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 6.01s ) Callback([]) This is an empty callback because the caller has no instances that define the on_init_begin() function. On the other hand, caller.on_fit_begin [9] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 6.01s ) Callback(['simple']) The simple instance is registered as a receiver of the on_fit_begin() function. We can call this. caller.on_fit_begin() [10] 2020-05-29 20:43:41 ( 4.00ms ) python3 ( 6.01s ) on_fit_begin is called from id=2452405484424 id(caller) [11] 2020-05-29 20:43:41 ( 3.00ms ) python3 ( 6.02s ) 2452405484424 This caller-receiver network among arbitrary instance collection builds a complex machine learning workflow. The Run class is a subclass of the CallbackCaller class and performs more library-specific process. We uses this Run class below.","title":"Basics"},{"location":"tutorial/callback/#example-callback-results","text":"To work with the Results callback, we create data and model set. For more details about the following code, see Creating Instance section. import yaml from ivory.core.instance import create_instance # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') [12] 2020-05-29 20:43:41 ( 8.00ms ) python3 ( 6.02s ) The Results callback stores index, output, and target data. To save memory, a Results instance ignores input data. # import ivory.callbacks.results # For Scikit-learn or TensorFlow. import ivory.torch.results results = ivory.torch.results.Results() results [13] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.03s ) Results([]) import ivory.core.run run = ivory.core.run.Run( datasets=datasets, model=model, results=results ) run.create_callbacks() run [14] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.03s ) Run(num_objects=15) # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(func) print_callbacks(results) [15] 2020-05-29 20:43:42 ( 7.00ms ) python3 ( 6.04s ) on_train_begin on_train_end on_val_end on_test_begin on_test_end Let's play with the Results callback. The Results.step() method records the current index, output, and target. import torch # For simplicity, just one epoch with some batches. run.on_train_begin() dataset = run.datasets.train for k in range(3): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) # Do something for example parameter update or early stopping. run.on_train_end() run.on_val_begin() # Can call even if there is no callback. dataset = run.datasets.val for k in range(2): index, input, target = dataset[4 * k : 4 * (k + 1)] input, target = torch.tensor(input), torch.tensor(target) output = run.model(input) run.results.step(index, output, target) run.on_val_end() run.on_epoch_end() results [16] 2020-05-29 20:43:42 ( 8.00ms ) python3 ( 6.05s ) Results(['train', 'val']) We performed a train and validation loop so that the Results instance has these data, but doesn't have test data. We can get data by nested dot-notation. results.train [17] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.05s ) Dict(['index', 'output', 'target']) results.train.index # The length is 4 x 3. [18] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.06s ) array([ 0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16]) results.val.index # The length is 4 x 2. [19] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.06s ) array([ 1, 8, 14, 27, 30, 31, 34, 45]) results.val.output [20] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.06s ) array([[-0.40913743], [-0.4611321 ], [-0.48785785], [-0.40574434], [-0.5382135 ], [-0.44107404], [-0.4691312 ], [-0.5534857 ]], dtype=float32) results.val.target [21] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.07s ) array([[ 1.4090346], [ 2.8664975], [ 6.6200657], [ 1.3988259], [13.410969 ], [ 3.8164513], [ 6.379659 ], [ 9.787515 ]], dtype=float32)","title":"Example Callback: Results"},{"location":"tutorial/callback/#other-callback","text":"There are several callback such as Metrics , Monitor , etc . We will learn about them in next Training a Model tutorial.","title":"Other Callback"},{"location":"tutorial/core/","text":"Ivory Core Entities Client Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [3] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.12s ) Client(num_objects=2) list(client) [4] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.12s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna . Show files in the working directory examples . import os os.listdir('examples') [5] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.13s ) ['client.yml', 'lgb.yml', 'mlruns', 'rectangle', 'rfr.yml', 'ridge.yml', 'study.yml', 'tf.yml', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 7 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) . Experiment The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [6] 2020-05-29 20:43:42 ( 13.0ms ) python3 ( 6.14s ) [I 200529 20:43:42 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 8 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [7] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.14s ) {'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'fold': 0, 'class': 'ivory.core.data.Datasets'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [20, 30]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'batch_size': 10, 'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance. Run After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below. Default parameters Calling without arguments creates a run with default parameters. run = experiment.create_run() run [8] 2020-05-29 20:43:42 ( 34.0ms ) python3 ( 6.18s ) Run(id='b0703c7db84c4d6db94c7dfd56a24bde', name='run#0', num_objects=12) Here, the ID for this run is given by MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \". Simple literal (int, float, str) Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.datasets.fold [9] 2020-05-29 20:43:42 ( 38.0ms ) python3 ( 6.22s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.datasets.fold [10] 2020-05-29 20:43:42 ( 126ms ) python3 ( 6.34s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-97-db3b6dd1af57> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.datasets.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict): List A list parameter can be overwritten by passing a new list. Off course you can change the lengh of the list. The original hidden_sizes was [10, 20] . run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [11] 2020-05-29 20:43:42 ( 142ms ) python3 ( 6.48s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [12] 2020-05-29 20:43:42 ( 45.0ms ) python3 ( 6.53s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this method is unnecessary? This method is prepared for hyperparameter tuning . In some case, you may want to change a part of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [13] 2020-05-29 20:43:42 ( 47.0ms ) python3 ( 6.58s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) ) Duplicated parameter name Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [14] 2020-05-29 20:43:42 ( 45.0ms ) python3 ( 6.62s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all. Scoping by dots To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [15] 2020-05-29 20:43:42 ( 48.0ms ) python3 ( 6.67s ) (8, 20) Object type Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [16] 2020-05-29 20:43:42 ( 51.0ms ) python3 ( 6.72s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [17] 2020-05-29 20:43:42 ( 52.0ms ) python3 ( 6.77s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort. Creating a run from a client In the above examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 1 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 2 run = client.create_run('torch', fold=3)","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Ivory Core Entities</span></span></span>"},{"location":"tutorial/core/#ivory-core-entities","text":"","title":"Ivory Core Entities"},{"location":"tutorial/core/#client","text":"Ivory has the Client class that manages the workflow of machine learning. In this tutorial, we are working with data and model to predict rectangle area. The source module exists under the examples directory. First, create a Client instance. import ivory client = ivory.create_client(\"examples\") # Set the working directory client [3] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.12s ) Client(num_objects=2) list(client) [4] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.12s ) ['tracker', 'tuner'] The first object is a Tracker instance which connects Ivory to MLFlow Tracking . The second objects is named tuner . A Tuner instance connects Ivory to Optuna . Show files in the working directory examples . import os os.listdir('examples') [5] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.13s ) ['client.yml', 'lgb.yml', 'mlruns', 'rectangle', 'rfr.yml', 'ridge.yml', 'study.yml', 'tf.yml', 'torch.yml', '__pycache__'] rectangle is a Python package that contains our examples. YAML files with extension of .yml or possibly .yaml are parameter files to define a machine learning workflow. Basically, one YAML file is corresponding to one Experiment as discussed later, except the client.yml file. A YAML file name without the extension becomes an experiment name. mlruns is a directory automatically created by MLFlow Tracking in which our trained model and callbacks instances are saved. The client.yml is a configuration file for a Client instance. In our case, the file just contains the minimum settings. File 7 client.yml client: tracker: tuner: Note A YAML file for client is not required. If there is no file for client, Ivory creates a default client with a tracker and without a tuner. If you don't need a tracker, for example in debugging, use ivory.create_client(tracker=False) .","title":"Client"},{"location":"tutorial/core/#experiment","text":"The Client.create_experiment() function creates an Experiment instance. If the Client instance has a tracker , an experiment of MLFlow Tracking is also created at the same time if it hasn't existed yet. By cliking an icon ( ) in the below cell, you can see the log. experiment = client.create_experiment('torch') # Read torch.yml as params. experiment [6] 2020-05-29 20:43:42 ( 13.0ms ) python3 ( 6.14s ) [I 200529 20:43:42 tracker:48] A new experiment created with name: 'torch' Experiment(id='1', name='torch', num_objects=1) The ID for this experiment was given by MLFlow Tracking. The Client.create_experiment() function loads a corresponding YAML file to the first argument from the working directory. File 8 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 After loading, the Experiment instance setups the parameters for creating runs later. The parameters are stored in the params attribute. experiment.params [7] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.14s ) {'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': {'def': 'ivory.torch.data.Dataset'}, 'fold': 0, 'class': 'ivory.core.data.Datasets'}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [20, 30]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': {'class': 'ivory.torch.results.Results'}, 'metrics': {'class': 'ivory.torch.metrics.Metrics'}, 'monitor': {'metric': 'val_loss', 'class': 'ivory.callbacks.monitor.Monitor'}, 'early_stopping': {'patience': 10, 'class': 'ivory.callbacks.early_stopping.EarlyStopping'}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'batch_size': 10, 'epochs': 10, 'verbose': 2, 'class': 'ivory.torch.trainer.Trainer'}, 'class': 'ivory.torch.run.Run'}, 'experiment': {'name': 'torch', 'class': 'ivory.core.base.Experiment', 'id': '1'}} This is similar to the YAML file, but is slightly changed by the Ivory Client. Run and experiment sections are inserted. ExperimentID and RunID are assigned by MLFlow Tracking. Default classes are specified, for example ivory.torch.trainer.Trainer for a trainer instance.","title":"Experiment"},{"location":"tutorial/core/#run","text":"After setting up an Experiment instance, you can create runs with various parameters. Ivory provides several way to configure them as below.","title":"Run"},{"location":"tutorial/core/#default-parameters","text":"Calling without arguments creates a run with default parameters. run = experiment.create_run() run [8] 2020-05-29 20:43:42 ( 34.0ms ) python3 ( 6.18s ) Run(id='b0703c7db84c4d6db94c7dfd56a24bde', name='run#0', num_objects=12) Here, the ID for this run is given by MLFlow Tracking. On the other hand, the name is given by Ivory as a form of \" (run class name in lower case)#(run number) \".","title":"Default parameters"},{"location":"tutorial/core/#simple-literal-int-float-str","text":"Passing key-value pairs, you can change the parameters. run = experiment.create_run(fold=1) run.datasets.fold [9] 2020-05-29 20:43:42 ( 38.0ms ) python3 ( 6.22s ) 1 But the type of parameter must be equal, otherwise a ValueError is raised. run = experiment.create_run(fold=0.5) run.datasets.fold [10] 2020-05-29 20:43:42 ( 126ms ) python3 ( 6.34s ) ValueError: different type: <class 'int'> != <class 'float'> ValueError Traceback (most recent call last) <ipython-input-97-db3b6dd1af57> in <module> ----> 1 run = experiment.create_run(fold=0.5) 2 run.datasets.fold ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_run(self, args, name, **kwargs) 55 56 def create_run(self, args=None, name: str = \"run\", **kwargs): ---> 57 params, args = self.create_params(args, name, **kwargs) 58 run = instance.create_base_instance(params, name, self.source_name) 59 if self.tracker: ~\\Documents\\github\\ivory\\ivory\\core\\base.py in create_params(self, args, name, **kwargs) 51 params.update(default.get(name)) 52 update, args = utils.params.create_update(params[name], args, **kwargs) ---> 53 utils.params.update_dict(params[name], update) 54 return params, args 55 ~\\Documents\\github\\ivory\\ivory\\utils\\params.py in update_dict(org, update) 28 x[k] = value 29 elif type(x[k]) is not type(value) and x[k] is not None: ---> 30 raise ValueError(f\"different type: {type(x[k])} != {type(value)}\") 31 else: 32 if isinstance(x[k], dict):","title":"Simple literal (int, float, str)"},{"location":"tutorial/core/#list","text":"A list parameter can be overwritten by passing a new list. Off course you can change the lengh of the list. The original hidden_sizes was [10, 20] . run = experiment.create_run(hidden_sizes=[2, 3, 4]) run.model [11] 2020-05-29 20:43:42 ( 142ms ) python3 ( 6.48s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=2, bias=True) (1): Linear(in_features=2, out_features=3, bias=True) (2): Linear(in_features=3, out_features=4, bias=True) (3): Linear(in_features=4, out_features=1, bias=True) ) ) As an alternative way, you can use 0-indexed colon-notation like below. In this case, pass a dictionary to the first argument, because a colon ( : ) can't be in keyword arguments. params = { \"hidden_sizes:0\": 10, # Order is important. \"hidden_sizes:1\": 20, # Start from 0. \"hidden_sizes:2\": 30, # No skip. No reverse. } run = experiment.create_run(params) run.model [12] 2020-05-29 20:43:42 ( 45.0ms ) python3 ( 6.53s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=10, bias=True) (1): Linear(in_features=10, out_features=20, bias=True) (2): Linear(in_features=20, out_features=30, bias=True) (3): Linear(in_features=30, out_features=1, bias=True) ) ) Do you feel this method is unnecessary? This method is prepared for hyperparameter tuning . In some case, you may want to change a part of list. Use 0-indexed dot-notation . params = {\"hidden_sizes.1\": 5} run = experiment.create_run(params) run.model [13] 2020-05-29 20:43:42 ( 47.0ms ) python3 ( 6.58s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=20, bias=True) (1): Linear(in_features=20, out_features=5, bias=True) (2): Linear(in_features=5, out_features=1, bias=True) ) )","title":"List"},{"location":"tutorial/core/#duplicated-parameter-name","text":"Duplicated parameters with the same name are updated together. run = experiment.create_run(patience=5) run.scheduler.patience, run.early_stopping.patience [14] 2020-05-29 20:43:42 ( 45.0ms ) python3 ( 6.62s ) (5, 5) This behavior is natural to update the parameters with the same meaning. But in the above example, the patience of early stopping becomes equal to that of scheduler, so the scheduler doesn't work at all.","title":"Duplicated parameter name"},{"location":"tutorial/core/#scoping-by-dots","text":"To specify an individual parameter even if there are other parameters with the same name, use scoping by dots, or parameter fullname . params = {'scheduler.patience': 8, 'early_stopping.patience': 20} run = experiment.create_run(params) run.scheduler.patience, run.early_stopping.patience [15] 2020-05-29 20:43:42 ( 48.0ms ) python3 ( 6.67s ) (8, 20)","title":"Scoping by dots"},{"location":"tutorial/core/#object-type","text":"Parameters are not limited to a literal such as int , float , or str . For example, run = experiment.create_run() run.optimizer [16] 2020-05-29 20:43:42 ( 51.0ms ) python3 ( 6.72s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) run = experiment.create_run({'optimizer.class': 'torch.optim.Adam'}) run.optimizer [17] 2020-05-29 20:43:42 ( 52.0ms ) python3 ( 6.77s ) Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 0 ) This means that you can compare optimizer algorithms easily through multiple runs with minimul effort.","title":"Object type"},{"location":"tutorial/core/#creating-a-run-from-a-client","text":"In the above examples, we created runs using the experiment.create_run() method. In addtion, you can do the same thing by client.create_run() with an experiment name as the first argument. The following code blocks are equivalent. Code 1 experiment = client.create_experiment('torch') run = experiment.create_run(fold=3) Code 2 run = client.create_run('torch', fold=3)","title":"Creating a run from a client"},{"location":"tutorial/data/","text":"Set of Data classes Ivory uses four classes for data presentation: Data , Dataset , and Datasets . In this tutorial, we use the following Python module to explain them. File 5 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1) Data Class First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.79s ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a tuple of ( index , input , target ). This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [3] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.79s ) (0, array([3.666907 , 4.3155937], dtype=float32), array([15.907957], dtype=float32)) data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.80s ) (array([ 0, 10, 20]), array([[3.666907 , 4.3155937], [3.83303 , 2.7865264], [1.0791368, 4.0980954]], dtype=float32), array([[15.907957], [10.75362 ], [ 4.55457 ]], dtype=float32)) Dataset An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.80s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.80s ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get data from an dataset. use normal indexing dataset[0] # Integer index. [7] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.81s ) (0, array([3.666907 , 4.3155937], dtype=float32), array([15.907957], dtype=float32)) dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.81s ) (array([ 0, 16, 33]), array([[3.666907 , 4.3155937], [2.715153 , 2.9443884], [2.2333438, 3.3825603]], dtype=float32), array([[15.907957 ], [ 7.8278456], [ 7.6654544]], dtype=float32)) index, *_ = dataset[:] # Get all data. print(len(index)) index[:10] [9] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.82s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional and callable argument: transform . def transform(mode: str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.82s ) (0, array([7.333814, 8.631187], dtype=float32), array([31.815914], dtype=float32)) 2 * dataset[0][1], 2 * dataset[0][2] [11] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.83s ) (array([7.333814, 8.631187], dtype=float32), array([31.815914], dtype=float32)) Usually, we don't instantiate the Dataset class directly. Instead, the Datasets class create dataset instances. Datasets An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.83s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function that returns a Dataset instance. for mode, dataset in datasets.items(): print(mode, dataset) [13] 2020-05-29 20:43:42 ( 7.00ms ) python3 ( 6.84s ) train Dataset(mode='train', num_samples=600) val Dataset(mode='val', num_samples=200) test Dataset(mode='test', num_samples=200) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.84s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Set of Data classes</span></span></span>"},{"location":"tutorial/data/#set-of-data-classes","text":"Ivory uses four classes for data presentation: Data , Dataset , and Datasets . In this tutorial, we use the following Python module to explain them. File 5 rectangle/data.py from dataclasses import dataclass import numpy as np import ivory.core.data from ivory.utils.fold import kfold_split def create_data(num_samples=1000): xy = 4 * np.random.rand(num_samples, 2) + 1 xy = xy.astype(np.float32) dx = 0.1 * (np.random.rand(num_samples) - 0.5) dy = 0.1 * (np.random.rand(num_samples) - 0.5) z = ((xy[:, 0] + dx) * (xy[:, 1] + dy)).astype(np.float32) return xy, z @dataclass(repr=False) class Data(ivory.core.data.Data): n_splits: int = 4 DATA = create_data(1000) # Shared by each run. def init(self): # Called from self.__post_init__() self.input, self.target = self.DATA self.index = np.arange(len(self.input)) # Extra fold for test data. self.fold = kfold_split(self.input, n_splits=self.n_splits + 1) # Creating dummy test data just for demonstration. is_test = self.fold == self.n_splits # Use an extra fold. self.fold[is_test] = -1 # -1 for test data. self.target = self.target.copy() # n_splits may be different among runs. self.target[is_test] = np.nan # Delete target for test data. self.target = self.target.reshape(-1, 1) # (sample, class) def transform(mode, input, target): return input, target.reshape(-1)","title":"Set of Data classes"},{"location":"tutorial/data/#data-class","text":"First import the module and check the basic behavior. import rectangle.data data = rectangle.data.Data() data [2] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.79s ) Data(train_size=800, test_size=200) In the Data.init() method, we need to define 4 attributes: index : Index of samples. input : Input data. target : Target data. fold : Fold number. A Data.get() method returns a tuple of ( index , input , target ). This method is called from the Dataset instance when the dataset is indexed. data.get(0) # Integer index. [3] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.79s ) (0, array([3.666907 , 4.3155937], dtype=float32), array([15.907957], dtype=float32)) data.get([0, 10, 20]) # Array-like index. list or np.ndarray [4] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.80s ) (array([ 0, 10, 20]), array([[3.666907 , 4.3155937], [3.83303 , 2.7865264], [1.0791368, 4.0980954]], dtype=float32), array([[15.907957], [10.75362 ], [ 4.55457 ]], dtype=float32))","title":"Data Class"},{"location":"tutorial/data/#dataset","text":"An instance of the Dataset class holds one of train, validation, and test dataset. We use the Ivory's default Dataset class here instead of defining a subclass. The Dataset() initializer requires three arguments: A Data instance, mode , and fold . import ivory.core.data dataset = ivory.core.data.Dataset(data, 'train', 0) dataset [5] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.80s ) Dataset(mode='train', num_samples=600) ivory.core.data.Dataset(data, 'val', 1) # Another mode is `test`. [6] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.80s ) Dataset(mode='val', num_samples=200) As the Data class, the Dataset class has a init() method without any arguments and no returned value. You can define any code to modify data. To get data from an dataset. use normal indexing dataset[0] # Integer index. [7] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.81s ) (0, array([3.666907 , 4.3155937], dtype=float32), array([15.907957], dtype=float32)) dataset[[0, 10, 20]] # Array-like index. list or np.ndarray [8] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.81s ) (array([ 0, 16, 33]), array([[3.666907 , 4.3155937], [2.715153 , 2.9443884], [2.2333438, 3.3825603]], dtype=float32), array([[15.907957 ], [ 7.8278456], [ 7.6654544]], dtype=float32)) index, *_ = dataset[:] # Get all data. print(len(index)) index[:10] [9] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.82s ) 600 array([ 0, 2, 3, 4, 6, 7, 10, 12, 13, 15]) These data come from a subset of the data instance according to the mode and fold. The Dataset class takes an opptional and callable argument: transform . def transform(mode: str, input, target): if mode == 'train': input = input * 2 target = target * 2 return input, target dataset_transformed = ivory.core.data.Dataset(data, 'train', 0, transform) dataset_transformed[0] [10] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.82s ) (0, array([7.333814, 8.631187], dtype=float32), array([31.815914], dtype=float32)) 2 * dataset[0][1], 2 * dataset[0][2] [11] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.83s ) (array([7.333814, 8.631187], dtype=float32), array([31.815914], dtype=float32)) Usually, we don't instantiate the Dataset class directly. Instead, the Datasets class create dataset instances.","title":"Dataset"},{"location":"tutorial/data/#datasets","text":"An instance of the Datasets class holds a set of train, validation, and test dataset. We use the Ivory's default Datasets class here instead of defining a subclass. The Datasets() initializer requires three arguments: A Data instance, Dataset factory, and fold . from ivory.core.data import Dataset datasets = ivory.core.data.Datasets(data, Dataset, 0) datasets [12] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.83s ) Datasets(data=Data(train_size=800, test_size=200), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Note The second argument ( dataset ) is not a Dataset instance but its factory that returns a Dataset instance. It may be a Dataset class itself or any function that returns a Dataset instance. for mode, dataset in datasets.items(): print(mode, dataset) [13] 2020-05-29 20:43:42 ( 7.00ms ) python3 ( 6.84s ) train Dataset(mode='train', num_samples=600) val Dataset(mode='val', num_samples=200) test Dataset(mode='test', num_samples=200) Each dataset can be accessed by indexing or attributes. datasets['train'], datasets.val [14] 2020-05-29 20:43:42 ( 3.00ms ) python3 ( 6.84s ) (Dataset(mode='train', num_samples=600), Dataset(mode='val', num_samples=200)) Using the Datasets class, we can easily split a whole data stored in a Data instance into three train, validation, and test dataset.","title":"Datasets"},{"location":"tutorial/instance/","text":"Creating Instances In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning. Basic idea A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.86s ) Data(train_size=834, test_size=166) Here, the create_instance() function requires the second argument name to specify a key because the first argument params can have multiple keys. Note that we added a n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) # 5-fold for train and 1-fold for test. [3] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.86s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing a dictionary easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.87s ) Data(train_size=834, test_size=166) Hierarchal Structure Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.87s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Next, create a Datasets instance. doc = \"\"\" datasets: class: ivory.core.data.Datasets data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 \"\"\" create(doc, 'datasets') [6] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.88s ) Datasets(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Remember that the argument dataset for the Datasets class is not an instance but a callable that returns a Dataset instance (See the previous section ). To describe this behavior, we use a new def key instead of class to create a callable. Default Class In the above example, the two lines using an Ivory's original class seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-05-29 20:43:42 ( 69.0ms ) python3 ( 6.95s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator metrics --- ivory.sklearn.metrics.Metrics Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. import torch.utils.data doc = \"\"\" library: torch # Use default class for PyTorch. datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') isinstance(datasets.train, torch.utils.data.Dataset) [8] 2020-05-29 20:43:43 ( 7.00ms ) python3 ( 6.95s ) True Default Value If a callable has arguments with default value, you can use __default__ to get default values from the callable signature. doc = \"\"\" datasets: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') datasets.data.n_splits [9] 2020-05-29 20:43:43 ( 6.00ms ) python3 ( 6.96s ) 4","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Creating Instances</span></span></span>"},{"location":"tutorial/instance/#creating-instances","text":"In this tutorial, we will learn about Ivory's internal instance creation system. This is worth to understand the way of writing a YAML file for machine learning.","title":"Creating Instances"},{"location":"tutorial/instance/#basic-idea","text":"A syntax to create an instance is similar to a dictionary. example = ExampleCalss(arg1=123, arg2='abc') can be equivalently written as {'example': {'class': 'ExampleCalss', 'args1': 123, 'arg2': 'abc'}} Ivory excactly uses this relationship. from ivory.core.instance import create_instance params = {'data': {'class': 'rectangle.data.Data', 'n_splits': 5}} data = create_instance(params, 'data') data [2] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.86s ) Data(train_size=834, test_size=166) Here, the create_instance() function requires the second argument name to specify a key because the first argument params can have multiple keys. Note that we added a n_splits parameter which is different from the default value 5. Let's see unique values of fold. import numpy as np np.unique(data.fold) # 5-fold for train and 1-fold for test. [3] 2020-05-29 20:43:42 ( 4.00ms ) python3 ( 6.86s ) array([-1, 0, 1, 2, 3, 4], dtype=int8) For writing a dictionary easily, we use PyYAML library . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" data: class: rectangle.data.Data n_splits: 5 \"\"\" create(doc, 'data') [4] 2020-05-29 20:43:42 ( 6.00ms ) python3 ( 6.87s ) Data(train_size=834, test_size=166)","title":"Basic idea"},{"location":"tutorial/instance/#hierarchal-structure","text":"Next create a Dataset instance. The Dataset class requires a Data instance as the first argument so that the corresponding dictionary have hierarchal structure. doc = \"\"\" dataset: class: ivory.core.data.Dataset data: class: rectangle.data.Data n_splits: 5 mode: train fold: 0 \"\"\" create(doc, 'dataset') [5] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.87s ) Dataset(mode='train', num_samples=667) As you can see, Ivory can treat this hierarchal structure correctly. Next, create a Datasets instance. doc = \"\"\" datasets: class: ivory.core.data.Datasets data: class: rectangle.data.Data n_splits: 5 dataset: def: ivory.core.data.Dataset fold: 0 \"\"\" create(doc, 'datasets') [6] 2020-05-29 20:43:42 ( 5.00ms ) python3 ( 6.88s ) Datasets(data=Data(train_size=834, test_size=166), dataset=<class 'ivory.core.data.Dataset'>, fold=0) Remember that the argument dataset for the Datasets class is not an instance but a callable that returns a Dataset instance (See the previous section ). To describe this behavior, we use a new def key instead of class to create a callable.","title":"Hierarchal Structure"},{"location":"tutorial/instance/#default-class","text":"In the above example, the two lines using an Ivory's original class seems to be verbose a little bit. Ivory adds a default class if the class or def key is missing. Here is the list of default classes prepared by Ivory: from ivory.core.default import DEFAULT_CLASS for library, values in DEFAULT_CLASS.items(): print(f'library: {library}') for name, value in values.items(): print(\" \", name, \"---\", value) [7] 2020-05-29 20:43:42 ( 69.0ms ) python3 ( 6.95s ) library: core client --- ivory.core.client.Client tracker --- ivory.core.tracker.Tracker tuner --- ivory.core.tuner.Tuner experiment --- ivory.core.base.Experiment objective --- ivory.core.objective.Objective run --- ivory.core.run.Run task --- ivory.core.run.Task study --- ivory.core.run.Study dataset --- ivory.core.data.Dataset datasets --- ivory.core.data.Datasets results --- ivory.callbacks.results.Results metrics --- ivory.callbacks.metrics.Metrics monitor --- ivory.callbacks.monitor.Monitor early_stopping --- ivory.callbacks.early_stopping.EarlyStopping library: torch run --- ivory.torch.run.Run dataset --- ivory.torch.data.Dataset results --- ivory.torch.results.Results metrics --- ivory.torch.metrics.Metrics trainer --- ivory.torch.trainer.Trainer library: tensorflow run --- ivory.tensorflow.run.Run trainer --- ivory.tensorflow.trainer.Trainer library: sklearn estimator --- ivory.sklearn.estimator.Estimator metrics --- ivory.sklearn.metrics.Metrics Therefore, we can omit the lines using default classes like below. Here, the library key is used to overload the default classes of the ivory.core package by the specific library. import torch.utils.data doc = \"\"\" library: torch # Use default class for PyTorch. datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') isinstance(datasets.train, torch.utils.data.Dataset) [8] 2020-05-29 20:43:43 ( 7.00ms ) python3 ( 6.95s ) True","title":"Default Class"},{"location":"tutorial/instance/#default-value","text":"If a callable has arguments with default value, you can use __default__ to get default values from the callable signature. doc = \"\"\" datasets: data: class: rectangle.data.Data n_splits: __default__ dataset: fold: 0 \"\"\" datasets = create(doc, 'datasets') datasets.data.n_splits [9] 2020-05-29 20:43:43 ( 6.00ms ) python3 ( 6.96s ) 4","title":"Default Value"},{"location":"tutorial/library/","text":"Library Comparison So far, we have used PyTorch in this tutorial, but Ivory can perform machine learning with other libraries. PyTorch vs TensorFlow In this section we compare two libraries and show that using different libraries on the same problem is very easy. First define models: File 14 A Model definition in PyTorch (rectangle/torch.py) import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) File 15 A Model definition in TensorFlow (rectangle/tf.py) from tensorflow import keras from tensorflow.keras.layers import Dense def create_model(hidden_sizes): layers = [Dense(hidden_sizes[0], activation=\"relu\", input_shape=[2])] for hidden_size in hidden_sizes[1:]: layers.append(Dense(hidden_size, activation=\"relu\")) layers.append(Dense(1)) return keras.Sequential(layers) For simplicity, the TensorFlow model is defined by using the keras.Sequential() , so that we call the create_model() function to get the model. Next, parameter YAML files: File 16 A parameter YAML for PyTorch (torch.yml) library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 File 17 A parameter YAML for TensorFlow (tf.yml) library: tensorflow datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: call: rectangle.tf.create_model hidden_sizes: [20, 30] optimizer: class: tensorflow.keras.optimizers.SGD lr: 1e-3 scheduler: class: tensorflow.keras.callbacks.ReduceLROnPlateau factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 verbose: 2 Two YAML files are very similar. Note that model for TensorFlow is a function. A new call key is used. (But you can use class , too, or call for a class instead of class .) import ivory client = ivory.create_client(\"examples\") run_torch = client.create_run('torch') run_tf = client.create_run('tf') [2] 2020-05-29 20:48:02 ( 3.84s ) python3 ( 3.96s ) [I 200529 20:48:03 tracker:48] A new experiment created with name: 'torch' [I 200529 20:48:05 tracker:48] A new experiment created with name: 'tf' For comparison, equalize initial parameters. import torch for w_tf, w_torch in zip(run_tf.model.weights, run_torch.model.parameters()): w_torch.data = torch.tensor(w_tf.numpy().T) [3] 2020-05-29 20:48:06 ( 5.00ms ) python3 ( 3.97s ) Then, start the runs. run_torch.start() [4] 2020-05-29 20:48:06 ( 1.13s ) python3 ( 5.09s ) [epoch#0] loss=12.1 val_loss=7.269 lr=0.001 best [epoch#1] loss=7.045 val_loss=6.771 lr=0.001 best [epoch#2] loss=6.28 val_loss=5.985 lr=0.001 best [epoch#3] loss=5.486 val_loss=5.342 lr=0.001 best [epoch#4] loss=4.914 val_loss=4.61 lr=0.001 best [epoch#5] loss=4.111 val_loss=3.938 lr=0.001 best [epoch#6] loss=3.439 val_loss=3.193 lr=0.001 best [epoch#7] loss=2.748 val_loss=2.768 lr=0.001 best [epoch#8] loss=2.161 val_loss=2.052 lr=0.001 best [epoch#9] loss=1.704 val_loss=1.611 lr=0.001 best run_tf.start() [5] 2020-05-29 20:48:07 ( 2.47s ) python3 ( 7.56s ) c:\\users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_utils.py:1389: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(sample_weight_mode, collections.Mapping): c:\\users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_v2_utils.py:544: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(inputs, collections.Sequence): [epoch#0] loss=12 val_loss=7.315 lr=0.001 best [epoch#1] loss=6.947 val_loss=6.723 lr=0.001 best [epoch#2] loss=6.377 val_loss=6.073 lr=0.001 best [epoch#3] loss=5.599 val_loss=5.404 lr=0.001 best [epoch#4] loss=5.022 val_loss=5.171 lr=0.001 best [epoch#5] loss=4.228 val_loss=3.976 lr=0.001 best [epoch#6] loss=3.526 val_loss=3.256 lr=0.001 best [epoch#7] loss=2.874 val_loss=2.7 lr=0.001 best [epoch#8] loss=2.256 val_loss=1.969 lr=0.001 best [epoch#9] loss=1.639 val_loss=1.482 lr=0.001 best Visualize the results: import matplotlib.pyplot as plt # A helper function def plot(run): dataset = run.results.val plt.scatter(dataset.target.reshape(-1), dataset.output.reshape(-1)) plt.xlim(0, 25) plt.ylim(0, 25) plt.xlabel('Target values') plt.ylabel('Predicted values') for run in [run_tf, run_torch]: plot(run) [6] 2020-05-29 20:48:09 ( 193ms ) python3 ( 7.76s ) Actual outputs are like below: x = run_tf.datasets.test[:10][1] run_tf.model.predict(x) [7] 2020-05-29 20:48:10 ( 22.0ms ) python3 ( 7.78s ) array([[ 8.585037 ], [15.724426 ], [ 7.9694037], [ 3.641129 ], [ 7.052987 ], [11.224154 ], [11.498144 ], [ 7.587112 ], [ 7.2251005], [12.289631 ]], dtype=float32) run_torch.model(torch.tensor(x)) [8] 2020-05-29 20:48:10 ( 4.00ms ) python3 ( 7.78s ) tensor([[ 8.1715], [15.1154], [ 7.5640], [ 3.3569], [ 6.6244], [10.7503], [10.9642], [ 7.1714], [ 6.7782], [11.7748]], grad_fn=<AddmmBackward>) Scikit-learn RandomForestRegressor File 18 A parameter YAML for RandomForestRegressor (rfr.yml) library: sklearn datasets: data: class: rectangle.data.Data n_splits: 4 dataset: transform: rectangle.data.transform fold: 0 estimator: model: sklearn.ensemble.RandomForestRegressor n_estimators: 5 max_depth: 3 results: metrics: Here, dataset has the transform argument. This function reshapes the target array to match the shape for scikit-learn estimators. Code 3 rectangle.data.transform() def transform(mode, input, target): return input, target.reshape(-1) run = client.create_run('rfr') run.start() [11] 2020-05-29 20:48:10 ( 326ms ) python3 ( 8.13s ) [I 200529 20:48:10 tracker:48] A new experiment created with name: 'rfr' [run#0] mse=2.304 Here the RandomForestRegressor estimator has a criterion attributes, so the metrics are automatically calculated. plot(run) [12] 2020-05-29 20:48:10 ( 77.0ms ) python3 ( 8.20s ) Ridge File 19 A parameter YAML for Ridge (ridge.yml) library: sklearn datasets: data: class: rectangle.data.Data n_splits: 4 dataset: transform: rectangle.data.transform fold: 0 estimator: model: sklearn.linear_model.Ridge results: metrics: mse: mse_2: rectangle.metrics.mean_squared_error Because the Ridge estimator has no criterion attributes, you have to specify metrics if you need. A mse entry has empty ( None ) value. In this case, the default function ( sklearn.metrics.mean_squared_error() ) is chosen. On the other hand, mse_2 's value is a custom funtion: Code 4 rectangle.metrics.mean_squared_error() def mean_squared_error(true, pred): return np.mean((true - pred) ** 2) Because the rectangle.metrics.mean_squared_error() is the same as mse , this example is meaningless, but this functinality allows us to add arbitrary metrics. run = client.create_run('ridge') run.start() [15] 2020-05-29 20:48:10 ( 260ms ) python3 ( 8.48s ) [I 200529 20:48:10 tracker:48] A new experiment created with name: 'ridge' [run#0] mse=1.849 mse_2=1.849 plot(run) [16] 2020-05-29 20:48:10 ( 73.0ms ) python3 ( 8.55s ) LightGBM File 20 A parameter YAML for LightGBM (lgb.yml) datasets: data: class: rectangle.data.Data n_splits: 4 dataset: transform: rectangle.data.transform fold: 0 estimator: class: ivory.lightgbm.estimator.Regressor boosting_type: gbdt num_leaves: 10 learning_rate: 0.1 max_depth: 4 num_boost_round: 10 verbose_eval: 2 results: metrics: mse: run = client.create_run('lgb') run.start() [17] 2020-05-29 20:48:10 ( 297ms ) python3 ( 8.85s ) [I 200529 20:48:10 tracker:48] A new experiment created with name: 'lgb' [2] training's l2: 17.8727 valid_1's l2: 17.7218 [4] training's l2: 12.2834 valid_1's l2: 12.3772 [6] training's l2: 8.49069 valid_1's l2: 8.73011 [8] training's l2: 5.91768 valid_1's l2: 6.17581 [10] training's l2: 4.14308 valid_1's l2: 4.45932 [run#0] mse=4.459 plot(run) [18] 2020-05-29 20:48:11 ( 89.0ms ) python3 ( 8.94s )","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Library Comparison</span></span></span>"},{"location":"tutorial/library/#library-comparison","text":"So far, we have used PyTorch in this tutorial, but Ivory can perform machine learning with other libraries.","title":"Library Comparison"},{"location":"tutorial/library/#pytorch-vs-tensorflow","text":"In this section we compare two libraries and show that using different libraries on the same problem is very easy. First define models: File 14 A Model definition in PyTorch (rectangle/torch.py) import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) File 15 A Model definition in TensorFlow (rectangle/tf.py) from tensorflow import keras from tensorflow.keras.layers import Dense def create_model(hidden_sizes): layers = [Dense(hidden_sizes[0], activation=\"relu\", input_shape=[2])] for hidden_size in hidden_sizes[1:]: layers.append(Dense(hidden_size, activation=\"relu\")) layers.append(Dense(1)) return keras.Sequential(layers) For simplicity, the TensorFlow model is defined by using the keras.Sequential() , so that we call the create_model() function to get the model. Next, parameter YAML files: File 16 A parameter YAML for PyTorch (torch.yml) library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 File 17 A parameter YAML for TensorFlow (tf.yml) library: tensorflow datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: call: rectangle.tf.create_model hidden_sizes: [20, 30] optimizer: class: tensorflow.keras.optimizers.SGD lr: 1e-3 scheduler: class: tensorflow.keras.callbacks.ReduceLROnPlateau factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: mse batch_size: 10 epochs: 10 verbose: 2 Two YAML files are very similar. Note that model for TensorFlow is a function. A new call key is used. (But you can use class , too, or call for a class instead of class .) import ivory client = ivory.create_client(\"examples\") run_torch = client.create_run('torch') run_tf = client.create_run('tf') [2] 2020-05-29 20:48:02 ( 3.84s ) python3 ( 3.96s ) [I 200529 20:48:03 tracker:48] A new experiment created with name: 'torch' [I 200529 20:48:05 tracker:48] A new experiment created with name: 'tf' For comparison, equalize initial parameters. import torch for w_tf, w_torch in zip(run_tf.model.weights, run_torch.model.parameters()): w_torch.data = torch.tensor(w_tf.numpy().T) [3] 2020-05-29 20:48:06 ( 5.00ms ) python3 ( 3.97s ) Then, start the runs. run_torch.start() [4] 2020-05-29 20:48:06 ( 1.13s ) python3 ( 5.09s ) [epoch#0] loss=12.1 val_loss=7.269 lr=0.001 best [epoch#1] loss=7.045 val_loss=6.771 lr=0.001 best [epoch#2] loss=6.28 val_loss=5.985 lr=0.001 best [epoch#3] loss=5.486 val_loss=5.342 lr=0.001 best [epoch#4] loss=4.914 val_loss=4.61 lr=0.001 best [epoch#5] loss=4.111 val_loss=3.938 lr=0.001 best [epoch#6] loss=3.439 val_loss=3.193 lr=0.001 best [epoch#7] loss=2.748 val_loss=2.768 lr=0.001 best [epoch#8] loss=2.161 val_loss=2.052 lr=0.001 best [epoch#9] loss=1.704 val_loss=1.611 lr=0.001 best run_tf.start() [5] 2020-05-29 20:48:07 ( 2.47s ) python3 ( 7.56s ) c:\\users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_utils.py:1389: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(sample_weight_mode, collections.Mapping): c:\\users\\daizu\\miniconda3\\envs\\daizu\\lib\\site-packages\\tensorflow_core\\python\\keras\\engine\\training_v2_utils.py:544: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working if isinstance(inputs, collections.Sequence): [epoch#0] loss=12 val_loss=7.315 lr=0.001 best [epoch#1] loss=6.947 val_loss=6.723 lr=0.001 best [epoch#2] loss=6.377 val_loss=6.073 lr=0.001 best [epoch#3] loss=5.599 val_loss=5.404 lr=0.001 best [epoch#4] loss=5.022 val_loss=5.171 lr=0.001 best [epoch#5] loss=4.228 val_loss=3.976 lr=0.001 best [epoch#6] loss=3.526 val_loss=3.256 lr=0.001 best [epoch#7] loss=2.874 val_loss=2.7 lr=0.001 best [epoch#8] loss=2.256 val_loss=1.969 lr=0.001 best [epoch#9] loss=1.639 val_loss=1.482 lr=0.001 best Visualize the results: import matplotlib.pyplot as plt # A helper function def plot(run): dataset = run.results.val plt.scatter(dataset.target.reshape(-1), dataset.output.reshape(-1)) plt.xlim(0, 25) plt.ylim(0, 25) plt.xlabel('Target values') plt.ylabel('Predicted values') for run in [run_tf, run_torch]: plot(run) [6] 2020-05-29 20:48:09 ( 193ms ) python3 ( 7.76s ) Actual outputs are like below: x = run_tf.datasets.test[:10][1] run_tf.model.predict(x) [7] 2020-05-29 20:48:10 ( 22.0ms ) python3 ( 7.78s ) array([[ 8.585037 ], [15.724426 ], [ 7.9694037], [ 3.641129 ], [ 7.052987 ], [11.224154 ], [11.498144 ], [ 7.587112 ], [ 7.2251005], [12.289631 ]], dtype=float32) run_torch.model(torch.tensor(x)) [8] 2020-05-29 20:48:10 ( 4.00ms ) python3 ( 7.78s ) tensor([[ 8.1715], [15.1154], [ 7.5640], [ 3.3569], [ 6.6244], [10.7503], [10.9642], [ 7.1714], [ 6.7782], [11.7748]], grad_fn=<AddmmBackward>)","title":"PyTorch vs TensorFlow"},{"location":"tutorial/library/#scikit-learn","text":"","title":"Scikit-learn"},{"location":"tutorial/library/#randomforestregressor","text":"File 18 A parameter YAML for RandomForestRegressor (rfr.yml) library: sklearn datasets: data: class: rectangle.data.Data n_splits: 4 dataset: transform: rectangle.data.transform fold: 0 estimator: model: sklearn.ensemble.RandomForestRegressor n_estimators: 5 max_depth: 3 results: metrics: Here, dataset has the transform argument. This function reshapes the target array to match the shape for scikit-learn estimators. Code 3 rectangle.data.transform() def transform(mode, input, target): return input, target.reshape(-1) run = client.create_run('rfr') run.start() [11] 2020-05-29 20:48:10 ( 326ms ) python3 ( 8.13s ) [I 200529 20:48:10 tracker:48] A new experiment created with name: 'rfr' [run#0] mse=2.304 Here the RandomForestRegressor estimator has a criterion attributes, so the metrics are automatically calculated. plot(run) [12] 2020-05-29 20:48:10 ( 77.0ms ) python3 ( 8.20s )","title":"RandomForestRegressor"},{"location":"tutorial/library/#ridge","text":"File 19 A parameter YAML for Ridge (ridge.yml) library: sklearn datasets: data: class: rectangle.data.Data n_splits: 4 dataset: transform: rectangle.data.transform fold: 0 estimator: model: sklearn.linear_model.Ridge results: metrics: mse: mse_2: rectangle.metrics.mean_squared_error Because the Ridge estimator has no criterion attributes, you have to specify metrics if you need. A mse entry has empty ( None ) value. In this case, the default function ( sklearn.metrics.mean_squared_error() ) is chosen. On the other hand, mse_2 's value is a custom funtion: Code 4 rectangle.metrics.mean_squared_error() def mean_squared_error(true, pred): return np.mean((true - pred) ** 2) Because the rectangle.metrics.mean_squared_error() is the same as mse , this example is meaningless, but this functinality allows us to add arbitrary metrics. run = client.create_run('ridge') run.start() [15] 2020-05-29 20:48:10 ( 260ms ) python3 ( 8.48s ) [I 200529 20:48:10 tracker:48] A new experiment created with name: 'ridge' [run#0] mse=1.849 mse_2=1.849 plot(run) [16] 2020-05-29 20:48:10 ( 73.0ms ) python3 ( 8.55s )","title":"Ridge"},{"location":"tutorial/library/#lightgbm","text":"File 20 A parameter YAML for LightGBM (lgb.yml) datasets: data: class: rectangle.data.Data n_splits: 4 dataset: transform: rectangle.data.transform fold: 0 estimator: class: ivory.lightgbm.estimator.Regressor boosting_type: gbdt num_leaves: 10 learning_rate: 0.1 max_depth: 4 num_boost_round: 10 verbose_eval: 2 results: metrics: mse: run = client.create_run('lgb') run.start() [17] 2020-05-29 20:48:10 ( 297ms ) python3 ( 8.85s ) [I 200529 20:48:10 tracker:48] A new experiment created with name: 'lgb' [2] training's l2: 17.8727 valid_1's l2: 17.7218 [4] training's l2: 12.2834 valid_1's l2: 12.3772 [6] training's l2: 8.49069 valid_1's l2: 8.73011 [8] training's l2: 5.91768 valid_1's l2: 6.17581 [10] training's l2: 4.14308 valid_1's l2: 4.45932 [run#0] mse=4.459 plot(run) [18] 2020-05-29 20:48:11 ( 89.0ms ) python3 ( 8.94s )","title":"LightGBM"},{"location":"tutorial/model/","text":"Model Structure Model We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 6 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') model [2] 2020-05-29 20:43:50 ( 8.00ms ) python3 ( 14.6s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. import torch index, input, target = datasets.train[:5] input [3] 2020-05-29 20:43:50 ( 5.00ms ) python3 ( 14.6s ) array([[3.666907 , 4.3155937], [3.555059 , 4.9251103], [3.1595163, 4.4133806], [1.1663918, 4.6412845], [3.914458 , 1.5501423]], dtype=float32) model(torch.tensor(input)) [4] 2020-05-29 20:43:50 ( 4.00ms ) python3 ( 14.6s ) tensor([[-0.4544], [-0.4798], [-0.4172], [-0.2904], [-0.3174]], grad_fn=<AddmmBackward>) Optimizer To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-05-29 20:43:50 ( 4.00ms ) python3 ( 14.6s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the first argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-05-29 20:43:50 ( 4.00ms ) python3 ( 14.6s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in the globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method. Scheduler A scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-05-29 20:43:50 ( 5.00ms ) python3 ( 14.6s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x23c8f5c7f88> If a $ -notation has no suffix, the value becomes its key itself. The following two examples are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Model Structure</span></span></span>"},{"location":"tutorial/model/#model-structure","text":"","title":"Model Structure"},{"location":"tutorial/model/#model","text":"We have prepared a DataLoaders instance for PyTorch. Now define a MLP model that works with the DataLoaders . The model is defined in rectangle/torch.py File 6 rectangle/torch.py import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self, hidden_sizes): super().__init__() layers = [] for in_features, out_features in zip([2] + hidden_sizes, hidden_sizes + [1]): layers.append(nn.Linear(in_features, out_features)) self.layers = nn.ModuleList(layers) def forward(self, x): for layer in self.layers[:-1]: x = F.relu(layer(x)) return self.layers[-1](x) We again use Ivory's instance creation system . import yaml # A helper function. def create(doc, name, **kwargs): params = yaml.safe_load(doc) return create_instance(params, name, **kwargs) doc = \"\"\" library: torch datasets: data: class: rectangle.data.Data n_splits: 5 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [3, 4, 5] \"\"\" datasets = create(doc, 'datasets') model = create(doc, 'model') model [2] 2020-05-29 20:43:50 ( 8.00ms ) python3 ( 14.6s ) Model( (layers): ModuleList( (0): Linear(in_features=2, out_features=3, bias=True) (1): Linear(in_features=3, out_features=4, bias=True) (2): Linear(in_features=4, out_features=5, bias=True) (3): Linear(in_features=5, out_features=1, bias=True) ) ) We can uses this model as usual. import torch index, input, target = datasets.train[:5] input [3] 2020-05-29 20:43:50 ( 5.00ms ) python3 ( 14.6s ) array([[3.666907 , 4.3155937], [3.555059 , 4.9251103], [3.1595163, 4.4133806], [1.1663918, 4.6412845], [3.914458 , 1.5501423]], dtype=float32) model(torch.tensor(input)) [4] 2020-05-29 20:43:50 ( 4.00ms ) python3 ( 14.6s ) tensor([[-0.4544], [-0.4798], [-0.4172], [-0.2904], [-0.3174]], grad_fn=<AddmmBackward>)","title":"Model"},{"location":"tutorial/model/#optimizer","text":"To train a model, we need an optimizer. For example import torch.optim optimizer = torch.optim.SGD(params=model.parameters(), lr=1e-3) optimizer [5] 2020-05-29 20:43:50 ( 4.00ms ) python3 ( 14.6s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) Now try to describe this optimizer in a dictionary style. However, the first argument params is not a simple literal but an iterable of learnable parameters. Ivory provides \" $ -notation \" to tackle this problem. doc = \"\"\" optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 \"\"\" optimizer = create(doc, 'optimizer', globals={'model': model}) optimizer [6] 2020-05-29 20:43:50 ( 4.00ms ) python3 ( 14.6s ) SGD ( Parameter Group 0 dampening: 0 lr: 0.001 momentum: 0 nesterov: False weight_decay: 0 ) A \" $ \" is a starting point to refer other instance stored in the globals dictionary. In this case, $.model is replaced by the model instance in globals , then .parameters() invokes a call of the model.parameters() method.","title":"Optimizer"},{"location":"tutorial/model/#scheduler","text":"A scheduler controls the learning rate of an optimizer. doc = \"\"\" scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 \"\"\" scheduler = create(doc, 'scheduler', globals={'optimizer': optimizer}) scheduler [7] 2020-05-29 20:43:50 ( 5.00ms ) python3 ( 14.6s ) <torch.optim.lr_scheduler.ReduceLROnPlateau at 0x23c8f5c7f88> If a $ -notation has no suffix, the value becomes its key itself. The following two examples are equivalent: optimizer: $ optimizer: $.optimizer Now we have had both data and model.","title":"Scheduler"},{"location":"tutorial/task/","text":"Multiple Runs Task Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-05-29 20:43:50 ( 43.0ms ) python3 ( 14.7s ) [I 200529 20:43:50 tracker:48] A new experiment created with name: 'torch' Task(id='9350abd9b69c4e678dc3d2242d84984b', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library. Product The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-05-29 20:43:50 ( 41.0ms ) python3 ( 14.8s ) <generator object Task.product at 0x0000023C8D6CE3C8> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-29 20:43:50 ( 504ms ) python3 ( 15.3s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-05-29 20:43:51 ( 603ms ) python3 ( 15.9s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7 Chain The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-05-29 20:43:52 ( 62.0ms ) python3 ( 15.9s ) <generator object Task.chain at 0x0000023C8D6CEA48> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-05-29 20:43:52 ( 904ms ) python3 ( 16.8s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-05-29 20:43:53 ( 1.06s ) python3 ( 17.9s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5 Range Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-05-29 20:43:54 ( 5.00ms ) python3 ( 17.9s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Multiple Runs</span></span></span>"},{"location":"tutorial/task/#multiple-runs","text":"","title":"Multiple Runs"},{"location":"tutorial/task/#task","text":"Ivory implements a special run type called Task which controls multiple nested runs. A task is useful for parameter search or cross validation. import ivory client = ivory.create_client(\"examples\") # Set the working directory task = client.create_task('torch') # Or, experiment.create_task() task [3] 2020-05-29 20:43:50 ( 43.0ms ) python3 ( 14.7s ) [I 200529 20:43:50 tracker:48] A new experiment created with name: 'torch' Task(id='9350abd9b69c4e678dc3d2242d84984b', name='task#0', num_objects=3) The Task class has two methods to generate multiple runs: Task.prodcut() and Task.chain() . These two methods have the same functionality as itertools of Python starndard library.","title":"Task"},{"location":"tutorial/task/#product","text":"The Task.prodcut() makes an iterator that returns runs from cartesian product of input parameters. task = client.create_task('torch') # verbose=0: No progress bar. runs = task.product(fold=range(2), factor=[0.5, 0.7], verbose=0) runs [4] 2020-05-29 20:43:50 ( 41.0ms ) python3 ( 14.8s ) <generator object Task.product at 0x0000023C8D6CE3C8> for run in runs: pass # Do somthing, for example, run.start() [5] 2020-05-29 20:43:50 ( 504ms ) python3 ( 15.3s ) [run#0] fold=0 factor=0.5 [run#1] fold=0 factor=0.7 [run#2] fold=1 factor=0.5 [run#3] fold=1 factor=0.7 You can specify other parameters which don't change during iteration. task = client.create_task('torch') runs = task.product(fold=range(2), factor=[0.5, 0.7], lr=1e-4, verbose=0) for run in runs: pass # Do somthing, for example, run.start() [6] 2020-05-29 20:43:51 ( 603ms ) python3 ( 15.9s ) [run#4] lr=0.0001 fold=0 factor=0.5 [run#5] lr=0.0001 fold=0 factor=0.7 [run#6] lr=0.0001 fold=1 factor=0.5 [run#7] lr=0.0001 fold=1 factor=0.7","title":"Product"},{"location":"tutorial/task/#chain","text":"The Task.chain() maks an iterator that returns runs from the first input paramter until it is exhausted, then proceeds to the next parameter, until all of the parameters are exhausted. Other parameters have default values if they don't be specified by additional key-value pairs. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], batch_size=32, use_best_param=False, verbose=0) runs [7] 2020-05-29 20:43:52 ( 62.0ms ) python3 ( 15.9s ) <generator object Task.chain at 0x0000023C8D6CEA48> for run in runs: pass # Do somthing, for example, run.start() [8] 2020-05-29 20:43:52 ( 904ms ) python3 ( 16.8s ) [run#8] batch_size=32 fold=0 [run#9] batch_size=32 fold=1 [run#10] batch_size=32 factor=0.5 [run#11] batch_size=32 factor=0.7 [run#12] batch_size=32 lr=0.0001 [run#13] batch_size=32 lr=0.001 The use_best_param keyword argument is useful for dynamic updating of parameters. If True (default), the parameter which got the best score is used during the following iterations. task = client.create_task('torch') runs = task.chain( fold=range(2), factor=[0.5, 0.7], lr=[1e-4, 1e-3], use_best_param=True, verbose=0) for run in runs: pass # Do somthing, for example, run.start() # We do nothing, so the first values are used. [9] 2020-05-29 20:43:53 ( 1.06s ) python3 ( 17.9s ) [run#14] fold=0 [run#15] fold=1 [run#16] factor=0.5 fold=0 [run#17] factor=0.7 fold=0 [run#18] lr=0.0001 fold=0 factor=0.5 [run#19] lr=0.001 fold=0 factor=0.5","title":"Chain"},{"location":"tutorial/task/#range","text":"Ivory provides the ivory.utils.range.Range class for parameter ranging. This class can be used as the standard range , but more flexible, especially for the float type. from ivory.utils.range import Range list(Range(6)) # The stop value is included. [10] 2020-05-29 20:43:54 ( 5.00ms ) python3 ( 17.9s ) [0, 1, 2, 3, 4, 5, 6] list(Range(3, 6)) # Start and stop. [11] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [3, 4, 5, 6] list(Range(3, 10, 2)) # Step size. [12] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [3, 5, 7, 9] list(Range(3, 10, num=4)) # Sampling size. [13] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [3, 5, 8, 10] list(Range(0.0, 1.0, 0.25)) # float type. [14] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(0.0, 1.0, num=5)) # Sampling size [15] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range(1e-3, 1e2, num=6, log=True)) # Log scale [16] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0] A Range instance can be created from a string. list(Range('3-7')) # <start>-<stop> [17] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [3, 4, 5, 6, 7] list(Range('3-7-2')) # <start>-<stop>-<step> [18] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [3, 5, 7] list(Range('0.0-1.0:5')) # <start>-<stop>:<num> [19] 2020-05-29 20:43:54 ( 4.00ms ) python3 ( 17.9s ) [0.0, 0.25, 0.5, 0.75, 1.0] list(Range('1e-3_1e2:6.log')) # '_' instead of '-', log scale [20] 2020-05-29 20:43:54 ( 3.00ms ) python3 ( 17.9s ) [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]","title":"Range"},{"location":"tutorial/tracking/","text":"Tracking Runs with Ivory First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch', fold=2) run.start() [3] 2020-05-29 20:43:54 ( 1.18s ) python3 ( 19.2s ) [I 200529 20:43:54 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=19.87 val_loss=9.595 lr=0.001 best [epoch#1] loss=7.498 val_loss=8.002 lr=0.001 best [epoch#2] loss=6.726 val_loss=7.466 lr=0.001 best [epoch#3] loss=6.202 val_loss=6.626 lr=0.001 best [epoch#4] loss=5.727 val_loss=5.981 lr=0.001 best [epoch#5] loss=5.005 val_loss=5.339 lr=0.001 best [epoch#6] loss=4.28 val_loss=4.459 lr=0.001 best [epoch#7] loss=3.579 val_loss=3.76 lr=0.001 best [epoch#8] loss=2.979 val_loss=2.981 lr=0.001 best [epoch#9] loss=2.376 val_loss=2.392 lr=0.001 best run = client.create_run('torch', fold=3) run.start('both') [4] 2020-05-29 20:43:55 ( 1.25s ) python3 ( 20.4s ) [epoch#0] loss=21.01 val_loss=6.255 lr=0.001 best [epoch#1] loss=7.532 val_loss=5.46 lr=0.001 best [epoch#2] loss=6.645 val_loss=4.918 lr=0.001 best [epoch#3] loss=5.687 val_loss=4.052 lr=0.001 best [epoch#4] loss=4.72 val_loss=3.222 lr=0.001 best [epoch#5] loss=3.689 val_loss=2.5 lr=0.001 best [epoch#6] loss=2.791 val_loss=1.888 lr=0.001 best [epoch#7] loss=1.992 val_loss=1.221 lr=0.001 best [epoch#8] loss=1.429 val_loss=1.02 lr=0.001 best [epoch#9] loss=1.008 val_loss=0.6052 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: pass # Do something [5] 2020-05-29 20:43:56 ( 431ms ) python3 ( 20.8s ) [run#2] fold=0 [run#3] fold=1 [run#4] fold=2 task = client.create_task('torch') runs = task.product(n_splits=[3, 4], verbose=0) for run in runs: pass # Do something [6] 2020-05-29 20:43:57 ( 334ms ) python3 ( 21.2s ) [run#5] n_splits=3 [run#6] n_splits=4 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: pass # Do something [7] 2020-05-29 20:43:57 ( 624ms ) python3 ( 21.8s ) [run#7] lr=0.0001 [run#8] lr=0.001 [run#9] batch_size=16 lr=0.0001 [run#10] batch_size=32 lr=0.0001 Tracking Interface Search methods The client.search_run_ids() method makes an iterator that returns RunIDs of runs. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_run_ids('torch') print_run_info(run_ids) [8] 2020-05-29 20:43:58 ( 100ms ) python3 ( 21.9s ) 4a7c8 run#10 ced0d run#9 45b03 run#8 1c95f run#7 9d9bd task#2 f36cf run#6 45350 run#5 57dad task#1 1580d run#4 cbb58 run#3 7c8e0 run#2 70558 task#0 9541d run#1 b8062 run#0 You can filtering runs by passing keyword arguments. run_ids = client.search_run_ids('torch', lr=1e-4, batch_size=32) print_run_info(run_ids) [9] 2020-05-29 20:43:58 ( 213ms ) python3 ( 22.1s ) 4a7c8 run#10 The client.search_nested_run_ids() method makes an iterator that returns RunIDs of runs that have a parent run. Optionally, you can filter runs. run_ids = client.search_nested_run_ids('torch') print_run_info(run_ids) [10] 2020-05-29 20:43:58 ( 73.0ms ) python3 ( 22.2s ) 4a7c8 run#10 ced0d run#9 45b03 run#8 1c95f run#7 f36cf run#6 45350 run#5 1580d run#4 cbb58 run#3 7c8e0 run#2 Note that the run#0 isn't returned because it was created by client.create_run() directly. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are three tasks we made above. run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [11] 2020-05-29 20:43:58 ( 46.0ms ) python3 ( 22.2s ) 9d9bd task#2 57dad task#1 70558 task#0 Get methods The client.get_run_id() returns a RunID of runs you select by run name. run_id = client.get_run_id('torch', run=0) print_run_info([run_id]) [12] 2020-05-29 20:43:58 ( 38.0ms ) python3 ( 22.3s ) b8062 run#0 The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(1, 3)) print_run_info(run_ids) [13] 2020-05-29 20:43:58 ( 72.0ms ) python3 ( 22.3s ) 57dad task#1 9d9bd task#2 The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(2)) print_run_info(run_ids) [14] 2020-05-29 20:43:58 ( 140ms ) python3 ( 22.5s ) 1580d run#4 cbb58 run#3 7c8e0 run#2 f36cf run#6 45350 run#5 The client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=5) print_run_info([run_id]) [15] 2020-05-29 20:43:58 ( 40.0ms ) python3 ( 22.5s ) 57dad task#1 Once you got RunID(s), you can load a run, a member of a run, or results collection. See the quickstart .","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking Runs with Ivory</span></span></span>"},{"location":"tutorial/tracking/#tracking-runs-with-ivory","text":"First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch', fold=2) run.start() [3] 2020-05-29 20:43:54 ( 1.18s ) python3 ( 19.2s ) [I 200529 20:43:54 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=19.87 val_loss=9.595 lr=0.001 best [epoch#1] loss=7.498 val_loss=8.002 lr=0.001 best [epoch#2] loss=6.726 val_loss=7.466 lr=0.001 best [epoch#3] loss=6.202 val_loss=6.626 lr=0.001 best [epoch#4] loss=5.727 val_loss=5.981 lr=0.001 best [epoch#5] loss=5.005 val_loss=5.339 lr=0.001 best [epoch#6] loss=4.28 val_loss=4.459 lr=0.001 best [epoch#7] loss=3.579 val_loss=3.76 lr=0.001 best [epoch#8] loss=2.979 val_loss=2.981 lr=0.001 best [epoch#9] loss=2.376 val_loss=2.392 lr=0.001 best run = client.create_run('torch', fold=3) run.start('both') [4] 2020-05-29 20:43:55 ( 1.25s ) python3 ( 20.4s ) [epoch#0] loss=21.01 val_loss=6.255 lr=0.001 best [epoch#1] loss=7.532 val_loss=5.46 lr=0.001 best [epoch#2] loss=6.645 val_loss=4.918 lr=0.001 best [epoch#3] loss=5.687 val_loss=4.052 lr=0.001 best [epoch#4] loss=4.72 val_loss=3.222 lr=0.001 best [epoch#5] loss=3.689 val_loss=2.5 lr=0.001 best [epoch#6] loss=2.791 val_loss=1.888 lr=0.001 best [epoch#7] loss=1.992 val_loss=1.221 lr=0.001 best [epoch#8] loss=1.429 val_loss=1.02 lr=0.001 best [epoch#9] loss=1.008 val_loss=0.6052 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: pass # Do something [5] 2020-05-29 20:43:56 ( 431ms ) python3 ( 20.8s ) [run#2] fold=0 [run#3] fold=1 [run#4] fold=2 task = client.create_task('torch') runs = task.product(n_splits=[3, 4], verbose=0) for run in runs: pass # Do something [6] 2020-05-29 20:43:57 ( 334ms ) python3 ( 21.2s ) [run#5] n_splits=3 [run#6] n_splits=4 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: pass # Do something [7] 2020-05-29 20:43:57 ( 624ms ) python3 ( 21.8s ) [run#7] lr=0.0001 [run#8] lr=0.001 [run#9] batch_size=16 lr=0.0001 [run#10] batch_size=32 lr=0.0001","title":"Tracking Runs with Ivory"},{"location":"tutorial/tracking/#tracking-interface","text":"","title":"Tracking Interface"},{"location":"tutorial/tracking/#search-methods","text":"The client.search_run_ids() method makes an iterator that returns RunIDs of runs. # A helper function def print_run_info(run_ids): for run_id in run_ids: print(run_id[:5], client.get_run_name(run_id)) run_ids = client.search_run_ids('torch') print_run_info(run_ids) [8] 2020-05-29 20:43:58 ( 100ms ) python3 ( 21.9s ) 4a7c8 run#10 ced0d run#9 45b03 run#8 1c95f run#7 9d9bd task#2 f36cf run#6 45350 run#5 57dad task#1 1580d run#4 cbb58 run#3 7c8e0 run#2 70558 task#0 9541d run#1 b8062 run#0 You can filtering runs by passing keyword arguments. run_ids = client.search_run_ids('torch', lr=1e-4, batch_size=32) print_run_info(run_ids) [9] 2020-05-29 20:43:58 ( 213ms ) python3 ( 22.1s ) 4a7c8 run#10 The client.search_nested_run_ids() method makes an iterator that returns RunIDs of runs that have a parent run. Optionally, you can filter runs. run_ids = client.search_nested_run_ids('torch') print_run_info(run_ids) [10] 2020-05-29 20:43:58 ( 73.0ms ) python3 ( 22.2s ) 4a7c8 run#10 ced0d run#9 45b03 run#8 1c95f run#7 f36cf run#6 45350 run#5 1580d run#4 cbb58 run#3 7c8e0 run#2 Note that the run#0 isn't returned because it was created by client.create_run() directly. The client.search_parent_run_ids() method makes an iterator that returns RunIDs of runs that have nested runs. In this case, parent runs are three tasks we made above. run_ids = client.search_parent_run_ids('torch') print_run_info(run_ids) [11] 2020-05-29 20:43:58 ( 46.0ms ) python3 ( 22.2s ) 9d9bd task#2 57dad task#1 70558 task#0","title":"Search methods"},{"location":"tutorial/tracking/#get-methods","text":"The client.get_run_id() returns a RunID of runs you select by run name. run_id = client.get_run_id('torch', run=0) print_run_info([run_id]) [12] 2020-05-29 20:43:58 ( 38.0ms ) python3 ( 22.3s ) b8062 run#0 The client.get_run_ids() makes an iterator that returns RunIDs of runs you select by run names. run_ids = client.get_run_ids('torch', task=range(1, 3)) print_run_info(run_ids) [13] 2020-05-29 20:43:58 ( 72.0ms ) python3 ( 22.3s ) 57dad task#1 9d9bd task#2 The client.get_nested_run_ids() makes an iterator that returns RunIDs of runs that have a parent you select by run names. run_ids = client.get_nested_run_ids('torch', task=range(2)) print_run_info(run_ids) [14] 2020-05-29 20:43:58 ( 140ms ) python3 ( 22.5s ) 1580d run#4 cbb58 run#3 7c8e0 run#2 f36cf run#6 45350 run#5 The client.get_parent_run_id() returns a RunID of a run that is refered by a nested run. run_id = client.get_parent_run_id('torch', run=5) print_run_info([run_id]) [15] 2020-05-29 20:43:58 ( 40.0ms ) python3 ( 22.5s ) 57dad task#1 Once you got RunID(s), you can load a run, a member of a run, or results collection. See the quickstart .","title":"Get methods"},{"location":"tutorial/training/","text":"Training a Model First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 \"\"\") params [2] 2020-05-29 20:43:58 ( 8.00ms ) python3 ( 22.5s ) {'library': 'torch', 'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': None, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'batch_size': 10, 'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-05-29 20:43:58 ( 6.00ms ) python3 ( 22.5s ) ['datasets', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer'] Callbacks Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-05-29 20:43:58 ( 34.0ms ) python3 ( 22.6s ) [datasets] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin Metrics The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-05-29 20:43:58 ( 4.00ms ) python3 ( 22.6s ) Metrics() Monitor The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-29 20:43:58 ( 4.00ms ) python3 ( 22.6s ) Monitor(metric='val_loss', mode='min') EarlyStopping The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-29 20:43:58 ( 3.00ms ) python3 ( 22.6s ) EarlyStopping(patience=10, wait=0) Trainer The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-29 20:43:58 ( 3.00ms ) python3 ( 22.6s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, loss=<function mse_loss at 0x0000023AF75E7288>, batch_size=10, shuffle=True, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch') Using a Trainer A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-29 20:43:58 ( 575ms ) python3 ( 23.2s ) [epoch#0] loss=15.02 val_loss=7.922 lr=0.001 best [epoch#1] loss=6.747 val_loss=7.868 lr=0.001 best [epoch#2] loss=5.416 val_loss=4.412 lr=0.001 best [epoch#3] loss=3.881 val_loss=3.042 lr=0.001 best [epoch#4] loss=2.763 val_loss=1.939 lr=0.001 best [epoch#5] loss=1.717 val_loss=1.248 lr=0.001 best [epoch#6] loss=1.179 val_loss=0.8376 lr=0.001 best [epoch#7] loss=0.8795 val_loss=0.7485 lr=0.001 best [epoch#8] loss=0.7128 val_loss=0.5383 lr=0.001 best [epoch#9] loss=0.6385 val_loss=0.5081 lr=0.001 best You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-29 20:43:59 ( 291ms ) python3 ( 23.5s ) [epoch#10] loss=0.6038 val_loss=0.454 lr=0.001 best [epoch#11] loss=0.5686 val_loss=0.4361 lr=0.001 best [epoch#12] loss=0.5087 val_loss=0.4168 lr=0.001 best [epoch#13] loss=0.4229 val_loss=0.3551 lr=0.001 best [epoch#14] loss=0.3845 val_loss=0.3159 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch. Callbacks after Training After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-29 20:43:59 ( 5.00ms ) python3 ( 23.5s ) Metrics(loss=0.3845, val_loss=0.3159, lr=0.001) run.metrics.history.val_loss # Metrics history. [12] 2020-05-29 20:43:59 ( 5.00ms ) python3 ( 23.5s ) {0: 7.9218872547149655, 1: 7.8684142351150514, 2: 4.411666941642761, 3: 3.0417939007282255, 4: 1.9388263553380967, 5: 1.2481913983821868, 6: 0.8376013934612274, 7: 0.748484893143177, 8: 0.5383104585111141, 9: 0.5081345245242119, 10: 0.45400402694940567, 11: 0.43608351349830626, 12: 0.41681078895926477, 13: 0.3551490344107151, 14: 0.3159255500882864} run.monitor # Store the best score and its epoch. [13] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.5s ) Monitor(metric='val_loss', mode='min', best_score=0.316, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.5s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.5s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, loss=<function mse_loss at 0x0000023AF75E7288>, batch_size=10, shuffle=True, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Training a Model</span></span></span>"},{"location":"tutorial/training/#training-a-model","text":"First, create data and model set. For more details about the following code, see Creating Instance section . import yaml params = yaml.safe_load(\"\"\" library: torch run: datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [100, 100] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 0.001 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 \"\"\") params [2] 2020-05-29 20:43:58 ( 8.00ms ) python3 ( 22.5s ) {'library': 'torch', 'run': {'datasets': {'data': {'class': 'rectangle.data.Data', 'n_splits': 4}, 'dataset': None, 'fold': 0}, 'model': {'class': 'rectangle.torch.Model', 'hidden_sizes': [100, 100]}, 'optimizer': {'class': 'torch.optim.SGD', 'params': '$.model.parameters()', 'lr': 0.001}, 'scheduler': {'class': 'torch.optim.lr_scheduler.ReduceLROnPlateau', 'optimizer': '$', 'factor': 0.5, 'patience': 4}, 'results': None, 'metrics': None, 'monitor': {'metric': 'val_loss'}, 'early_stopping': {'patience': 10}, 'trainer': {'loss': 'torch.nn.functional.mse_loss', 'batch_size': 10, 'epochs': 10, 'verbose': 2}}} Note Key-order in the params dictionary is meaningful, because the callback functions are called by this order. For example, Monitor uses the results of Metrics so that Monitor should appear later than Metrics . The ivory.core.instance.create_base_instance() function is more useful to create a run from a dictionary than the ivory.core.instance.create_instance() function because it can create multiple objects by one step. import ivory.core.instance run = ivory.core.instance.create_base_instance(params, 'run') list(run) [3] 2020-05-29 20:43:58 ( 6.00ms ) python3 ( 22.5s ) ['datasets', 'model', 'optimizer', 'scheduler', 'results', 'metrics', 'monitor', 'early_stopping', 'trainer']","title":"Training a Model"},{"location":"tutorial/training/#callbacks","text":"Check callbacks of the Run instance. import ivory.core.base # A helper function def print_callbacks(obj): for func in ivory.core.base.Callback.METHODS: if hasattr(obj, func) and callable(getattr(obj, func)): print(' ', func) for name, obj in run.items(): print(f'[{name}]') print_callbacks(obj) [4] 2020-05-29 20:43:58 ( 34.0ms ) python3 ( 22.6s ) [datasets] [model] [optimizer] [scheduler] [results] on_train_begin on_train_end on_val_end on_test_begin on_test_end [metrics] on_epoch_begin on_train_begin on_train_end on_val_begin on_val_end on_epoch_end [monitor] on_epoch_end [early_stopping] on_epoch_end [trainer] on_fit_begin on_train_begin on_val_begin on_epoch_end on_test_begin","title":"Callbacks"},{"location":"tutorial/training/#metrics","text":"The role of Metrics class is to record a set of metric for evaluation of model performance. The metirics are updated at each epoch end. run.metrics # Now, metrics are empty. [5] 2020-05-29 20:43:58 ( 4.00ms ) python3 ( 22.6s ) Metrics()","title":"Metrics"},{"location":"tutorial/training/#monitor","text":"The Monitor class is monitoring the most important metric to measure the model score or to determine the training logic (early stopping or pruning). run.monitor # Monitoring `val_loss`. Lower is better. [6] 2020-05-29 20:43:58 ( 4.00ms ) python3 ( 22.6s ) Monitor(metric='val_loss', mode='min')","title":"Monitor"},{"location":"tutorial/training/#earlystopping","text":"The EarlyStopping class is to stop the training loop when a monitored metric has stopped improving. run.early_stopping # Early stopping occurs when `wait` > `patience`. [7] 2020-05-29 20:43:58 ( 3.00ms ) python3 ( 22.6s ) EarlyStopping(patience=10, wait=0)","title":"EarlyStopping"},{"location":"tutorial/training/#trainer","text":"The Tainer class controls the model training. This is a callback, but at the same time, invokes callback functions at each step of training, validation, and test loop. run.trainer # Training hasn't started yet, so epoch = -1. [8] 2020-05-29 20:43:58 ( 3.00ms ) python3 ( 22.6s ) Trainer(epoch=-1, epochs=10, global_step=-1, verbose=2, loss=<function mse_loss at 0x0000023AF75E7288>, batch_size=10, shuffle=True, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Trainer"},{"location":"tutorial/training/#using-a-trainer","text":"A Run instance invokes its trainer by Run.start() method. run.start() # create_callbacks() is called automatically. [9] 2020-05-29 20:43:58 ( 575ms ) python3 ( 23.2s ) [epoch#0] loss=15.02 val_loss=7.922 lr=0.001 best [epoch#1] loss=6.747 val_loss=7.868 lr=0.001 best [epoch#2] loss=5.416 val_loss=4.412 lr=0.001 best [epoch#3] loss=3.881 val_loss=3.042 lr=0.001 best [epoch#4] loss=2.763 val_loss=1.939 lr=0.001 best [epoch#5] loss=1.717 val_loss=1.248 lr=0.001 best [epoch#6] loss=1.179 val_loss=0.8376 lr=0.001 best [epoch#7] loss=0.8795 val_loss=0.7485 lr=0.001 best [epoch#8] loss=0.7128 val_loss=0.5383 lr=0.001 best [epoch#9] loss=0.6385 val_loss=0.5081 lr=0.001 best You can update attributes of run's objects at any time. run.trainer.epochs = 5 run.start() [10] 2020-05-29 20:43:59 ( 291ms ) python3 ( 23.5s ) [epoch#10] loss=0.6038 val_loss=0.454 lr=0.001 best [epoch#11] loss=0.5686 val_loss=0.4361 lr=0.001 best [epoch#12] loss=0.5087 val_loss=0.4168 lr=0.001 best [epoch#13] loss=0.4229 val_loss=0.3551 lr=0.001 best [epoch#14] loss=0.3845 val_loss=0.3159 lr=0.001 best Note The Run.start() method doesn't reset the trainer's epoch.","title":"Using a Trainer"},{"location":"tutorial/training/#callbacks-after-training","text":"After training, the callbacks changes their states. run.metrics # Show metrics at current epoch. [11] 2020-05-29 20:43:59 ( 5.00ms ) python3 ( 23.5s ) Metrics(loss=0.3845, val_loss=0.3159, lr=0.001) run.metrics.history.val_loss # Metrics history. [12] 2020-05-29 20:43:59 ( 5.00ms ) python3 ( 23.5s ) {0: 7.9218872547149655, 1: 7.8684142351150514, 2: 4.411666941642761, 3: 3.0417939007282255, 4: 1.9388263553380967, 5: 1.2481913983821868, 6: 0.8376013934612274, 7: 0.748484893143177, 8: 0.5383104585111141, 9: 0.5081345245242119, 10: 0.45400402694940567, 11: 0.43608351349830626, 12: 0.41681078895926477, 13: 0.3551490344107151, 14: 0.3159255500882864} run.monitor # Store the best score and its epoch. [13] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.5s ) Monitor(metric='val_loss', mode='min', best_score=0.316, best_epoch=14) run.early_stopping # Current `wait`. [14] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.5s ) EarlyStopping(patience=10, wait=0) run.trainer # Current epoch is 14 (0-indexed). [15] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.5s ) Trainer(epoch=14, epochs=5, global_step=899, verbose=2, loss=<function mse_loss at 0x0000023AF75E7288>, batch_size=10, shuffle=True, gpu=False, precision=32, amp_level='O1', scheduler_step_mode='epoch')","title":"Callbacks after Training"},{"location":"tutorial/tuning/","text":"Hyperparameter Tuning Suggest Function To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the offical Optuna documentation . Note In the suggest_hidden_sizes() function, we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() function to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-05-29 20:43:59 ( 5.00ms ) python3 ( 23.5s ) Study Ivory implements a special run type called Study which controls hyperparameter tuning using Optuna. import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-05-29 20:43:59 ( 96.0ms ) python3 ( 23.6s ) [I 200529 20:43:59 tracker:48] A new experiment created with name: 'torch' Study(id='3eeaba2b863c4c24883d9f7122dec92a', name='study#0', num_objects=5) In the client.create_study() function, you can pass a keyword argument in which the key is a suggest name and the value is a pure suggest function. Objective The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and sends it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.6s ) Objective(['lr']) study_hs.objective [6] 2020-05-29 20:43:59 ( 3.00ms ) python3 ( 23.6s ) Objective(['hidden_sizes']) Optimization Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-05-29 20:43:59 ( 1.97s ) python3 ( 25.6s ) [I 2020-05-29 20:43:59,987] A new study created with name: torch.lr.study#0 [run#0] lr=0.004691 fold=3 epochs=3 [epoch#0] loss=17.12 val_loss=18.04 lr=0.004691 best [epoch#1] loss=10.79 val_loss=4.871 lr=0.004691 best [epoch#2] loss=9.533 val_loss=9.485 lr=0.004691 [I 2020-05-29 20:44:00,639] Finished trial#0 with value: 4.870938301086426 with parameters: {'lr': 0.004691197127329587}. Best is trial#0 with value: 4.870938301086426. [run#1] lr=0.0004358 fold=3 epochs=3 [epoch#0] loss=24.27 val_loss=7.121 lr=0.0004358 best [epoch#1] loss=8.542 val_loss=6.365 lr=0.0004358 best [epoch#2] loss=7.986 val_loss=5.981 lr=0.0004358 best [I 2020-05-29 20:44:01,260] Finished trial#1 with value: 5.981422710418701 with parameters: {'lr': 0.00043582597024607227}. Best is trial#0 with value: 4.870938301086426. [run#2] lr=0.004299 fold=3 epochs=3 [epoch#0] loss=21.58 val_loss=6.442 lr=0.004299 best [epoch#1] loss=8.276 val_loss=2.347 lr=0.004299 best [epoch#2] loss=6.189 val_loss=1.628 lr=0.004299 best [I 2020-05-29 20:44:01,914] Finished trial#2 with value: 1.6281421184539795 with parameters: {'lr': 0.0042994529764829046}. Best is trial#2 with value: 1.6281421184539795. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-05-29 20:44:01 ( 2.07s ) python3 ( 27.7s ) [I 2020-05-29 20:44:01,945] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=21 hidden_sizes:1=20 hidden_sizes:2=21 num_layers=3 epochs=3 [epoch#0] loss=36.39 val_loss=9.27 lr=0.001 best [epoch#1] loss=8.766 val_loss=9.629 lr=0.001 [epoch#2] loss=7.738 val_loss=6.813 lr=0.001 best [I 2020-05-29 20:44:02,648] Finished trial#0 with value: 6.813235223293304 with parameters: {'hidden_sizes:0': 21, 'hidden_sizes:1': 20, 'hidden_sizes:2': 21, 'num_layers': 3}. Best is trial#0 with value: 6.813235223293304. [run#4] hidden_sizes:0=28 hidden_sizes:1=29 hidden_sizes:2=11 num_layers=3 epochs=3 [epoch#0] loss=50.08 val_loss=9.362 lr=0.001 best [epoch#1] loss=8.257 val_loss=7.335 lr=0.001 best [epoch#2] loss=6.947 val_loss=6.299 lr=0.001 best [I 2020-05-29 20:44:03,337] Finished trial#1 with value: 6.2986172914505 with parameters: {'hidden_sizes:0': 28, 'hidden_sizes:1': 29, 'hidden_sizes:2': 11, 'num_layers': 3}. Best is trial#1 with value: 6.2986172914505. [run#5] hidden_sizes:0=16 hidden_sizes:1=24 num_layers=2 epochs=3 [epoch#0] loss=14.63 val_loss=8.847 lr=0.001 best [epoch#1] loss=8.249 val_loss=8.83 lr=0.001 best [epoch#2] loss=7.455 val_loss=7.278 lr=0.001 best [I 2020-05-29 20:44:03,985] Finished trial#2 with value: 7.278370606899261 with parameters: {'hidden_sizes:0': 16, 'hidden_sizes:1': 24, 'num_layers': 2}. Best is trial#1 with value: 6.2986172914505. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-05-29 20:44:03 ( 4.00ms ) python3 ( 27.7s ) <optuna.study.Study at 0x23c8f6b8f08> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-05-29 20:44:03 ( 4.00ms ) python3 ( 27.7s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, RunID is saved. optuna_study_lr.user_attrs [11] 2020-05-29 20:44:04 ( 4.00ms ) python3 ( 27.7s ) {'run_id': '3eeaba2b863c4c24883d9f7122dec92a'} optuna_study_lr.trials[0].user_attrs [12] 2020-05-29 20:44:04 ( 5.00ms ) python3 ( 27.7s ) {'run_id': '1d89bf28296f4faa91161f66308e12e8'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-05-29 20:44:04 ( 5.00ms ) python3 ( 27.7s ) <mlflow.tracking.client.MlflowClient at 0x23ac8736348> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-05-29 20:44:04 ( 7.00ms ) python3 ( 27.7s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-05-29 20:44:04 ( 9.00ms ) python3 ( 27.7s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 10 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 The Monitor instance monitors val_loss (actually this is the default value, so that you can delete this line) and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max Parametric Optimization Again read the suggest functions. File 11 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() function has some logic but the code of the suggest_lr() function is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass key-iterable pairs to the client.create_study() function instead of key-callable pairs. tuple, range, Range A tuple, range, or Range instance represents parameter range. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-05-29 20:44:04 ( 2.11s ) python3 ( 29.8s ) [I 2020-05-29 20:44:04,130] A new study created with name: torch.lr.study#2 [run#6] lr=0.006985 epochs=1 [I 2020-05-29 20:44:04,544] Finished trial#0 with value: 92.23941745758057 with parameters: {'lr': 0.006985181446478287}. Best is trial#0 with value: 92.23941745758057. [run#7] lr=0.007271 epochs=1 [I 2020-05-29 20:44:04,941] Finished trial#1 with value: 67.25849199295044 with parameters: {'lr': 0.007270659094041972}. Best is trial#1 with value: 67.25849199295044. [run#8] lr=0.00115 epochs=1 [I 2020-05-29 20:44:05,340] Finished trial#2 with value: 8.10213840007782 with parameters: {'lr': 0.001149760835811231}. Best is trial#2 with value: 8.10213840007782. [run#9] lr=0.002707 epochs=1 [I 2020-05-29 20:44:05,746] Finished trial#3 with value: 4.740785008668899 with parameters: {'lr': 0.002707003596808752}. Best is trial#3 with value: 4.740785008668899. [run#10] lr=0.003814 epochs=1 [I 2020-05-29 20:44:06,154] Finished trial#4 with value: 5.857018458843231 with parameters: {'lr': 0.0038139918591368425}. Best is trial#3 with value: 4.740785008668899. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 20)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-05-29 20:44:06 ( 2.20s ) python3 ( 32.0s ) [I 2020-05-29 20:44:06,260] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:06,688] Finished trial#0 with value: 9.484165072441101 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 9.484165072441101. [run#12] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:07,102] Finished trial#1 with value: 8.306061959266662 with parameters: {'hidden_sizes.0': 10}. Best is trial#1 with value: 8.306061959266662. [run#13] hidden_sizes.0=18 epochs=1 [I 2020-05-29 20:44:07,511] Finished trial#2 with value: 7.060220265388489 with parameters: {'hidden_sizes.0': 18}. Best is trial#2 with value: 7.060220265388489. [run#14] hidden_sizes.0=12 epochs=1 [I 2020-05-29 20:44:07,937] Finished trial#3 with value: 7.2166549324989315 with parameters: {'hidden_sizes.0': 12}. Best is trial#2 with value: 7.060220265388489. [run#15] hidden_sizes.0=18 epochs=1 [I 2020-05-29 20:44:08,354] Finished trial#4 with value: 8.533992409706116 with parameters: {'hidden_sizes.0': 18}. Best is trial#2 with value: 7.060220265388489. You can specify a step params = {'hidden_sizes.0': range(10, 20, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-05-29 20:44:08 ( 2.28s ) python3 ( 34.3s ) [I 2020-05-29 20:44:08,475] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=16 epochs=1 [I 2020-05-29 20:44:08,909] Finished trial#0 with value: 8.211132264137268 with parameters: {'hidden_sizes.0': 16}. Best is trial#0 with value: 8.211132264137268. [run#17] hidden_sizes.0=19 epochs=1 [I 2020-05-29 20:44:09,339] Finished trial#1 with value: 8.267954576015473 with parameters: {'hidden_sizes.0': 19}. Best is trial#0 with value: 8.211132264137268. [run#18] hidden_sizes.0=16 epochs=1 [I 2020-05-29 20:44:09,762] Finished trial#2 with value: 8.506538355350495 with parameters: {'hidden_sizes.0': 16}. Best is trial#0 with value: 8.211132264137268. [run#19] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:10,197] Finished trial#3 with value: 7.971852588653564 with parameters: {'hidden_sizes.0': 10}. Best is trial#3 with value: 7.971852588653564. [run#20] hidden_sizes.0=13 epochs=1 [I 2020-05-29 20:44:10,640] Finished trial#4 with value: 8.758680415153503 with parameters: {'hidden_sizes.0': 13}. Best is trial#3 with value: 7.971852588653564. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-05-29 20:44:10 ( 2.42s ) python3 ( 36.7s ) [I 2020-05-29 20:44:10,778] A new study created with name: torch.lr.study#5 [run#21] lr=0.001433 epochs=1 [I 2020-05-29 20:44:11,233] Finished trial#0 with value: 7.682654190063476 with parameters: {'lr': 0.0014333154899478836}. Best is trial#0 with value: 7.682654190063476. [run#22] lr=0.001055 epochs=1 [I 2020-05-29 20:44:11,683] Finished trial#1 with value: 6.237332034111023 with parameters: {'lr': 0.0010550685123887852}. Best is trial#1 with value: 6.237332034111023. [run#23] lr=0.002927 epochs=1 [I 2020-05-29 20:44:12,145] Finished trial#2 with value: 7.395626640319824 with parameters: {'lr': 0.002927340657213544}. Best is trial#1 with value: 6.237332034111023. [run#24] lr=0.001142 epochs=1 [I 2020-05-29 20:44:12,592] Finished trial#3 with value: 7.998966968059539 with parameters: {'lr': 0.0011416843375533989}. Best is trial#1 with value: 6.237332034111023. [run#25] lr=0.00196 epochs=1 [I 2020-05-29 20:44:13,058] Finished trial#4 with value: 6.9566356301307675 with parameters: {'lr': 0.001960447367170818}. Best is trial#1 with value: 6.237332034111023. list A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-05-29 20:44:13 ( 2.48s ) python3 ( 39.2s ) [I 2020-05-29 20:44:13,210] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=20 epochs=1 [I 2020-05-29 20:44:13,669] Finished trial#0 with value: 7.147483563423156 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 7.147483563423156. [run#27] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:14,128] Finished trial#1 with value: 11.20066421031952 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 7.147483563423156. [run#28] hidden_sizes.0=30 epochs=1 [I 2020-05-29 20:44:14,600] Finished trial#2 with value: 7.076231122016907 with parameters: {'hidden_sizes.0': 30}. Best is trial#2 with value: 7.076231122016907. [run#29] hidden_sizes.0=30 epochs=1 [I 2020-05-29 20:44:15,065] Finished trial#3 with value: 9.107826113700867 with parameters: {'hidden_sizes.0': 30}. Best is trial#2 with value: 7.076231122016907. [run#30] hidden_sizes.0=30 epochs=1 [I 2020-05-29 20:44:15,540] Finished trial#4 with value: 7.803005445003509 with parameters: {'hidden_sizes.0': 30}. Best is trial#2 with value: 7.076231122016907. Product If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-05-29 20:44:15 ( 5.48s ) python3 ( 44.7s ) [I 2020-05-29 20:44:15,713] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=14 hidden_sizes:1=26 lr=0.0001427 num_layers=2 epochs=1 [I 2020-05-29 20:44:16,230] Finished trial#0 with value: 75.90559282302857 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 26, 'lr': 0.00014274621248604261, 'num_layers': 2}. Best is trial#0 with value: 75.90559282302857. [run#32] hidden_sizes:0=11 hidden_sizes:1=17 hidden_sizes:2=28 lr=0.0008201 num_layers=3 epochs=1 [I 2020-05-29 20:44:16,771] Finished trial#1 with value: 9.956338906288147 with parameters: {'hidden_sizes:0': 11, 'hidden_sizes:1': 17, 'hidden_sizes:2': 28, 'lr': 0.0008201457487468247, 'num_layers': 3}. Best is trial#1 with value: 9.956338906288147. [run#33] hidden_sizes:0=13 hidden_sizes:1=21 lr=0.0001011 num_layers=2 epochs=1 [I 2020-05-29 20:44:17,284] Finished trial#2 with value: 90.28048477172851 with parameters: {'hidden_sizes:0': 13, 'hidden_sizes:1': 21, 'lr': 0.00010113473460424648, 'num_layers': 2}. Best is trial#1 with value: 9.956338906288147. [run#34] hidden_sizes:0=19 hidden_sizes:1=20 hidden_sizes:2=23 lr=0.0008283 num_layers=3 epochs=1 [I 2020-05-29 20:44:17,825] Finished trial#3 with value: 8.92137897014618 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 20, 'hidden_sizes:2': 23, 'lr': 0.0008282963319021563, 'num_layers': 3}. Best is trial#3 with value: 8.92137897014618. [run#35] hidden_sizes:0=12 hidden_sizes:1=21 hidden_sizes:2=25 lr=0.0007449 num_layers=3 epochs=1 [I 2020-05-29 20:44:18,351] Finished trial#4 with value: 9.324907541275024 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 21, 'hidden_sizes:2': 25, 'lr': 0.0007449076436767013, 'num_layers': 3}. Best is trial#3 with value: 8.92137897014618. [run#36] hidden_sizes:0=12 hidden_sizes:1=27 hidden_sizes:2=16 lr=0.0009877 num_layers=3 epochs=1 [I 2020-05-29 20:44:18,891] Finished trial#5 with value: 9.753335165977479 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 27, 'hidden_sizes:2': 16, 'lr': 0.0009877012541415135, 'num_layers': 3}. Best is trial#3 with value: 8.92137897014618. [run#37] hidden_sizes:0=18 hidden_sizes:1=13 lr=0.0004891 num_layers=2 epochs=1 [I 2020-05-29 20:44:19,423] Finished trial#6 with value: 8.207281076908112 with parameters: {'hidden_sizes:0': 18, 'hidden_sizes:1': 13, 'lr': 0.0004890576591936578, 'num_layers': 2}. Best is trial#6 with value: 8.207281076908112. [run#38] hidden_sizes:0=12 hidden_sizes:1=10 lr=0.0009699 num_layers=2 epochs=1 [I 2020-05-29 20:44:19,917] Finished trial#7 with value: 8.235718595981599 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 10, 'lr': 0.0009698864274581465, 'num_layers': 2}. Best is trial#6 with value: 8.207281076908112. [run#39] hidden_sizes:0=20 hidden_sizes:1=29 hidden_sizes:2=22 lr=0.0004661 num_layers=3 epochs=1 [I 2020-05-29 20:44:20,474] Finished trial#8 with value: 9.430407166481018 with parameters: {'hidden_sizes:0': 20, 'hidden_sizes:1': 29, 'hidden_sizes:2': 22, 'lr': 0.00046607299860942946, 'num_layers': 3}. Best is trial#6 with value: 8.207281076908112. [run#40] hidden_sizes:0=29 hidden_sizes:1=28 hidden_sizes:2=15 lr=0.0001218 num_layers=3 epochs=1 [I 2020-05-29 20:44:21,024] Finished trial#9 with value: 104.51466522216796 with parameters: {'hidden_sizes:0': 29, 'hidden_sizes:1': 28, 'hidden_sizes:2': 15, 'lr': 0.00012184143023644337, 'num_layers': 3}. Best is trial#6 with value: 8.207281076908112. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" is better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-05-29 20:44:21 ( 4.00ms ) python3 ( 44.7s ) 'torch.hidden_sizes.lr.study#7' Study from YAML file As a normal Run , a Study instance also can be created from a YAML file. Pass an extra keyword argument to the client.create_experiment() function. The key is the instance name (in this case study ) and value is a YAML file name without its extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-05-29 20:44:21 ( 10.0ms ) python3 ( 44.7s ) Experiment(id='1', name='torch', num_objects=1) Here is the contents of study.yml file. File 12 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses def keyword to create a callable. On the other hand, lr is just one line. If a suggest funtion can be called without additional arguments, you can omit the def keyword. Using this experiment, we can create Study instances with a suggest function. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-05-29 20:44:21 ( 177ms ) python3 ( 44.9s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-05-29 20:44:21 ( 165ms ) python3 ( 45.1s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-05-29 20:44:21 ( 3.00ms ) python3 ( 45.1s ) functools.partial(<function suggest_hidden_sizes at 0x0000023A838F41F8>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-05-29 20:44:21 ( 2.26s ) python3 ( 47.3s ) [I 2020-05-29 20:44:21,423] A new study created with name: torch.lr.study#8 [run#41] lr=5.161e-05 epochs=3 [I 2020-05-29 20:44:22,186] Finished trial#0 with value: 17.455754375457765 with parameters: {'lr': 5.1611633702019574e-05}. Best is trial#0 with value: 17.455754375457765. [run#42] lr=0.0001429 epochs=3 [I 2020-05-29 20:44:22,923] Finished trial#1 with value: 8.578698003292084 with parameters: {'lr': 0.00014292558104730702}. Best is trial#1 with value: 8.578698003292084. [run#43] lr=0.0001124 epochs=3 [I 2020-05-29 20:44:23,652] Finished trial#2 with value: 8.434180092811584 with parameters: {'lr': 0.00011238794537947417}. Best is trial#2 with value: 8.434180092811584. <optuna.study.Study at 0x23c8f5f0888> Pruning Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is the updated contents of study.yml file. File 13 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna in order to determine the step of pruning. Note Pruning is supported for PyTorch and TensorFlow now.","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Hyperparameter Tuning</span></span></span>"},{"location":"tutorial/tuning/#hyperparameter-tuning","text":"","title":"Hyperparameter Tuning"},{"location":"tutorial/tuning/#suggest-function","text":"To optimize a set of hyperparameters, define a suggest function . Here are example functions. File 9 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) A suggest function must take a trial (an instance of Trial ) as the first argument but you can add arbitrary arguments if you need. For more details about what the Trial can do, see the offical Optuna documentation . Note In the suggest_hidden_sizes() function, we use 0-indexed colon-notation , because Optuna doesn't suggest a list itself but its element. These suggest functions don't return any parameters. The only work of suggest functions is to make the Trial instance suggest parameters. Suggested parameters are stored in the Trial instance, so that nothing is needed from suggest functions. Note that an objective function in Optuna has only one trial argument, so that we have to use the functools.partial() function to make a pure suggest function. from functools import partial from rectangle.suggest import suggest_lr, suggest_hidden_sizes lr = partial(suggest_lr, min=1e-5, max=1e-2) hidden_sizes = partial(suggest_hidden_sizes, max_num_layers=3) [3] 2020-05-29 20:43:59 ( 5.00ms ) python3 ( 23.5s )","title":"Suggest Function"},{"location":"tutorial/tuning/#study","text":"Ivory implements a special run type called Study which controls hyperparameter tuning using Optuna. import ivory client = ivory.create_client(\"examples\") # Set the working directory study_lr = client.create_study('torch', lr=lr) study_hs = client.create_study('torch', hidden_sizes=hidden_sizes) study_lr [4] 2020-05-29 20:43:59 ( 96.0ms ) python3 ( 23.6s ) [I 200529 20:43:59 tracker:48] A new experiment created with name: 'torch' Study(id='3eeaba2b863c4c24883d9f7122dec92a', name='study#0', num_objects=5) In the client.create_study() function, you can pass a keyword argument in which the key is a suggest name and the value is a pure suggest function.","title":"Study"},{"location":"tutorial/tuning/#objective","text":"The ivory.core.objective.Objective class provides objective functions that return a score to minimize or maximize. But you don't need to know about the Objective class in details. Ivory builds an objective function from a suggest function and sends it to Optuna so that Optuna can optimize the parameters. A Study instance has an Objective instance. study_lr.objective [5] 2020-05-29 20:43:59 ( 4.00ms ) python3 ( 23.6s ) Objective(['lr']) study_hs.objective [6] 2020-05-29 20:43:59 ( 3.00ms ) python3 ( 23.6s ) Objective(['hidden_sizes'])","title":"Objective"},{"location":"tutorial/tuning/#optimization","text":"Then \"optimize\" the learning rate and hidden sizes just for fun. optuna_study_lr = study_lr.optimize(n_trials=3, fold=3, epochs=3) [7] 2020-05-29 20:43:59 ( 1.97s ) python3 ( 25.6s ) [I 2020-05-29 20:43:59,987] A new study created with name: torch.lr.study#0 [run#0] lr=0.004691 fold=3 epochs=3 [epoch#0] loss=17.12 val_loss=18.04 lr=0.004691 best [epoch#1] loss=10.79 val_loss=4.871 lr=0.004691 best [epoch#2] loss=9.533 val_loss=9.485 lr=0.004691 [I 2020-05-29 20:44:00,639] Finished trial#0 with value: 4.870938301086426 with parameters: {'lr': 0.004691197127329587}. Best is trial#0 with value: 4.870938301086426. [run#1] lr=0.0004358 fold=3 epochs=3 [epoch#0] loss=24.27 val_loss=7.121 lr=0.0004358 best [epoch#1] loss=8.542 val_loss=6.365 lr=0.0004358 best [epoch#2] loss=7.986 val_loss=5.981 lr=0.0004358 best [I 2020-05-29 20:44:01,260] Finished trial#1 with value: 5.981422710418701 with parameters: {'lr': 0.00043582597024607227}. Best is trial#0 with value: 4.870938301086426. [run#2] lr=0.004299 fold=3 epochs=3 [epoch#0] loss=21.58 val_loss=6.442 lr=0.004299 best [epoch#1] loss=8.276 val_loss=2.347 lr=0.004299 best [epoch#2] loss=6.189 val_loss=1.628 lr=0.004299 best [I 2020-05-29 20:44:01,914] Finished trial#2 with value: 1.6281421184539795 with parameters: {'lr': 0.0042994529764829046}. Best is trial#2 with value: 1.6281421184539795. optuna_study_hs = study_hs.optimize(n_trials=3, epochs=3) [8] 2020-05-29 20:44:01 ( 2.07s ) python3 ( 27.7s ) [I 2020-05-29 20:44:01,945] A new study created with name: torch.hidden_sizes.study#1 [run#3] hidden_sizes:0=21 hidden_sizes:1=20 hidden_sizes:2=21 num_layers=3 epochs=3 [epoch#0] loss=36.39 val_loss=9.27 lr=0.001 best [epoch#1] loss=8.766 val_loss=9.629 lr=0.001 [epoch#2] loss=7.738 val_loss=6.813 lr=0.001 best [I 2020-05-29 20:44:02,648] Finished trial#0 with value: 6.813235223293304 with parameters: {'hidden_sizes:0': 21, 'hidden_sizes:1': 20, 'hidden_sizes:2': 21, 'num_layers': 3}. Best is trial#0 with value: 6.813235223293304. [run#4] hidden_sizes:0=28 hidden_sizes:1=29 hidden_sizes:2=11 num_layers=3 epochs=3 [epoch#0] loss=50.08 val_loss=9.362 lr=0.001 best [epoch#1] loss=8.257 val_loss=7.335 lr=0.001 best [epoch#2] loss=6.947 val_loss=6.299 lr=0.001 best [I 2020-05-29 20:44:03,337] Finished trial#1 with value: 6.2986172914505 with parameters: {'hidden_sizes:0': 28, 'hidden_sizes:1': 29, 'hidden_sizes:2': 11, 'num_layers': 3}. Best is trial#1 with value: 6.2986172914505. [run#5] hidden_sizes:0=16 hidden_sizes:1=24 num_layers=2 epochs=3 [epoch#0] loss=14.63 val_loss=8.847 lr=0.001 best [epoch#1] loss=8.249 val_loss=8.83 lr=0.001 best [epoch#2] loss=7.455 val_loss=7.278 lr=0.001 best [I 2020-05-29 20:44:03,985] Finished trial#2 with value: 7.278370606899261 with parameters: {'hidden_sizes:0': 16, 'hidden_sizes:1': 24, 'num_layers': 2}. Best is trial#1 with value: 6.2986172914505. Note By cliking an icon ( ) in the above cells, you can see the Optuna's log. The returned value of the study.optimize() is an Optuna's Study instance (not Ivory's one). optuna_study_lr [9] 2020-05-29 20:44:03 ( 4.00ms ) python3 ( 27.7s ) <optuna.study.Study at 0x23c8f6b8f08> The Study instance is named after the experiment name, suggest name, and run name. optuna_study_lr.study_name [10] 2020-05-29 20:44:03 ( 4.00ms ) python3 ( 27.7s ) 'torch.lr.study#0' In user attributes that Optuna's Study and Trial instances provide, RunID is saved. optuna_study_lr.user_attrs [11] 2020-05-29 20:44:04 ( 4.00ms ) python3 ( 27.7s ) {'run_id': '3eeaba2b863c4c24883d9f7122dec92a'} optuna_study_lr.trials[0].user_attrs [12] 2020-05-29 20:44:04 ( 5.00ms ) python3 ( 27.7s ) {'run_id': '1d89bf28296f4faa91161f66308e12e8'} On the other hand, MLFlow Tracking's run (not Ivory's one) has a tag to refer Optuna's study and trial. mlflow_client = client.tracker.client mlflow_client [13] 2020-05-29 20:44:04 ( 5.00ms ) python3 ( 27.7s ) <mlflow.tracking.client.MlflowClient at 0x23ac8736348> run_id = optuna_study_lr.user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['study_name'] [14] 2020-05-29 20:44:04 ( 7.00ms ) python3 ( 27.7s ) 'torch.lr.study#0' run_id = optuna_study_lr.trials[0].user_attrs['run_id'] run = mlflow_client.get_run(run_id) run.data.tags['trial_number'] [15] 2020-05-29 20:44:04 ( 9.00ms ) python3 ( 27.7s ) '0' You may have a question. How does Optuna optimize the parameters without any score? The answer is the Monitor instance. An Objective instance gets the monitoring score from run.monitor and sends it to Optuna so that Optuna can determine the next suggestion. All you need is to make your Run instance have a Monitor instance. Check the YAML parameter file: File 10 torch.yml library: torch datasets: data: class: rectangle.data.Data n_splits: 4 dataset: fold: 0 model: class: rectangle.torch.Model hidden_sizes: [20, 30] optimizer: class: torch.optim.SGD params: $.model.parameters() lr: 1e-3 scheduler: class: torch.optim.lr_scheduler.ReduceLROnPlateau optimizer: $ factor: 0.5 patience: 4 results: metrics: monitor: metric: val_loss early_stopping: patience: 10 trainer: loss: torch.nn.functional.mse_loss batch_size: 10 epochs: 10 verbose: 2 The Monitor instance monitors val_loss (actually this is the default value, so that you can delete this line) and the default mode is min (smaller is better). If your monitor is accuracy, for example, set the monitor like this: monitor: metric: accuracy mode: max","title":"Optimization"},{"location":"tutorial/tuning/#parametric-optimization","text":"Again read the suggest functions. File 11 rectangle/suggest.py def suggest_lr(trial, min=1e-5, max=1e-3): trial.suggest_loguniform(\"lr\", min, max) def suggest_hidden_sizes(trial, max_num_layers, min_size=10, max_size=30): num_layers = trial.suggest_int(\"num_layers\", 2, max_num_layers) for k in range(num_layers): trial.suggest_int(f\"hidden_sizes:{k}\", min_size, max_size) The suggest_hidden_sizes() function has some logic but the code of the suggest_lr() function is too simple to define a function. You may not want to write such a function. Ivory can do that for you. You can pass key-iterable pairs to the client.create_study() function instead of key-callable pairs.","title":"Parametric Optimization"},{"location":"tutorial/tuning/#tuple-range-range","text":"A tuple, range, or Range instance represents parameter range. study = client.create_study('torch', lr=(1e-3, 1e-2)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [16] 2020-05-29 20:44:04 ( 2.11s ) python3 ( 29.8s ) [I 2020-05-29 20:44:04,130] A new study created with name: torch.lr.study#2 [run#6] lr=0.006985 epochs=1 [I 2020-05-29 20:44:04,544] Finished trial#0 with value: 92.23941745758057 with parameters: {'lr': 0.006985181446478287}. Best is trial#0 with value: 92.23941745758057. [run#7] lr=0.007271 epochs=1 [I 2020-05-29 20:44:04,941] Finished trial#1 with value: 67.25849199295044 with parameters: {'lr': 0.007270659094041972}. Best is trial#1 with value: 67.25849199295044. [run#8] lr=0.00115 epochs=1 [I 2020-05-29 20:44:05,340] Finished trial#2 with value: 8.10213840007782 with parameters: {'lr': 0.001149760835811231}. Best is trial#2 with value: 8.10213840007782. [run#9] lr=0.002707 epochs=1 [I 2020-05-29 20:44:05,746] Finished trial#3 with value: 4.740785008668899 with parameters: {'lr': 0.002707003596808752}. Best is trial#3 with value: 4.740785008668899. [run#10] lr=0.003814 epochs=1 [I 2020-05-29 20:44:06,154] Finished trial#4 with value: 5.857018458843231 with parameters: {'lr': 0.0038139918591368425}. Best is trial#3 with value: 4.740785008668899. In the above cell, lr=Range(1e-3, 1e-2) also works. For integer parameters, you can use normal range as well as tuple or Range . params = {'hidden_sizes.0': range(10, 20)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [17] 2020-05-29 20:44:06 ( 2.20s ) python3 ( 32.0s ) [I 2020-05-29 20:44:06,260] A new study created with name: torch.hidden_sizes.0.study#3 [run#11] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:06,688] Finished trial#0 with value: 9.484165072441101 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 9.484165072441101. [run#12] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:07,102] Finished trial#1 with value: 8.306061959266662 with parameters: {'hidden_sizes.0': 10}. Best is trial#1 with value: 8.306061959266662. [run#13] hidden_sizes.0=18 epochs=1 [I 2020-05-29 20:44:07,511] Finished trial#2 with value: 7.060220265388489 with parameters: {'hidden_sizes.0': 18}. Best is trial#2 with value: 7.060220265388489. [run#14] hidden_sizes.0=12 epochs=1 [I 2020-05-29 20:44:07,937] Finished trial#3 with value: 7.2166549324989315 with parameters: {'hidden_sizes.0': 12}. Best is trial#2 with value: 7.060220265388489. [run#15] hidden_sizes.0=18 epochs=1 [I 2020-05-29 20:44:08,354] Finished trial#4 with value: 8.533992409706116 with parameters: {'hidden_sizes.0': 18}. Best is trial#2 with value: 7.060220265388489. You can specify a step params = {'hidden_sizes.0': range(10, 20, 3)} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [18] 2020-05-29 20:44:08 ( 2.28s ) python3 ( 34.3s ) [I 2020-05-29 20:44:08,475] A new study created with name: torch.hidden_sizes.0.study#4 [run#16] hidden_sizes.0=16 epochs=1 [I 2020-05-29 20:44:08,909] Finished trial#0 with value: 8.211132264137268 with parameters: {'hidden_sizes.0': 16}. Best is trial#0 with value: 8.211132264137268. [run#17] hidden_sizes.0=19 epochs=1 [I 2020-05-29 20:44:09,339] Finished trial#1 with value: 8.267954576015473 with parameters: {'hidden_sizes.0': 19}. Best is trial#0 with value: 8.211132264137268. [run#18] hidden_sizes.0=16 epochs=1 [I 2020-05-29 20:44:09,762] Finished trial#2 with value: 8.506538355350495 with parameters: {'hidden_sizes.0': 16}. Best is trial#0 with value: 8.211132264137268. [run#19] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:10,197] Finished trial#3 with value: 7.971852588653564 with parameters: {'hidden_sizes.0': 10}. Best is trial#3 with value: 7.971852588653564. [run#20] hidden_sizes.0=13 epochs=1 [I 2020-05-29 20:44:10,640] Finished trial#4 with value: 8.758680415153503 with parameters: {'hidden_sizes.0': 13}. Best is trial#3 with value: 7.971852588653564. If you need sampling in log scale, use Range with log=True . from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-3, 1e-2, log=True)) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [19] 2020-05-29 20:44:10 ( 2.42s ) python3 ( 36.7s ) [I 2020-05-29 20:44:10,778] A new study created with name: torch.lr.study#5 [run#21] lr=0.001433 epochs=1 [I 2020-05-29 20:44:11,233] Finished trial#0 with value: 7.682654190063476 with parameters: {'lr': 0.0014333154899478836}. Best is trial#0 with value: 7.682654190063476. [run#22] lr=0.001055 epochs=1 [I 2020-05-29 20:44:11,683] Finished trial#1 with value: 6.237332034111023 with parameters: {'lr': 0.0010550685123887852}. Best is trial#1 with value: 6.237332034111023. [run#23] lr=0.002927 epochs=1 [I 2020-05-29 20:44:12,145] Finished trial#2 with value: 7.395626640319824 with parameters: {'lr': 0.002927340657213544}. Best is trial#1 with value: 6.237332034111023. [run#24] lr=0.001142 epochs=1 [I 2020-05-29 20:44:12,592] Finished trial#3 with value: 7.998966968059539 with parameters: {'lr': 0.0011416843375533989}. Best is trial#1 with value: 6.237332034111023. [run#25] lr=0.00196 epochs=1 [I 2020-05-29 20:44:13,058] Finished trial#4 with value: 6.9566356301307675 with parameters: {'lr': 0.001960447367170818}. Best is trial#1 with value: 6.237332034111023.","title":"tuple, range, Range"},{"location":"tutorial/tuning/#list","text":"A list represents parameter choice. params = {'hidden_sizes.0': [10, 20, 30]} study = client.create_study('torch', params) _ = study.optimize(n_trials=5, epochs=1, verbose=0) [20] 2020-05-29 20:44:13 ( 2.48s ) python3 ( 39.2s ) [I 2020-05-29 20:44:13,210] A new study created with name: torch.hidden_sizes.0.study#6 [run#26] hidden_sizes.0=20 epochs=1 [I 2020-05-29 20:44:13,669] Finished trial#0 with value: 7.147483563423156 with parameters: {'hidden_sizes.0': 20}. Best is trial#0 with value: 7.147483563423156. [run#27] hidden_sizes.0=10 epochs=1 [I 2020-05-29 20:44:14,128] Finished trial#1 with value: 11.20066421031952 with parameters: {'hidden_sizes.0': 10}. Best is trial#0 with value: 7.147483563423156. [run#28] hidden_sizes.0=30 epochs=1 [I 2020-05-29 20:44:14,600] Finished trial#2 with value: 7.076231122016907 with parameters: {'hidden_sizes.0': 30}. Best is trial#2 with value: 7.076231122016907. [run#29] hidden_sizes.0=30 epochs=1 [I 2020-05-29 20:44:15,065] Finished trial#3 with value: 9.107826113700867 with parameters: {'hidden_sizes.0': 30}. Best is trial#2 with value: 7.076231122016907. [run#30] hidden_sizes.0=30 epochs=1 [I 2020-05-29 20:44:15,540] Finished trial#4 with value: 7.803005445003509 with parameters: {'hidden_sizes.0': 30}. Best is trial#2 with value: 7.076231122016907.","title":"list"},{"location":"tutorial/tuning/#product","text":"If a key and value are tuples, the entry means cartesian product of suggest functions like Task.product() . params = {('hidden_sizes', 'lr'): (hidden_sizes, Range(1e-4, 1e-3))} study = client.create_study('torch', params) optuna_study = study.optimize(n_trials=10, epochs=1, verbose=0) [21] 2020-05-29 20:44:15 ( 5.48s ) python3 ( 44.7s ) [I 2020-05-29 20:44:15,713] A new study created with name: torch.hidden_sizes.lr.study#7 [run#31] hidden_sizes:0=14 hidden_sizes:1=26 lr=0.0001427 num_layers=2 epochs=1 [I 2020-05-29 20:44:16,230] Finished trial#0 with value: 75.90559282302857 with parameters: {'hidden_sizes:0': 14, 'hidden_sizes:1': 26, 'lr': 0.00014274621248604261, 'num_layers': 2}. Best is trial#0 with value: 75.90559282302857. [run#32] hidden_sizes:0=11 hidden_sizes:1=17 hidden_sizes:2=28 lr=0.0008201 num_layers=3 epochs=1 [I 2020-05-29 20:44:16,771] Finished trial#1 with value: 9.956338906288147 with parameters: {'hidden_sizes:0': 11, 'hidden_sizes:1': 17, 'hidden_sizes:2': 28, 'lr': 0.0008201457487468247, 'num_layers': 3}. Best is trial#1 with value: 9.956338906288147. [run#33] hidden_sizes:0=13 hidden_sizes:1=21 lr=0.0001011 num_layers=2 epochs=1 [I 2020-05-29 20:44:17,284] Finished trial#2 with value: 90.28048477172851 with parameters: {'hidden_sizes:0': 13, 'hidden_sizes:1': 21, 'lr': 0.00010113473460424648, 'num_layers': 2}. Best is trial#1 with value: 9.956338906288147. [run#34] hidden_sizes:0=19 hidden_sizes:1=20 hidden_sizes:2=23 lr=0.0008283 num_layers=3 epochs=1 [I 2020-05-29 20:44:17,825] Finished trial#3 with value: 8.92137897014618 with parameters: {'hidden_sizes:0': 19, 'hidden_sizes:1': 20, 'hidden_sizes:2': 23, 'lr': 0.0008282963319021563, 'num_layers': 3}. Best is trial#3 with value: 8.92137897014618. [run#35] hidden_sizes:0=12 hidden_sizes:1=21 hidden_sizes:2=25 lr=0.0007449 num_layers=3 epochs=1 [I 2020-05-29 20:44:18,351] Finished trial#4 with value: 9.324907541275024 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 21, 'hidden_sizes:2': 25, 'lr': 0.0007449076436767013, 'num_layers': 3}. Best is trial#3 with value: 8.92137897014618. [run#36] hidden_sizes:0=12 hidden_sizes:1=27 hidden_sizes:2=16 lr=0.0009877 num_layers=3 epochs=1 [I 2020-05-29 20:44:18,891] Finished trial#5 with value: 9.753335165977479 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 27, 'hidden_sizes:2': 16, 'lr': 0.0009877012541415135, 'num_layers': 3}. Best is trial#3 with value: 8.92137897014618. [run#37] hidden_sizes:0=18 hidden_sizes:1=13 lr=0.0004891 num_layers=2 epochs=1 [I 2020-05-29 20:44:19,423] Finished trial#6 with value: 8.207281076908112 with parameters: {'hidden_sizes:0': 18, 'hidden_sizes:1': 13, 'lr': 0.0004890576591936578, 'num_layers': 2}. Best is trial#6 with value: 8.207281076908112. [run#38] hidden_sizes:0=12 hidden_sizes:1=10 lr=0.0009699 num_layers=2 epochs=1 [I 2020-05-29 20:44:19,917] Finished trial#7 with value: 8.235718595981599 with parameters: {'hidden_sizes:0': 12, 'hidden_sizes:1': 10, 'lr': 0.0009698864274581465, 'num_layers': 2}. Best is trial#6 with value: 8.207281076908112. [run#39] hidden_sizes:0=20 hidden_sizes:1=29 hidden_sizes:2=22 lr=0.0004661 num_layers=3 epochs=1 [I 2020-05-29 20:44:20,474] Finished trial#8 with value: 9.430407166481018 with parameters: {'hidden_sizes:0': 20, 'hidden_sizes:1': 29, 'hidden_sizes:2': 22, 'lr': 0.00046607299860942946, 'num_layers': 3}. Best is trial#6 with value: 8.207281076908112. [run#40] hidden_sizes:0=29 hidden_sizes:1=28 hidden_sizes:2=15 lr=0.0001218 num_layers=3 epochs=1 [I 2020-05-29 20:44:21,024] Finished trial#9 with value: 104.51466522216796 with parameters: {'hidden_sizes:0': 29, 'hidden_sizes:1': 28, 'hidden_sizes:2': 15, 'lr': 0.00012184143023644337, 'num_layers': 3}. Best is trial#6 with value: 8.207281076908112. Note You can mix suggest funtions and parametric optimization. Note You may feel that \" params = {'hidden_sizes.1': hidden_sizes, 'lr': Range(1e-4, 1e-3)} \" is better, but the above style is intentional. In parametric optimization, the name of Optuna's Study instance is dot-joint style : optuna_study.study_name [22] 2020-05-29 20:44:21 ( 4.00ms ) python3 ( 44.7s ) 'torch.hidden_sizes.lr.study#7'","title":"Product"},{"location":"tutorial/tuning/#study-from-yaml-file","text":"As a normal Run , a Study instance also can be created from a YAML file. Pass an extra keyword argument to the client.create_experiment() function. The key is the instance name (in this case study ) and value is a YAML file name without its extension. experiment = client.create_experiment('torch', study='study') experiment [23] 2020-05-29 20:44:21 ( 10.0ms ) python3 ( 44.7s ) Experiment(id='1', name='torch', num_objects=1) Here is the contents of study.yml file. File 12 study.yml objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ Suggest functions should be callable, hidden_sizes uses def keyword to create a callable. On the other hand, lr is just one line. If a suggest funtion can be called without additional arguments, you can omit the def keyword. Using this experiment, we can create Study instances with a suggest function. study_lr = client.create_study('torch', 'lr') study_lr.objective [24] 2020-05-29 20:44:21 ( 177ms ) python3 ( 44.9s ) Objective(['lr']) study_hs = client.create_study('torch', 'hidden_sizes') study_hs.objective [25] 2020-05-29 20:44:21 ( 165ms ) python3 ( 45.1s ) Objective(['hidden_sizes']) study_hs.objective.hidden_sizes [26] 2020-05-29 20:44:21 ( 3.00ms ) python3 ( 45.1s ) functools.partial(<function suggest_hidden_sizes at 0x0000023A838F41F8>, max_num_layers=3, min_size=10, max_size=30) For min_size and max_size , default values are inspected from the signature. study_lr.optimize(n_trials=3, epochs=3, verbose=0) [27] 2020-05-29 20:44:21 ( 2.26s ) python3 ( 47.3s ) [I 2020-05-29 20:44:21,423] A new study created with name: torch.lr.study#8 [run#41] lr=5.161e-05 epochs=3 [I 2020-05-29 20:44:22,186] Finished trial#0 with value: 17.455754375457765 with parameters: {'lr': 5.1611633702019574e-05}. Best is trial#0 with value: 17.455754375457765. [run#42] lr=0.0001429 epochs=3 [I 2020-05-29 20:44:22,923] Finished trial#1 with value: 8.578698003292084 with parameters: {'lr': 0.00014292558104730702}. Best is trial#1 with value: 8.578698003292084. [run#43] lr=0.0001124 epochs=3 [I 2020-05-29 20:44:23,652] Finished trial#2 with value: 8.434180092811584 with parameters: {'lr': 0.00011238794537947417}. Best is trial#2 with value: 8.434180092811584. <optuna.study.Study at 0x23c8f5f0888>","title":"Study from YAML file"},{"location":"tutorial/tuning/#pruning","text":"Optuna provides the pruning functionality . Ivory can uses this feature seamlessly. Here is the updated contents of study.yml file. File 13 study.yml tuner: pruner: class: optuna.pruners.MedianPruner objective: lr: rectangle.suggest.suggest_lr hidden_sizes: def: rectangle.suggest.suggest_hidden_sizes max_num_layers: 3 min_size: __default__ max_size: __default__ The Tuner instance has Optuna's MedianPruner . (Off course, you can use other pruners .) A Study instance give an ivory.callbacks.Pruning instance to a run when the run is created, then with Ivory's callback system , the Pruning instance communicates with Optuna in order to determine the step of pruning. Note Pruning is supported for PyTorch and TensorFlow now.","title":"Pruning"},{"location":"tutorial/ui/","text":"Tracking UI Ivory uses MLFlow Tracking for the workflow tracking and model saving. For this feature, the Client instace has to have a Tracker instance. First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-05-29 20:44:23 ( 1.28s ) python3 ( 48.8s ) [I 200529 20:44:23 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=25.84 val_loss=8.076 lr=0.001 best [epoch#1] loss=7.584 val_loss=7.118 lr=0.001 best [epoch#2] loss=6.635 val_loss=6.585 lr=0.001 best [epoch#3] loss=5.87 val_loss=6.365 lr=0.001 best [epoch#4] loss=5.071 val_loss=4.819 lr=0.001 best [epoch#5] loss=4.331 val_loss=4.07 lr=0.001 best [epoch#6] loss=3.516 val_loss=3.238 lr=0.001 best [epoch#7] loss=2.916 val_loss=2.417 lr=0.001 best [epoch#8] loss=2.09 val_loss=2.003 lr=0.001 best [epoch#9] loss=1.576 val_loss=1.394 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-05-29 20:44:25 ( 3.97s ) python3 ( 52.8s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-05-29 20:44:29 ( 4.96s ) python3 ( 57.8s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-05-29 20:44:34 ( 7.03s ) python3 ( 1min5s ) [I 2020-05-29 20:44:34,204] A new study created with name: torch.lr.study#0 [run#8] lr=6.106e-05 [I 2020-05-29 20:44:35,589] Finished trial#0 with value: 8.565682291984558 with parameters: {'lr': 6.106214851238423e-05}. Best is trial#0 with value: 8.565682291984558. [run#9] lr=0.0002221 [I 2020-05-29 20:44:36,969] Finished trial#1 with value: 6.7033668756484985 with parameters: {'lr': 0.00022214397699709285}. Best is trial#1 with value: 6.7033668756484985. [run#10] lr=1.899e-05 [I 2020-05-29 20:44:38,352] Finished trial#2 with value: 53.628534603118894 with parameters: {'lr': 1.8986657590835633e-05}. Best is trial#1 with value: 6.7033668756484985. [run#11] lr=0.0005006 [I 2020-05-29 20:44:39,737] Finished trial#3 with value: 4.008862447738648 with parameters: {'lr': 0.0005006445416592231}. Best is trial#3 with value: 4.008862447738648. [run#12] lr=0.0003669 [I 2020-05-29 20:44:41,149] Finished trial#4 with value: 5.895332098007202 with parameters: {'lr': 0.00036694665278427677}. Best is trial#3 with value: 4.008862447738648. <optuna.study.Study at 0x23c93bec408> Tracking UI Optionally, you can update missing parameters: client.update_params('torch') [7] 2020-05-29 20:44:41 ( 350ms ) python3 ( 1min5s ) In a terminal, move to the working directory ( examples ), then run $ ivory ui [8] ( ) ( ) You can view the UI using URL http://localhost:5000 in your browser. Table 1 A collection of runs. Parameters, metrics, tags are logged. You can compare the training results among runs. Figure 1 Comparison of training curves See also the official MLFlow documentation .","title":"<span class=\"pheasant-header\"><span class=\"header\"><span class=\"title\">Tracking UI</span></span></span>"},{"location":"tutorial/ui/#tracking-ui","text":"Ivory uses MLFlow Tracking for the workflow tracking and model saving. For this feature, the Client instace has to have a Tracker instance. First create several runs for demonstration. import ivory client = ivory.create_client(\"examples\") run = client.create_run('torch') run.start('both') [3] 2020-05-29 20:44:23 ( 1.28s ) python3 ( 48.8s ) [I 200529 20:44:23 tracker:48] A new experiment created with name: 'torch' [epoch#0] loss=25.84 val_loss=8.076 lr=0.001 best [epoch#1] loss=7.584 val_loss=7.118 lr=0.001 best [epoch#2] loss=6.635 val_loss=6.585 lr=0.001 best [epoch#3] loss=5.87 val_loss=6.365 lr=0.001 best [epoch#4] loss=5.071 val_loss=4.819 lr=0.001 best [epoch#5] loss=4.331 val_loss=4.07 lr=0.001 best [epoch#6] loss=3.516 val_loss=3.238 lr=0.001 best [epoch#7] loss=2.916 val_loss=2.417 lr=0.001 best [epoch#8] loss=2.09 val_loss=2.003 lr=0.001 best [epoch#9] loss=1.576 val_loss=1.394 lr=0.001 best task = client.create_task('torch') runs = task.product(fold=range(3), verbose=0) for run in runs: run.start('both') [4] 2020-05-29 20:44:25 ( 3.97s ) python3 ( 52.8s ) [run#1] fold=0 [run#2] fold=1 [run#3] fold=2 task = client.create_task('torch') runs = task.chain(lr=[1e-4, 1e-3], batch_size=[16, 32], verbose=0) for run in runs: run.start('both') [5] 2020-05-29 20:44:29 ( 4.96s ) python3 ( 57.8s ) [run#4] lr=0.0001 [run#5] lr=0.001 [run#6] batch_size=16 lr=0.001 [run#7] batch_size=32 lr=0.001 from ivory.utils.range import Range study = client.create_study('torch', lr=Range(1e-5, 1e-3, log=True)) study.optimize(n_trials=5, verbose=0) [6] 2020-05-29 20:44:34 ( 7.03s ) python3 ( 1min5s ) [I 2020-05-29 20:44:34,204] A new study created with name: torch.lr.study#0 [run#8] lr=6.106e-05 [I 2020-05-29 20:44:35,589] Finished trial#0 with value: 8.565682291984558 with parameters: {'lr': 6.106214851238423e-05}. Best is trial#0 with value: 8.565682291984558. [run#9] lr=0.0002221 [I 2020-05-29 20:44:36,969] Finished trial#1 with value: 6.7033668756484985 with parameters: {'lr': 0.00022214397699709285}. Best is trial#1 with value: 6.7033668756484985. [run#10] lr=1.899e-05 [I 2020-05-29 20:44:38,352] Finished trial#2 with value: 53.628534603118894 with parameters: {'lr': 1.8986657590835633e-05}. Best is trial#1 with value: 6.7033668756484985. [run#11] lr=0.0005006 [I 2020-05-29 20:44:39,737] Finished trial#3 with value: 4.008862447738648 with parameters: {'lr': 0.0005006445416592231}. Best is trial#3 with value: 4.008862447738648. [run#12] lr=0.0003669 [I 2020-05-29 20:44:41,149] Finished trial#4 with value: 5.895332098007202 with parameters: {'lr': 0.00036694665278427677}. Best is trial#3 with value: 4.008862447738648. <optuna.study.Study at 0x23c93bec408>","title":"Tracking UI"},{"location":"tutorial/ui/#tracking-ui_1","text":"Optionally, you can update missing parameters: client.update_params('torch') [7] 2020-05-29 20:44:41 ( 350ms ) python3 ( 1min5s ) In a terminal, move to the working directory ( examples ), then run $ ivory ui [8] ( ) ( ) You can view the UI using URL http://localhost:5000 in your browser. Table 1 A collection of runs. Parameters, metrics, tags are logged. You can compare the training results among runs. Figure 1 Comparison of training curves See also the official MLFlow documentation .","title":"Tracking UI"}]}